
test_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009168  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00073ac4  08009300  08009300  00019300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0807cdc4  0807cdc4  000901d4  2**0
                  CONTENTS
  4 .ARM          00000008  0807cdc4  0807cdc4  0008cdc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0807cdcc  0807cdcc  000901d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0807cdcc  0807cdcc  0008cdcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0807cdd0  0807cdd0  0008cdd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0807cdd4  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bf4  200001d4  0807cfa8  000901d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000dc8  0807cfa8  00090dc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000901d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00090204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001673a  00000000  00000000  00090247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b51  00000000  00000000  000a6981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d8  00000000  00000000  000aa4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cc8  00000000  00000000  000ab5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a57c  00000000  00000000  000ac278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000182a4  00000000  00000000  000c67f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097b85  00000000  00000000  000dea98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000044b0  00000000  00000000  00176620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0017aad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001d4 	.word	0x200001d4
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080092e8 	.word	0x080092e8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001d8 	.word	0x200001d8
 80001d4:	080092e8 	.word	0x080092e8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fc91 	bl	8000e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f88b 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 f9d5 	bl	8000890 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e6:	f000 f99d 	bl	8000824 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004ea:	f000 f971 	bl	80007d0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004ee:	f000 f8ef 	bl	80006d0 <MX_ADC1_Init>
  MX_I2S2_Init();
 80004f2:	f000 f93f 	bl	8000774 <MX_I2S2_Init>
  MX_USB_DEVICE_Init();
 80004f6:	f008 f9d9 	bl	80088ac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_out, 32);
 80004fa:	2220      	movs	r2, #32
 80004fc:	4938      	ldr	r1, [pc, #224]	; (80005e0 <main+0x10c>)
 80004fe:	4839      	ldr	r0, [pc, #228]	; (80005e4 <main+0x110>)
 8000500:	f000 fd58 	bl	8000fb4 <HAL_ADC_Start_DMA>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//Configure the green button to act as button 1 on an Xbox 360 controller
	if(HAL_GPIO_ReadPin(GPIOC, Green_Button_Pin) == GPIO_PIN_SET) {
 8000504:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000508:	4837      	ldr	r0, [pc, #220]	; (80005e8 <main+0x114>)
 800050a:	f001 ff17 	bl	800233c <HAL_GPIO_ReadPin>
 800050e:	4603      	mov	r3, r0
 8000510:	2b01      	cmp	r3, #1
 8000512:	d107      	bne.n	8000524 <main+0x50>
		input_buff[3] |= 0x10;
 8000514:	4b35      	ldr	r3, [pc, #212]	; (80005ec <main+0x118>)
 8000516:	78db      	ldrb	r3, [r3, #3]
 8000518:	f043 0310 	orr.w	r3, r3, #16
 800051c:	b2da      	uxtb	r2, r3
 800051e:	4b33      	ldr	r3, [pc, #204]	; (80005ec <main+0x118>)
 8000520:	70da      	strb	r2, [r3, #3]
 8000522:	e006      	b.n	8000532 <main+0x5e>
	} else {
		input_buff[3] &= ~(0x10);
 8000524:	4b31      	ldr	r3, [pc, #196]	; (80005ec <main+0x118>)
 8000526:	78db      	ldrb	r3, [r3, #3]
 8000528:	f023 0310 	bic.w	r3, r3, #16
 800052c:	b2da      	uxtb	r2, r3
 800052e:	4b2f      	ldr	r3, [pc, #188]	; (80005ec <main+0x118>)
 8000530:	70da      	strb	r2, [r3, #3]
	}

	//Configure the red button to act as button 2 on an Xbox 360 controller
	if(HAL_GPIO_ReadPin(GPIOC, Red_Button_Pin) == GPIO_PIN_SET) {
 8000532:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000536:	482c      	ldr	r0, [pc, #176]	; (80005e8 <main+0x114>)
 8000538:	f001 ff00 	bl	800233c <HAL_GPIO_ReadPin>
 800053c:	4603      	mov	r3, r0
 800053e:	2b01      	cmp	r3, #1
 8000540:	d107      	bne.n	8000552 <main+0x7e>
		input_buff[3] |= 0x20;
 8000542:	4b2a      	ldr	r3, [pc, #168]	; (80005ec <main+0x118>)
 8000544:	78db      	ldrb	r3, [r3, #3]
 8000546:	f043 0320 	orr.w	r3, r3, #32
 800054a:	b2da      	uxtb	r2, r3
 800054c:	4b27      	ldr	r3, [pc, #156]	; (80005ec <main+0x118>)
 800054e:	70da      	strb	r2, [r3, #3]
 8000550:	e006      	b.n	8000560 <main+0x8c>
	} else {
		input_buff[3] &= ~(0x20);
 8000552:	4b26      	ldr	r3, [pc, #152]	; (80005ec <main+0x118>)
 8000554:	78db      	ldrb	r3, [r3, #3]
 8000556:	f023 0320 	bic.w	r3, r3, #32
 800055a:	b2da      	uxtb	r2, r3
 800055c:	4b23      	ldr	r3, [pc, #140]	; (80005ec <main+0x118>)
 800055e:	70da      	strb	r2, [r3, #3]
	}

	//Configure the yellow button to act as button 3 on an Xbox 360 controller
	if(HAL_GPIO_ReadPin(GPIOC, Yellow_Button_Pin) == GPIO_PIN_SET) {
 8000560:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000564:	4820      	ldr	r0, [pc, #128]	; (80005e8 <main+0x114>)
 8000566:	f001 fee9 	bl	800233c <HAL_GPIO_ReadPin>
 800056a:	4603      	mov	r3, r0
 800056c:	2b01      	cmp	r3, #1
 800056e:	d107      	bne.n	8000580 <main+0xac>
		input_buff[3] |= 0x40;
 8000570:	4b1e      	ldr	r3, [pc, #120]	; (80005ec <main+0x118>)
 8000572:	78db      	ldrb	r3, [r3, #3]
 8000574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000578:	b2da      	uxtb	r2, r3
 800057a:	4b1c      	ldr	r3, [pc, #112]	; (80005ec <main+0x118>)
 800057c:	70da      	strb	r2, [r3, #3]
 800057e:	e006      	b.n	800058e <main+0xba>
	} else {
		input_buff[3] &= ~(0x40);
 8000580:	4b1a      	ldr	r3, [pc, #104]	; (80005ec <main+0x118>)
 8000582:	78db      	ldrb	r3, [r3, #3]
 8000584:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000588:	b2da      	uxtb	r2, r3
 800058a:	4b18      	ldr	r3, [pc, #96]	; (80005ec <main+0x118>)
 800058c:	70da      	strb	r2, [r3, #3]
	}

	// Average the array of adc_out values
	uint32_t adc_sum = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < 32; i++) {
 8000592:	2300      	movs	r3, #0
 8000594:	603b      	str	r3, [r7, #0]
 8000596:	e00a      	b.n	80005ae <main+0xda>
		adc_sum += adc_out[i];
 8000598:	4a11      	ldr	r2, [pc, #68]	; (80005e0 <main+0x10c>)
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005a0:	461a      	mov	r2, r3
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4413      	add	r3, r2
 80005a6:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < 32; i++) {
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	3301      	adds	r3, #1
 80005ac:	603b      	str	r3, [r7, #0]
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	2b1f      	cmp	r3, #31
 80005b2:	ddf1      	ble.n	8000598 <main+0xc4>
	}
	adc_avg = adc_sum >> 5;  //This divides by 32
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	095b      	lsrs	r3, r3, #5
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <main+0x11c>)
 80005bc:	801a      	strh	r2, [r3, #0]

	input_buff[5] = adc_avg >> 4;	//This divides by 16 to get a 12-bit value to an 8-bit value
 80005be:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <main+0x11c>)
 80005c0:	881b      	ldrh	r3, [r3, #0]
 80005c2:	091b      	lsrs	r3, r3, #4
 80005c4:	b29b      	uxth	r3, r3
 80005c6:	b2da      	uxtb	r2, r3
 80005c8:	4b08      	ldr	r3, [pc, #32]	; (80005ec <main+0x118>)
 80005ca:	715a      	strb	r2, [r3, #5]

	//Send the current buffer to the computer
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, input_buff, 20);
 80005cc:	2214      	movs	r2, #20
 80005ce:	4907      	ldr	r1, [pc, #28]	; (80005ec <main+0x118>)
 80005d0:	4808      	ldr	r0, [pc, #32]	; (80005f4 <main+0x120>)
 80005d2:	f006 fcf1 	bl	8006fb8 <USBD_CUSTOM_HID_SendReport>

	//Add a short delay
	HAL_Delay (10);
 80005d6:	200a      	movs	r0, #10
 80005d8:	f000 fc84 	bl	8000ee4 <HAL_Delay>
  {
 80005dc:	e792      	b.n	8000504 <main+0x30>
 80005de:	bf00      	nop
 80005e0:	20000388 	.word	0x20000388
 80005e4:	200001f0 	.word	0x200001f0
 80005e8:	40020800 	.word	0x40020800
 80005ec:	200003cc 	.word	0x200003cc
 80005f0:	200003c8 	.word	0x200003c8
 80005f4:	200003e8 	.word	0x200003e8

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	; 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	2230      	movs	r2, #48	; 0x30
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f008 fe42 	bl	8009290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	4b29      	ldr	r3, [pc, #164]	; (80006c8 <SystemClock_Config+0xd0>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	4a28      	ldr	r2, [pc, #160]	; (80006c8 <SystemClock_Config+0xd0>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	; 0x40
 800062c:	4b26      	ldr	r3, [pc, #152]	; (80006c8 <SystemClock_Config+0xd0>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	4b23      	ldr	r3, [pc, #140]	; (80006cc <SystemClock_Config+0xd4>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a22      	ldr	r2, [pc, #136]	; (80006cc <SystemClock_Config+0xd4>)
 8000642:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b20      	ldr	r3, [pc, #128]	; (80006cc <SystemClock_Config+0xd4>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000654:	2303      	movs	r3, #3
 8000656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000658:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065e:	2301      	movs	r3, #1
 8000660:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000662:	2310      	movs	r3, #16
 8000664:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000670:	2304      	movs	r3, #4
 8000672:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000674:	2348      	movs	r3, #72	; 0x48
 8000676:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000678:	2304      	movs	r3, #4
 800067a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800067c:	2303      	movs	r3, #3
 800067e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 0320 	add.w	r3, r7, #32
 8000684:	4618      	mov	r0, r3
 8000686:	f003 fe69 	bl	800435c <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000690:	f000 f98c 	bl	80009ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000698:	2300      	movs	r3, #0
 800069a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f004 f8cb 	bl	800484c <HAL_RCC_ClockConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80006bc:	f000 f976 	bl	80009ac <Error_Handler>
  }
}
 80006c0:	bf00      	nop
 80006c2:	3750      	adds	r7, #80	; 0x50
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006d6:	463b      	mov	r3, r7
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006e2:	4b21      	ldr	r3, [pc, #132]	; (8000768 <MX_ADC1_Init+0x98>)
 80006e4:	4a21      	ldr	r2, [pc, #132]	; (800076c <MX_ADC1_Init+0x9c>)
 80006e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <MX_ADC1_Init+0x98>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ee:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <MX_ADC1_Init+0x98>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006f4:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <MX_ADC1_Init+0x98>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006fa:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <MX_ADC1_Init+0x98>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000700:	4b19      	ldr	r3, [pc, #100]	; (8000768 <MX_ADC1_Init+0x98>)
 8000702:	2200      	movs	r2, #0
 8000704:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000708:	4b17      	ldr	r3, [pc, #92]	; (8000768 <MX_ADC1_Init+0x98>)
 800070a:	2200      	movs	r2, #0
 800070c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800070e:	4b16      	ldr	r3, [pc, #88]	; (8000768 <MX_ADC1_Init+0x98>)
 8000710:	4a17      	ldr	r2, [pc, #92]	; (8000770 <MX_ADC1_Init+0xa0>)
 8000712:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_ADC1_Init+0x98>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_ADC1_Init+0x98>)
 800071c:	2201      	movs	r2, #1
 800071e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_ADC1_Init+0x98>)
 8000722:	2201      	movs	r2, #1
 8000724:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_ADC1_Init+0x98>)
 800072a:	2201      	movs	r2, #1
 800072c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800072e:	480e      	ldr	r0, [pc, #56]	; (8000768 <MX_ADC1_Init+0x98>)
 8000730:	f000 fbfc 	bl	8000f2c <HAL_ADC_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800073a:	f000 f937 	bl	80009ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800073e:	2300      	movs	r3, #0
 8000740:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000742:	2301      	movs	r3, #1
 8000744:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	4619      	mov	r1, r3
 800074e:	4806      	ldr	r0, [pc, #24]	; (8000768 <MX_ADC1_Init+0x98>)
 8000750:	f000 fd3e 	bl	80011d0 <HAL_ADC_ConfigChannel>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800075a:	f000 f927 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200001f0 	.word	0x200001f0
 800076c:	40012000 	.word	0x40012000
 8000770:	0f000001 	.word	0x0f000001

08000774 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000778:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <MX_I2S2_Init+0x54>)
 800077a:	4a14      	ldr	r2, [pc, #80]	; (80007cc <MX_I2S2_Init+0x58>)
 800077c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800077e:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_I2S2_Init+0x54>)
 8000780:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000784:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <MX_I2S2_Init+0x54>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800078c:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_I2S2_Init+0x54>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000792:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <MX_I2S2_Init+0x54>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000798:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <MX_I2S2_Init+0x54>)
 800079a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800079e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_I2S2_Init+0x54>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <MX_I2S2_Init+0x54>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_I2S2_Init+0x54>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_I2S2_Init+0x54>)
 80007b4:	f001 fdf4 	bl	80023a0 <HAL_I2S_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80007be:	f000 f8f5 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000298 	.word	0x20000298
 80007cc:	40003800 	.word	0x40003800

080007d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007d4:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007d6:	4a12      	ldr	r2, [pc, #72]	; (8000820 <MX_USART2_UART_Init+0x50>)
 80007d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007f6:	220c      	movs	r2, #12
 80007f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_USART2_UART_Init+0x4c>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_USART2_UART_Init+0x4c>)
 8000808:	f004 fb92 	bl	8004f30 <HAL_UART_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000812:	f000 f8cb 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000340 	.word	0x20000340
 8000820:	40004400 	.word	0x40004400

08000824 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	4b17      	ldr	r3, [pc, #92]	; (800088c <MX_DMA_Init+0x68>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a16      	ldr	r2, [pc, #88]	; (800088c <MX_DMA_Init+0x68>)
 8000834:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_DMA_Init+0x68>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <MX_DMA_Init+0x68>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a0f      	ldr	r2, [pc, #60]	; (800088c <MX_DMA_Init+0x68>)
 8000850:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b0d      	ldr	r3, [pc, #52]	; (800088c <MX_DMA_Init+0x68>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	2100      	movs	r1, #0
 8000866:	200f      	movs	r0, #15
 8000868:	f001 f83d 	bl	80018e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800086c:	200f      	movs	r0, #15
 800086e:	f001 f856 	bl	800191e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	2100      	movs	r1, #0
 8000876:	2038      	movs	r0, #56	; 0x38
 8000878:	f001 f835 	bl	80018e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800087c:	2038      	movs	r0, #56	; 0x38
 800087e:	f001 f84e 	bl	800191e <HAL_NVIC_EnableIRQ>

}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800

08000890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08a      	sub	sp, #40	; 0x28
 8000894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	4b3d      	ldr	r3, [pc, #244]	; (80009a0 <MX_GPIO_Init+0x110>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a3c      	ldr	r2, [pc, #240]	; (80009a0 <MX_GPIO_Init+0x110>)
 80008b0:	f043 0304 	orr.w	r3, r3, #4
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b3a      	ldr	r3, [pc, #232]	; (80009a0 <MX_GPIO_Init+0x110>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0304 	and.w	r3, r3, #4
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	4b36      	ldr	r3, [pc, #216]	; (80009a0 <MX_GPIO_Init+0x110>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a35      	ldr	r2, [pc, #212]	; (80009a0 <MX_GPIO_Init+0x110>)
 80008cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b33      	ldr	r3, [pc, #204]	; (80009a0 <MX_GPIO_Init+0x110>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	4b2f      	ldr	r3, [pc, #188]	; (80009a0 <MX_GPIO_Init+0x110>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a2e      	ldr	r2, [pc, #184]	; (80009a0 <MX_GPIO_Init+0x110>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b2c      	ldr	r3, [pc, #176]	; (80009a0 <MX_GPIO_Init+0x110>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	4b28      	ldr	r3, [pc, #160]	; (80009a0 <MX_GPIO_Init+0x110>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a27      	ldr	r2, [pc, #156]	; (80009a0 <MX_GPIO_Init+0x110>)
 8000904:	f043 0302 	orr.w	r3, r3, #2
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b25      	ldr	r3, [pc, #148]	; (80009a0 <MX_GPIO_Init+0x110>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED0_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2107      	movs	r1, #7
 800091a:	4822      	ldr	r0, [pc, #136]	; (80009a4 <MX_GPIO_Init+0x114>)
 800091c:	f001 fd26 	bl	800236c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	2120      	movs	r1, #32
 8000924:	4820      	ldr	r0, [pc, #128]	; (80009a8 <MX_GPIO_Init+0x118>)
 8000926:	f001 fd21 	bl	800236c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800092a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800092e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000930:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	4619      	mov	r1, r3
 8000940:	4818      	ldr	r0, [pc, #96]	; (80009a4 <MX_GPIO_Init+0x114>)
 8000942:	f001 fb77 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin;
 8000946:	2307      	movs	r3, #7
 8000948:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094a:	2301      	movs	r3, #1
 800094c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	4619      	mov	r1, r3
 800095c:	4811      	ldr	r0, [pc, #68]	; (80009a4 <MX_GPIO_Init+0x114>)
 800095e:	f001 fb69 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000962:	2320      	movs	r3, #32
 8000964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000966:	2301      	movs	r3, #1
 8000968:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	4619      	mov	r1, r3
 8000978:	480b      	ldr	r0, [pc, #44]	; (80009a8 <MX_GPIO_Init+0x118>)
 800097a:	f001 fb5b 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : Green_Button_Pin Red_Button_Pin Yellow_Button_Pin */
  GPIO_InitStruct.Pin = Green_Button_Pin|Red_Button_Pin|Yellow_Button_Pin;
 800097e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000984:	2300      	movs	r3, #0
 8000986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4619      	mov	r1, r3
 8000992:	4804      	ldr	r0, [pc, #16]	; (80009a4 <MX_GPIO_Init+0x114>)
 8000994:	f001 fb4e 	bl	8002034 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000998:	bf00      	nop
 800099a:	3728      	adds	r7, #40	; 0x28
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40020800 	.word	0x40020800
 80009a8:	40020000 	.word	0x40020000

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b0:	b672      	cpsid	i
}
 80009b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <Error_Handler+0x8>
	...

080009b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <HAL_MspInit+0x4c>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c6:	4a0f      	ldr	r2, [pc, #60]	; (8000a04 <HAL_MspInit+0x4c>)
 80009c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009cc:	6453      	str	r3, [r2, #68]	; 0x44
 80009ce:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <HAL_MspInit+0x4c>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	603b      	str	r3, [r7, #0]
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <HAL_MspInit+0x4c>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	4a08      	ldr	r2, [pc, #32]	; (8000a04 <HAL_MspInit+0x4c>)
 80009e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <HAL_MspInit+0x4c>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009f6:	2007      	movs	r0, #7
 80009f8:	f000 ff6a 	bl	80018d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fc:	bf00      	nop
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40023800 	.word	0x40023800

08000a08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	; 0x28
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a2f      	ldr	r2, [pc, #188]	; (8000ae4 <HAL_ADC_MspInit+0xdc>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d157      	bne.n	8000ada <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	4b2e      	ldr	r3, [pc, #184]	; (8000ae8 <HAL_ADC_MspInit+0xe0>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a32:	4a2d      	ldr	r2, [pc, #180]	; (8000ae8 <HAL_ADC_MspInit+0xe0>)
 8000a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a38:	6453      	str	r3, [r2, #68]	; 0x44
 8000a3a:	4b2b      	ldr	r3, [pc, #172]	; (8000ae8 <HAL_ADC_MspInit+0xe0>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	4b27      	ldr	r3, [pc, #156]	; (8000ae8 <HAL_ADC_MspInit+0xe0>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a26      	ldr	r2, [pc, #152]	; (8000ae8 <HAL_ADC_MspInit+0xe0>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b24      	ldr	r3, [pc, #144]	; (8000ae8 <HAL_ADC_MspInit+0xe0>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a62:	2301      	movs	r3, #1
 8000a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a66:	2303      	movs	r3, #3
 8000a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	481d      	ldr	r0, [pc, #116]	; (8000aec <HAL_ADC_MspInit+0xe4>)
 8000a76:	f001 fadd 	bl	8002034 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000a7a:	4b1d      	ldr	r3, [pc, #116]	; (8000af0 <HAL_ADC_MspInit+0xe8>)
 8000a7c:	4a1d      	ldr	r2, [pc, #116]	; (8000af4 <HAL_ADC_MspInit+0xec>)
 8000a7e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000a80:	4b1b      	ldr	r3, [pc, #108]	; (8000af0 <HAL_ADC_MspInit+0xe8>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a86:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <HAL_ADC_MspInit+0xe8>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a8c:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <HAL_ADC_MspInit+0xe8>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a92:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <HAL_ADC_MspInit+0xe8>)
 8000a94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a98:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <HAL_ADC_MspInit+0xe8>)
 8000a9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000aa0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000aa2:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <HAL_ADC_MspInit+0xe8>)
 8000aa4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aa8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000aaa:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <HAL_ADC_MspInit+0xe8>)
 8000aac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ab0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <HAL_ADC_MspInit+0xe8>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ab8:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <HAL_ADC_MspInit+0xe8>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000abe:	480c      	ldr	r0, [pc, #48]	; (8000af0 <HAL_ADC_MspInit+0xe8>)
 8000ac0:	f000 ff48 	bl	8001954 <HAL_DMA_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000aca:	f7ff ff6f 	bl	80009ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a07      	ldr	r2, [pc, #28]	; (8000af0 <HAL_ADC_MspInit+0xe8>)
 8000ad2:	639a      	str	r2, [r3, #56]	; 0x38
 8000ad4:	4a06      	ldr	r2, [pc, #24]	; (8000af0 <HAL_ADC_MspInit+0xe8>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ada:	bf00      	nop
 8000adc:	3728      	adds	r7, #40	; 0x28
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40012000 	.word	0x40012000
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020000 	.word	0x40020000
 8000af0:	20000238 	.word	0x20000238
 8000af4:	40026410 	.word	0x40026410

08000af8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b090      	sub	sp, #64	; 0x40
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
 8000b20:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI2)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a4a      	ldr	r2, [pc, #296]	; (8000c50 <HAL_I2S_MspInit+0x158>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	f040 808c 	bne.w	8000c46 <HAL_I2S_MspInit+0x14e>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000b32:	23c8      	movs	r3, #200	; 0xc8
 8000b34:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 4;
 8000b36:	2304      	movs	r3, #4
 8000b38:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 4;
 8000b3a:	2304      	movs	r3, #4
 8000b3c:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4618      	mov	r0, r3
 8000b44:	f004 f8a2 	bl	8004c8c <HAL_RCCEx_PeriphCLKConfig>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <HAL_I2S_MspInit+0x5a>
    {
      Error_Handler();
 8000b4e:	f7ff ff2d 	bl	80009ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	4b3f      	ldr	r3, [pc, #252]	; (8000c54 <HAL_I2S_MspInit+0x15c>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	4a3e      	ldr	r2, [pc, #248]	; (8000c54 <HAL_I2S_MspInit+0x15c>)
 8000b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b60:	6413      	str	r3, [r2, #64]	; 0x40
 8000b62:	4b3c      	ldr	r3, [pc, #240]	; (8000c54 <HAL_I2S_MspInit+0x15c>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	4b38      	ldr	r3, [pc, #224]	; (8000c54 <HAL_I2S_MspInit+0x15c>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a37      	ldr	r2, [pc, #220]	; (8000c54 <HAL_I2S_MspInit+0x15c>)
 8000b78:	f043 0304 	orr.w	r3, r3, #4
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b35      	ldr	r3, [pc, #212]	; (8000c54 <HAL_I2S_MspInit+0x15c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0304 	and.w	r3, r3, #4
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	4b31      	ldr	r3, [pc, #196]	; (8000c54 <HAL_I2S_MspInit+0x15c>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a30      	ldr	r2, [pc, #192]	; (8000c54 <HAL_I2S_MspInit+0x15c>)
 8000b94:	f043 0302 	orr.w	r3, r3, #2
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b2e      	ldr	r3, [pc, #184]	; (8000c54 <HAL_I2S_MspInit+0x15c>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ba6:	2308      	movs	r3, #8
 8000ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bb6:	2305      	movs	r3, #5
 8000bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4825      	ldr	r0, [pc, #148]	; (8000c58 <HAL_I2S_MspInit+0x160>)
 8000bc2:	f001 fa37 	bl	8002034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000bc6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bd8:	2305      	movs	r3, #5
 8000bda:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000be0:	4619      	mov	r1, r3
 8000be2:	481e      	ldr	r0, [pc, #120]	; (8000c5c <HAL_I2S_MspInit+0x164>)
 8000be4:	f001 fa26 	bl	8002034 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000be8:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <HAL_I2S_MspInit+0x168>)
 8000bea:	4a1e      	ldr	r2, [pc, #120]	; (8000c64 <HAL_I2S_MspInit+0x16c>)
 8000bec:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000bee:	4b1c      	ldr	r3, [pc, #112]	; (8000c60 <HAL_I2S_MspInit+0x168>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bf4:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <HAL_I2S_MspInit+0x168>)
 8000bf6:	2240      	movs	r2, #64	; 0x40
 8000bf8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bfa:	4b19      	ldr	r3, [pc, #100]	; (8000c60 <HAL_I2S_MspInit+0x168>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c00:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <HAL_I2S_MspInit+0x168>)
 8000c02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c06:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c08:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <HAL_I2S_MspInit+0x168>)
 8000c0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c0e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c10:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <HAL_I2S_MspInit+0x168>)
 8000c12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c16:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000c18:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <HAL_I2S_MspInit+0x168>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <HAL_I2S_MspInit+0x168>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c24:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <HAL_I2S_MspInit+0x168>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000c2a:	480d      	ldr	r0, [pc, #52]	; (8000c60 <HAL_I2S_MspInit+0x168>)
 8000c2c:	f000 fe92 	bl	8001954 <HAL_DMA_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <HAL_I2S_MspInit+0x142>
    {
      Error_Handler();
 8000c36:	f7ff feb9 	bl	80009ac <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4a08      	ldr	r2, [pc, #32]	; (8000c60 <HAL_I2S_MspInit+0x168>)
 8000c3e:	639a      	str	r2, [r3, #56]	; 0x38
 8000c40:	4a07      	ldr	r2, [pc, #28]	; (8000c60 <HAL_I2S_MspInit+0x168>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000c46:	bf00      	nop
 8000c48:	3740      	adds	r7, #64	; 0x40
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40003800 	.word	0x40003800
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020800 	.word	0x40020800
 8000c5c:	40020400 	.word	0x40020400
 8000c60:	200002e0 	.word	0x200002e0
 8000c64:	40026070 	.word	0x40026070

08000c68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08a      	sub	sp, #40	; 0x28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a19      	ldr	r2, [pc, #100]	; (8000cec <HAL_UART_MspInit+0x84>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d12b      	bne.n	8000ce2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <HAL_UART_MspInit+0x88>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	4a17      	ldr	r2, [pc, #92]	; (8000cf0 <HAL_UART_MspInit+0x88>)
 8000c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c98:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <HAL_UART_MspInit+0x88>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <HAL_UART_MspInit+0x88>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a10      	ldr	r2, [pc, #64]	; (8000cf0 <HAL_UART_MspInit+0x88>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <HAL_UART_MspInit+0x88>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cc2:	230c      	movs	r3, #12
 8000cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cd2:	2307      	movs	r3, #7
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <HAL_UART_MspInit+0x8c>)
 8000cde:	f001 f9a9 	bl	8002034 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ce2:	bf00      	nop
 8000ce4:	3728      	adds	r7, #40	; 0x28
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40004400 	.word	0x40004400
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020000 	.word	0x40020000

08000cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cfc:	e7fe      	b.n	8000cfc <NMI_Handler+0x4>

08000cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <HardFault_Handler+0x4>

08000d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <MemManage_Handler+0x4>

08000d0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <BusFault_Handler+0x4>

08000d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <UsageFault_Handler+0x4>

08000d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d44:	f000 f8ae 	bl	8000ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000d50:	4802      	ldr	r0, [pc, #8]	; (8000d5c <DMA1_Stream4_IRQHandler+0x10>)
 8000d52:	f000 ff05 	bl	8001b60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200002e0 	.word	0x200002e0

08000d60 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d64:	4802      	ldr	r0, [pc, #8]	; (8000d70 <DMA2_Stream0_IRQHandler+0x10>)
 8000d66:	f000 fefb 	bl	8001b60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000238 	.word	0x20000238

08000d74 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d78:	4802      	ldr	r0, [pc, #8]	; (8000d84 <OTG_FS_IRQHandler+0x10>)
 8000d7a:	f002 f9fb 	bl	8003174 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200008c4 	.word	0x200008c4

08000d88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <SystemInit+0x20>)
 8000d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d92:	4a05      	ldr	r2, [pc, #20]	; (8000da8 <SystemInit+0x20>)
 8000d94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <Reset_Handler>:
 8000dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de4 <LoopFillZerobss+0xe>
 8000db0:	f7ff ffea 	bl	8000d88 <SystemInit>
 8000db4:	480c      	ldr	r0, [pc, #48]	; (8000de8 <LoopFillZerobss+0x12>)
 8000db6:	490d      	ldr	r1, [pc, #52]	; (8000dec <LoopFillZerobss+0x16>)
 8000db8:	4a0d      	ldr	r2, [pc, #52]	; (8000df0 <LoopFillZerobss+0x1a>)
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e002      	b.n	8000dc4 <LoopCopyDataInit>

08000dbe <CopyDataInit>:
 8000dbe:	58d4      	ldr	r4, [r2, r3]
 8000dc0:	50c4      	str	r4, [r0, r3]
 8000dc2:	3304      	adds	r3, #4

08000dc4 <LoopCopyDataInit>:
 8000dc4:	18c4      	adds	r4, r0, r3
 8000dc6:	428c      	cmp	r4, r1
 8000dc8:	d3f9      	bcc.n	8000dbe <CopyDataInit>
 8000dca:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <LoopFillZerobss+0x1e>)
 8000dcc:	4c0a      	ldr	r4, [pc, #40]	; (8000df8 <LoopFillZerobss+0x22>)
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e001      	b.n	8000dd6 <LoopFillZerobss>

08000dd2 <FillZerobss>:
 8000dd2:	6013      	str	r3, [r2, #0]
 8000dd4:	3204      	adds	r2, #4

08000dd6 <LoopFillZerobss>:
 8000dd6:	42a2      	cmp	r2, r4
 8000dd8:	d3fb      	bcc.n	8000dd2 <FillZerobss>
 8000dda:	f008 fa61 	bl	80092a0 <__libc_init_array>
 8000dde:	f7ff fb79 	bl	80004d4 <main>
 8000de2:	4770      	bx	lr
 8000de4:	20020000 	.word	0x20020000
 8000de8:	20000000 	.word	0x20000000
 8000dec:	200001d4 	.word	0x200001d4
 8000df0:	0807cdd4 	.word	0x0807cdd4
 8000df4:	200001d4 	.word	0x200001d4
 8000df8:	20000dc8 	.word	0x20000dc8

08000dfc <ADC_IRQHandler>:
 8000dfc:	e7fe      	b.n	8000dfc <ADC_IRQHandler>
	...

08000e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e04:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0d      	ldr	r2, [pc, #52]	; (8000e40 <HAL_Init+0x40>)
 8000e0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e10:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <HAL_Init+0x40>)
 8000e16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <HAL_Init+0x40>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a07      	ldr	r2, [pc, #28]	; (8000e40 <HAL_Init+0x40>)
 8000e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f000 fd51 	bl	80018d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f000 f808 	bl	8000e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e34:	f7ff fdc0 	bl	80009b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023c00 	.word	0x40023c00

08000e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_InitTick+0x54>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <HAL_InitTick+0x58>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	4619      	mov	r1, r3
 8000e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 fd69 	bl	800193a <HAL_SYSTICK_Config>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e00e      	b.n	8000e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b0f      	cmp	r3, #15
 8000e76:	d80a      	bhi.n	8000e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e80:	f000 fd31 	bl	80018e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e84:	4a06      	ldr	r2, [pc, #24]	; (8000ea0 <HAL_InitTick+0x5c>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e000      	b.n	8000e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	20000004 	.word	0x20000004

08000ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_IncTick+0x20>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_IncTick+0x24>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <HAL_IncTick+0x24>)
 8000eb6:	6013      	str	r3, [r2, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	200003e0 	.word	0x200003e0

08000ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed0:	4b03      	ldr	r3, [pc, #12]	; (8000ee0 <HAL_GetTick+0x14>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	200003e0 	.word	0x200003e0

08000ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eec:	f7ff ffee 	bl	8000ecc <HAL_GetTick>
 8000ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000efc:	d005      	beq.n	8000f0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000efe:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_Delay+0x44>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	461a      	mov	r2, r3
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4413      	add	r3, r2
 8000f08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f0a:	bf00      	nop
 8000f0c:	f7ff ffde 	bl	8000ecc <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d8f7      	bhi.n	8000f0c <HAL_Delay+0x28>
  {
  }
}
 8000f1c:	bf00      	nop
 8000f1e:	bf00      	nop
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000008 	.word	0x20000008

08000f2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f34:	2300      	movs	r3, #0
 8000f36:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d101      	bne.n	8000f42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e033      	b.n	8000faa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d109      	bne.n	8000f5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff fd5c 	bl	8000a08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2200      	movs	r2, #0
 8000f54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	f003 0310 	and.w	r3, r3, #16
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d118      	bne.n	8000f9c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f72:	f023 0302 	bic.w	r3, r3, #2
 8000f76:	f043 0202 	orr.w	r2, r3, #2
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f000 fa58 	bl	8001434 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	f023 0303 	bic.w	r3, r3, #3
 8000f92:	f043 0201 	orr.w	r2, r3, #1
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	641a      	str	r2, [r3, #64]	; 0x40
 8000f9a:	e001      	b.n	8000fa0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d101      	bne.n	8000fd2 <HAL_ADC_Start_DMA+0x1e>
 8000fce:	2302      	movs	r3, #2
 8000fd0:	e0ce      	b.n	8001170 <HAL_ADC_Start_DMA+0x1bc>
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d018      	beq.n	800101a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	689a      	ldr	r2, [r3, #8]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f042 0201 	orr.w	r2, r2, #1
 8000ff6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ff8:	4b5f      	ldr	r3, [pc, #380]	; (8001178 <HAL_ADC_Start_DMA+0x1c4>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a5f      	ldr	r2, [pc, #380]	; (800117c <HAL_ADC_Start_DMA+0x1c8>)
 8000ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8001002:	0c9a      	lsrs	r2, r3, #18
 8001004:	4613      	mov	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	4413      	add	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800100c:	e002      	b.n	8001014 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	3b01      	subs	r3, #1
 8001012:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1f9      	bne.n	800100e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001028:	d107      	bne.n	800103a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001038:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	2b01      	cmp	r3, #1
 8001046:	f040 8086 	bne.w	8001156 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001052:	f023 0301 	bic.w	r3, r3, #1
 8001056:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001068:	2b00      	cmp	r3, #0
 800106a:	d007      	beq.n	800107c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001074:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001080:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001088:	d106      	bne.n	8001098 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	f023 0206 	bic.w	r2, r3, #6
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	645a      	str	r2, [r3, #68]	; 0x44
 8001096:	e002      	b.n	800109e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2200      	movs	r2, #0
 800109c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010a6:	4b36      	ldr	r3, [pc, #216]	; (8001180 <HAL_ADC_Start_DMA+0x1cc>)
 80010a8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ae:	4a35      	ldr	r2, [pc, #212]	; (8001184 <HAL_ADC_Start_DMA+0x1d0>)
 80010b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010b6:	4a34      	ldr	r2, [pc, #208]	; (8001188 <HAL_ADC_Start_DMA+0x1d4>)
 80010b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010be:	4a33      	ldr	r2, [pc, #204]	; (800118c <HAL_ADC_Start_DMA+0x1d8>)
 80010c0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80010ca:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80010da:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	689a      	ldr	r2, [r3, #8]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010ea:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	334c      	adds	r3, #76	; 0x4c
 80010f6:	4619      	mov	r1, r3
 80010f8:	68ba      	ldr	r2, [r7, #8]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f000 fcd8 	bl	8001ab0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 031f 	and.w	r3, r3, #31
 8001108:	2b00      	cmp	r3, #0
 800110a:	d10f      	bne.n	800112c <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d129      	bne.n	800116e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	e020      	b.n	800116e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a17      	ldr	r2, [pc, #92]	; (8001190 <HAL_ADC_Start_DMA+0x1dc>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d11b      	bne.n	800116e <HAL_ADC_Start_DMA+0x1ba>
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d114      	bne.n	800116e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	e00b      	b.n	800116e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	f043 0210 	orr.w	r2, r3, #16
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	f043 0201 	orr.w	r2, r3, #1
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	3718      	adds	r7, #24
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000000 	.word	0x20000000
 800117c:	431bde83 	.word	0x431bde83
 8001180:	40012300 	.word	0x40012300
 8001184:	0800162d 	.word	0x0800162d
 8001188:	080016e7 	.word	0x080016e7
 800118c:	08001703 	.word	0x08001703
 8001190:	40012000 	.word	0x40012000

08001194 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d101      	bne.n	80011ec <HAL_ADC_ConfigChannel+0x1c>
 80011e8:	2302      	movs	r3, #2
 80011ea:	e113      	b.n	8001414 <HAL_ADC_ConfigChannel+0x244>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2201      	movs	r2, #1
 80011f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b09      	cmp	r3, #9
 80011fa:	d925      	bls.n	8001248 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	68d9      	ldr	r1, [r3, #12]
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	b29b      	uxth	r3, r3
 8001208:	461a      	mov	r2, r3
 800120a:	4613      	mov	r3, r2
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	4413      	add	r3, r2
 8001210:	3b1e      	subs	r3, #30
 8001212:	2207      	movs	r2, #7
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43da      	mvns	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	400a      	ands	r2, r1
 8001220:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	68d9      	ldr	r1, [r3, #12]
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	b29b      	uxth	r3, r3
 8001232:	4618      	mov	r0, r3
 8001234:	4603      	mov	r3, r0
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	4403      	add	r3, r0
 800123a:	3b1e      	subs	r3, #30
 800123c:	409a      	lsls	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	430a      	orrs	r2, r1
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	e022      	b.n	800128e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6919      	ldr	r1, [r3, #16]
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	b29b      	uxth	r3, r3
 8001254:	461a      	mov	r2, r3
 8001256:	4613      	mov	r3, r2
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	4413      	add	r3, r2
 800125c:	2207      	movs	r2, #7
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43da      	mvns	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	400a      	ands	r2, r1
 800126a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6919      	ldr	r1, [r3, #16]
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	689a      	ldr	r2, [r3, #8]
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	b29b      	uxth	r3, r3
 800127c:	4618      	mov	r0, r3
 800127e:	4603      	mov	r3, r0
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	4403      	add	r3, r0
 8001284:	409a      	lsls	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	430a      	orrs	r2, r1
 800128c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2b06      	cmp	r3, #6
 8001294:	d824      	bhi.n	80012e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	4613      	mov	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	3b05      	subs	r3, #5
 80012a8:	221f      	movs	r2, #31
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43da      	mvns	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	400a      	ands	r2, r1
 80012b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	4618      	mov	r0, r3
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	4613      	mov	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	3b05      	subs	r3, #5
 80012d2:	fa00 f203 	lsl.w	r2, r0, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	430a      	orrs	r2, r1
 80012dc:	635a      	str	r2, [r3, #52]	; 0x34
 80012de:	e04c      	b.n	800137a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b0c      	cmp	r3, #12
 80012e6:	d824      	bhi.n	8001332 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	4613      	mov	r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	3b23      	subs	r3, #35	; 0x23
 80012fa:	221f      	movs	r2, #31
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43da      	mvns	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	400a      	ands	r2, r1
 8001308:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	b29b      	uxth	r3, r3
 8001316:	4618      	mov	r0, r3
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	4613      	mov	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4413      	add	r3, r2
 8001322:	3b23      	subs	r3, #35	; 0x23
 8001324:	fa00 f203 	lsl.w	r2, r0, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	430a      	orrs	r2, r1
 800132e:	631a      	str	r2, [r3, #48]	; 0x30
 8001330:	e023      	b.n	800137a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	4613      	mov	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	4413      	add	r3, r2
 8001342:	3b41      	subs	r3, #65	; 0x41
 8001344:	221f      	movs	r2, #31
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43da      	mvns	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	400a      	ands	r2, r1
 8001352:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	b29b      	uxth	r3, r3
 8001360:	4618      	mov	r0, r3
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	4613      	mov	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	3b41      	subs	r3, #65	; 0x41
 800136e:	fa00 f203 	lsl.w	r2, r0, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	430a      	orrs	r2, r1
 8001378:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800137a:	4b29      	ldr	r3, [pc, #164]	; (8001420 <HAL_ADC_ConfigChannel+0x250>)
 800137c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a28      	ldr	r2, [pc, #160]	; (8001424 <HAL_ADC_ConfigChannel+0x254>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d10f      	bne.n	80013a8 <HAL_ADC_ConfigChannel+0x1d8>
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b12      	cmp	r3, #18
 800138e:	d10b      	bne.n	80013a8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a1d      	ldr	r2, [pc, #116]	; (8001424 <HAL_ADC_ConfigChannel+0x254>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d12b      	bne.n	800140a <HAL_ADC_ConfigChannel+0x23a>
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a1c      	ldr	r2, [pc, #112]	; (8001428 <HAL_ADC_ConfigChannel+0x258>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d003      	beq.n	80013c4 <HAL_ADC_ConfigChannel+0x1f4>
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b11      	cmp	r3, #17
 80013c2:	d122      	bne.n	800140a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a11      	ldr	r2, [pc, #68]	; (8001428 <HAL_ADC_ConfigChannel+0x258>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d111      	bne.n	800140a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <HAL_ADC_ConfigChannel+0x25c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a11      	ldr	r2, [pc, #68]	; (8001430 <HAL_ADC_ConfigChannel+0x260>)
 80013ec:	fba2 2303 	umull	r2, r3, r2, r3
 80013f0:	0c9a      	lsrs	r2, r3, #18
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80013fc:	e002      	b.n	8001404 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	3b01      	subs	r3, #1
 8001402:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f9      	bne.n	80013fe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	40012300 	.word	0x40012300
 8001424:	40012000 	.word	0x40012000
 8001428:	10000012 	.word	0x10000012
 800142c:	20000000 	.word	0x20000000
 8001430:	431bde83 	.word	0x431bde83

08001434 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800143c:	4b79      	ldr	r3, [pc, #484]	; (8001624 <ADC_Init+0x1f0>)
 800143e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	431a      	orrs	r2, r3
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001468:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6859      	ldr	r1, [r3, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	021a      	lsls	r2, r3, #8
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	430a      	orrs	r2, r1
 800147c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800148c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	6859      	ldr	r1, [r3, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	430a      	orrs	r2, r1
 800149e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6899      	ldr	r1, [r3, #8]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	68da      	ldr	r2, [r3, #12]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	430a      	orrs	r2, r1
 80014c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c6:	4a58      	ldr	r2, [pc, #352]	; (8001628 <ADC_Init+0x1f4>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d022      	beq.n	8001512 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6899      	ldr	r1, [r3, #8]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6899      	ldr	r1, [r3, #8]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	430a      	orrs	r2, r1
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	e00f      	b.n	8001532 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001520:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001530:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 0202 	bic.w	r2, r2, #2
 8001540:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6899      	ldr	r1, [r3, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	7e1b      	ldrb	r3, [r3, #24]
 800154c:	005a      	lsls	r2, r3, #1
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	430a      	orrs	r2, r1
 8001554:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 3020 	ldrb.w	r3, [r3, #32]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d01b      	beq.n	8001598 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800156e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800157e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6859      	ldr	r1, [r3, #4]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158a:	3b01      	subs	r3, #1
 800158c:	035a      	lsls	r2, r3, #13
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	e007      	b.n	80015a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015a6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80015b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	051a      	lsls	r2, r3, #20
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6899      	ldr	r1, [r3, #8]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015ea:	025a      	lsls	r2, r3, #9
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	430a      	orrs	r2, r1
 80015f2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001602:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6899      	ldr	r1, [r3, #8]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	029a      	lsls	r2, r3, #10
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	430a      	orrs	r2, r1
 8001616:	609a      	str	r2, [r3, #8]
}
 8001618:	bf00      	nop
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	40012300 	.word	0x40012300
 8001628:	0f000001 	.word	0x0f000001

0800162c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001638:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001642:	2b00      	cmp	r3, #0
 8001644:	d13c      	bne.n	80016c0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d12b      	bne.n	80016b8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001664:	2b00      	cmp	r3, #0
 8001666:	d127      	bne.n	80016b8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001672:	2b00      	cmp	r3, #0
 8001674:	d006      	beq.n	8001684 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001680:	2b00      	cmp	r3, #0
 8001682:	d119      	bne.n	80016b8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f022 0220 	bic.w	r2, r2, #32
 8001692:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001698:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d105      	bne.n	80016b8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	f043 0201 	orr.w	r2, r3, #1
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80016b8:	68f8      	ldr	r0, [r7, #12]
 80016ba:	f7ff fd6b 	bl	8001194 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80016be:	e00e      	b.n	80016de <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	f003 0310 	and.w	r3, r3, #16
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80016cc:	68f8      	ldr	r0, [r7, #12]
 80016ce:	f7ff fd75 	bl	80011bc <HAL_ADC_ErrorCallback>
}
 80016d2:	e004      	b.n	80016de <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	4798      	blx	r3
}
 80016de:	bf00      	nop
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b084      	sub	sp, #16
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	f7ff fd57 	bl	80011a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80016fa:	bf00      	nop
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b084      	sub	sp, #16
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800170e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2240      	movs	r2, #64	; 0x40
 8001714:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	f043 0204 	orr.w	r2, r3, #4
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001722:	68f8      	ldr	r0, [r7, #12]
 8001724:	f7ff fd4a 	bl	80011bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001728:	bf00      	nop
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <__NVIC_SetPriorityGrouping+0x44>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800174c:	4013      	ands	r3, r2
 800174e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001758:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800175c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001762:	4a04      	ldr	r2, [pc, #16]	; (8001774 <__NVIC_SetPriorityGrouping+0x44>)
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	60d3      	str	r3, [r2, #12]
}
 8001768:	bf00      	nop
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800177c:	4b04      	ldr	r3, [pc, #16]	; (8001790 <__NVIC_GetPriorityGrouping+0x18>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	0a1b      	lsrs	r3, r3, #8
 8001782:	f003 0307 	and.w	r3, r3, #7
}
 8001786:	4618      	mov	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	db0b      	blt.n	80017be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	f003 021f 	and.w	r2, r3, #31
 80017ac:	4907      	ldr	r1, [pc, #28]	; (80017cc <__NVIC_EnableIRQ+0x38>)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	095b      	lsrs	r3, r3, #5
 80017b4:	2001      	movs	r0, #1
 80017b6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000e100 	.word	0xe000e100

080017d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	6039      	str	r1, [r7, #0]
 80017da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	db0a      	blt.n	80017fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	490c      	ldr	r1, [pc, #48]	; (800181c <__NVIC_SetPriority+0x4c>)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	0112      	lsls	r2, r2, #4
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	440b      	add	r3, r1
 80017f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f8:	e00a      	b.n	8001810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	4908      	ldr	r1, [pc, #32]	; (8001820 <__NVIC_SetPriority+0x50>)
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	3b04      	subs	r3, #4
 8001808:	0112      	lsls	r2, r2, #4
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	440b      	add	r3, r1
 800180e:	761a      	strb	r2, [r3, #24]
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000e100 	.word	0xe000e100
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001824:	b480      	push	{r7}
 8001826:	b089      	sub	sp, #36	; 0x24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f1c3 0307 	rsb	r3, r3, #7
 800183e:	2b04      	cmp	r3, #4
 8001840:	bf28      	it	cs
 8001842:	2304      	movcs	r3, #4
 8001844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3304      	adds	r3, #4
 800184a:	2b06      	cmp	r3, #6
 800184c:	d902      	bls.n	8001854 <NVIC_EncodePriority+0x30>
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3b03      	subs	r3, #3
 8001852:	e000      	b.n	8001856 <NVIC_EncodePriority+0x32>
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001858:	f04f 32ff 	mov.w	r2, #4294967295
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43da      	mvns	r2, r3
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	401a      	ands	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800186c:	f04f 31ff 	mov.w	r1, #4294967295
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	fa01 f303 	lsl.w	r3, r1, r3
 8001876:	43d9      	mvns	r1, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800187c:	4313      	orrs	r3, r2
         );
}
 800187e:	4618      	mov	r0, r3
 8001880:	3724      	adds	r7, #36	; 0x24
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
	...

0800188c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3b01      	subs	r3, #1
 8001898:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800189c:	d301      	bcc.n	80018a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800189e:	2301      	movs	r3, #1
 80018a0:	e00f      	b.n	80018c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018a2:	4a0a      	ldr	r2, [pc, #40]	; (80018cc <SysTick_Config+0x40>)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018aa:	210f      	movs	r1, #15
 80018ac:	f04f 30ff 	mov.w	r0, #4294967295
 80018b0:	f7ff ff8e 	bl	80017d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <SysTick_Config+0x40>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ba:	4b04      	ldr	r3, [pc, #16]	; (80018cc <SysTick_Config+0x40>)
 80018bc:	2207      	movs	r2, #7
 80018be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	e000e010 	.word	0xe000e010

080018d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff ff29 	bl	8001730 <__NVIC_SetPriorityGrouping>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b086      	sub	sp, #24
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	4603      	mov	r3, r0
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
 80018f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018f8:	f7ff ff3e 	bl	8001778 <__NVIC_GetPriorityGrouping>
 80018fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	68b9      	ldr	r1, [r7, #8]
 8001902:	6978      	ldr	r0, [r7, #20]
 8001904:	f7ff ff8e 	bl	8001824 <NVIC_EncodePriority>
 8001908:	4602      	mov	r2, r0
 800190a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800190e:	4611      	mov	r1, r2
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ff5d 	bl	80017d0 <__NVIC_SetPriority>
}
 8001916:	bf00      	nop
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	4603      	mov	r3, r0
 8001926:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff31 	bl	8001794 <__NVIC_EnableIRQ>
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff ffa2 	bl	800188c <SysTick_Config>
 8001948:	4603      	mov	r3, r0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001960:	f7ff fab4 	bl	8000ecc <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d101      	bne.n	8001970 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e099      	b.n	8001aa4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2202      	movs	r2, #2
 8001974:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 0201 	bic.w	r2, r2, #1
 800198e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001990:	e00f      	b.n	80019b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001992:	f7ff fa9b 	bl	8000ecc <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b05      	cmp	r3, #5
 800199e:	d908      	bls.n	80019b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2220      	movs	r2, #32
 80019a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2203      	movs	r2, #3
 80019aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e078      	b.n	8001aa4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1e8      	bne.n	8001992 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019c8:	697a      	ldr	r2, [r7, #20]
 80019ca:	4b38      	ldr	r3, [pc, #224]	; (8001aac <HAL_DMA_Init+0x158>)
 80019cc:	4013      	ands	r3, r2
 80019ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a08:	2b04      	cmp	r3, #4
 8001a0a:	d107      	bne.n	8001a1c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a14:	4313      	orrs	r3, r2
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	697a      	ldr	r2, [r7, #20]
 8001a22:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	f023 0307 	bic.w	r3, r3, #7
 8001a32:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	d117      	bne.n	8001a76 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00e      	beq.n	8001a76 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 fa6f 	bl	8001f3c <DMA_CheckFifoParam>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d008      	beq.n	8001a76 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2240      	movs	r2, #64	; 0x40
 8001a68:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a72:	2301      	movs	r3, #1
 8001a74:	e016      	b.n	8001aa4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 fa26 	bl	8001ed0 <DMA_CalcBaseAndBitshift>
 8001a84:	4603      	mov	r3, r0
 8001a86:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8c:	223f      	movs	r2, #63	; 0x3f
 8001a8e:	409a      	lsls	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	f010803f 	.word	0xf010803f

08001ab0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
 8001abc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d101      	bne.n	8001ad6 <HAL_DMA_Start_IT+0x26>
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	e040      	b.n	8001b58 <HAL_DMA_Start_IT+0xa8>
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d12f      	bne.n	8001b4a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2202      	movs	r2, #2
 8001aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2200      	movs	r2, #0
 8001af6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	68b9      	ldr	r1, [r7, #8]
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f000 f9b8 	bl	8001e74 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b08:	223f      	movs	r2, #63	; 0x3f
 8001b0a:	409a      	lsls	r2, r3
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 0216 	orr.w	r2, r2, #22
 8001b1e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d007      	beq.n	8001b38 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0208 	orr.w	r2, r2, #8
 8001b36:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f042 0201 	orr.w	r2, r2, #1
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	e005      	b.n	8001b56 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b52:	2302      	movs	r3, #2
 8001b54:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b6c:	4b8e      	ldr	r3, [pc, #568]	; (8001da8 <HAL_DMA_IRQHandler+0x248>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a8e      	ldr	r2, [pc, #568]	; (8001dac <HAL_DMA_IRQHandler+0x24c>)
 8001b72:	fba2 2303 	umull	r2, r3, r2, r3
 8001b76:	0a9b      	lsrs	r3, r3, #10
 8001b78:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8a:	2208      	movs	r2, #8
 8001b8c:	409a      	lsls	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4013      	ands	r3, r2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d01a      	beq.n	8001bcc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d013      	beq.n	8001bcc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 0204 	bic.w	r2, r2, #4
 8001bb2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb8:	2208      	movs	r2, #8
 8001bba:	409a      	lsls	r2, r3
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc4:	f043 0201 	orr.w	r2, r3, #1
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	409a      	lsls	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d012      	beq.n	8001c02 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00b      	beq.n	8001c02 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bee:	2201      	movs	r2, #1
 8001bf0:	409a      	lsls	r2, r3
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bfa:	f043 0202 	orr.w	r2, r3, #2
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c06:	2204      	movs	r2, #4
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d012      	beq.n	8001c38 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d00b      	beq.n	8001c38 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c24:	2204      	movs	r2, #4
 8001c26:	409a      	lsls	r2, r3
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c30:	f043 0204 	orr.w	r2, r3, #4
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c3c:	2210      	movs	r2, #16
 8001c3e:	409a      	lsls	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4013      	ands	r3, r2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d043      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d03c      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5a:	2210      	movs	r2, #16
 8001c5c:	409a      	lsls	r2, r3
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d018      	beq.n	8001ca2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d108      	bne.n	8001c90 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d024      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	4798      	blx	r3
 8001c8e:	e01f      	b.n	8001cd0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d01b      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	4798      	blx	r3
 8001ca0:	e016      	b.n	8001cd0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d107      	bne.n	8001cc0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0208 	bic.w	r2, r2, #8
 8001cbe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd4:	2220      	movs	r2, #32
 8001cd6:	409a      	lsls	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 808f 	beq.w	8001e00 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0310 	and.w	r3, r3, #16
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f000 8087 	beq.w	8001e00 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf6:	2220      	movs	r2, #32
 8001cf8:	409a      	lsls	r2, r3
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b05      	cmp	r3, #5
 8001d08:	d136      	bne.n	8001d78 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0216 	bic.w	r2, r2, #22
 8001d18:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	695a      	ldr	r2, [r3, #20]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d28:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d103      	bne.n	8001d3a <HAL_DMA_IRQHandler+0x1da>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d007      	beq.n	8001d4a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0208 	bic.w	r2, r2, #8
 8001d48:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4e:	223f      	movs	r2, #63	; 0x3f
 8001d50:	409a      	lsls	r2, r3
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d07e      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	4798      	blx	r3
        }
        return;
 8001d76:	e079      	b.n	8001e6c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d01d      	beq.n	8001dc2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d10d      	bne.n	8001db0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d031      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	4798      	blx	r3
 8001da4:	e02c      	b.n	8001e00 <HAL_DMA_IRQHandler+0x2a0>
 8001da6:	bf00      	nop
 8001da8:	20000000 	.word	0x20000000
 8001dac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d023      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	4798      	blx	r3
 8001dc0:	e01e      	b.n	8001e00 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d10f      	bne.n	8001df0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0210 	bic.w	r2, r2, #16
 8001dde:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d032      	beq.n	8001e6e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d022      	beq.n	8001e5a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2205      	movs	r2, #5
 8001e18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0201 	bic.w	r2, r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d307      	bcc.n	8001e48 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f2      	bne.n	8001e2c <HAL_DMA_IRQHandler+0x2cc>
 8001e46:	e000      	b.n	8001e4a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e48:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d005      	beq.n	8001e6e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	4798      	blx	r3
 8001e6a:	e000      	b.n	8001e6e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e6c:	bf00      	nop
    }
  }
}
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
 8001e80:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e90:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	2b40      	cmp	r3, #64	; 0x40
 8001ea0:	d108      	bne.n	8001eb4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001eb2:	e007      	b.n	8001ec4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68ba      	ldr	r2, [r7, #8]
 8001eba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	60da      	str	r2, [r3, #12]
}
 8001ec4:	bf00      	nop
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	3b10      	subs	r3, #16
 8001ee0:	4a14      	ldr	r2, [pc, #80]	; (8001f34 <DMA_CalcBaseAndBitshift+0x64>)
 8001ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001eea:	4a13      	ldr	r2, [pc, #76]	; (8001f38 <DMA_CalcBaseAndBitshift+0x68>)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4413      	add	r3, r2
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d909      	bls.n	8001f12 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f06:	f023 0303 	bic.w	r3, r3, #3
 8001f0a:	1d1a      	adds	r2, r3, #4
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	659a      	str	r2, [r3, #88]	; 0x58
 8001f10:	e007      	b.n	8001f22 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f1a:	f023 0303 	bic.w	r3, r3, #3
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	aaaaaaab 	.word	0xaaaaaaab
 8001f38:	08009370 	.word	0x08009370

08001f3c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d11f      	bne.n	8001f96 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	2b03      	cmp	r3, #3
 8001f5a:	d856      	bhi.n	800200a <DMA_CheckFifoParam+0xce>
 8001f5c:	a201      	add	r2, pc, #4	; (adr r2, 8001f64 <DMA_CheckFifoParam+0x28>)
 8001f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f62:	bf00      	nop
 8001f64:	08001f75 	.word	0x08001f75
 8001f68:	08001f87 	.word	0x08001f87
 8001f6c:	08001f75 	.word	0x08001f75
 8001f70:	0800200b 	.word	0x0800200b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d046      	beq.n	800200e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f84:	e043      	b.n	800200e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f8e:	d140      	bne.n	8002012 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f94:	e03d      	b.n	8002012 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f9e:	d121      	bne.n	8001fe4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	2b03      	cmp	r3, #3
 8001fa4:	d837      	bhi.n	8002016 <DMA_CheckFifoParam+0xda>
 8001fa6:	a201      	add	r2, pc, #4	; (adr r2, 8001fac <DMA_CheckFifoParam+0x70>)
 8001fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fac:	08001fbd 	.word	0x08001fbd
 8001fb0:	08001fc3 	.word	0x08001fc3
 8001fb4:	08001fbd 	.word	0x08001fbd
 8001fb8:	08001fd5 	.word	0x08001fd5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8001fc0:	e030      	b.n	8002024 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d025      	beq.n	800201a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fd2:	e022      	b.n	800201a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001fdc:	d11f      	bne.n	800201e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001fe2:	e01c      	b.n	800201e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d903      	bls.n	8001ff2 <DMA_CheckFifoParam+0xb6>
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	2b03      	cmp	r3, #3
 8001fee:	d003      	beq.n	8001ff8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ff0:	e018      	b.n	8002024 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	73fb      	strb	r3, [r7, #15]
      break;
 8001ff6:	e015      	b.n	8002024 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00e      	beq.n	8002022 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	73fb      	strb	r3, [r7, #15]
      break;
 8002008:	e00b      	b.n	8002022 <DMA_CheckFifoParam+0xe6>
      break;
 800200a:	bf00      	nop
 800200c:	e00a      	b.n	8002024 <DMA_CheckFifoParam+0xe8>
      break;
 800200e:	bf00      	nop
 8002010:	e008      	b.n	8002024 <DMA_CheckFifoParam+0xe8>
      break;
 8002012:	bf00      	nop
 8002014:	e006      	b.n	8002024 <DMA_CheckFifoParam+0xe8>
      break;
 8002016:	bf00      	nop
 8002018:	e004      	b.n	8002024 <DMA_CheckFifoParam+0xe8>
      break;
 800201a:	bf00      	nop
 800201c:	e002      	b.n	8002024 <DMA_CheckFifoParam+0xe8>
      break;   
 800201e:	bf00      	nop
 8002020:	e000      	b.n	8002024 <DMA_CheckFifoParam+0xe8>
      break;
 8002022:	bf00      	nop
    }
  } 
  
  return status; 
 8002024:	7bfb      	ldrb	r3, [r7, #15]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop

08002034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002034:	b480      	push	{r7}
 8002036:	b089      	sub	sp, #36	; 0x24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002042:	2300      	movs	r3, #0
 8002044:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002046:	2300      	movs	r3, #0
 8002048:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800204a:	2300      	movs	r3, #0
 800204c:	61fb      	str	r3, [r7, #28]
 800204e:	e159      	b.n	8002304 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002050:	2201      	movs	r2, #1
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	4013      	ands	r3, r2
 8002062:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	429a      	cmp	r2, r3
 800206a:	f040 8148 	bne.w	80022fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	2b01      	cmp	r3, #1
 8002078:	d005      	beq.n	8002086 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002082:	2b02      	cmp	r3, #2
 8002084:	d130      	bne.n	80020e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	2203      	movs	r2, #3
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020bc:	2201      	movs	r2, #1
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	091b      	lsrs	r3, r3, #4
 80020d2:	f003 0201 	and.w	r2, r3, #1
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	2b03      	cmp	r3, #3
 80020f2:	d017      	beq.n	8002124 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	2203      	movs	r2, #3
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d123      	bne.n	8002178 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	08da      	lsrs	r2, r3, #3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3208      	adds	r2, #8
 8002138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800213c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	220f      	movs	r2, #15
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	691a      	ldr	r2, [r3, #16]
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4313      	orrs	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	08da      	lsrs	r2, r3, #3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3208      	adds	r2, #8
 8002172:	69b9      	ldr	r1, [r7, #24]
 8002174:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	2203      	movs	r2, #3
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 0203 	and.w	r2, r3, #3
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 80a2 	beq.w	80022fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	4b57      	ldr	r3, [pc, #348]	; (800231c <HAL_GPIO_Init+0x2e8>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	4a56      	ldr	r2, [pc, #344]	; (800231c <HAL_GPIO_Init+0x2e8>)
 80021c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021c8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ca:	4b54      	ldr	r3, [pc, #336]	; (800231c <HAL_GPIO_Init+0x2e8>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021d6:	4a52      	ldr	r2, [pc, #328]	; (8002320 <HAL_GPIO_Init+0x2ec>)
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	089b      	lsrs	r3, r3, #2
 80021dc:	3302      	adds	r3, #2
 80021de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	220f      	movs	r2, #15
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4013      	ands	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a49      	ldr	r2, [pc, #292]	; (8002324 <HAL_GPIO_Init+0x2f0>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d019      	beq.n	8002236 <HAL_GPIO_Init+0x202>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a48      	ldr	r2, [pc, #288]	; (8002328 <HAL_GPIO_Init+0x2f4>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d013      	beq.n	8002232 <HAL_GPIO_Init+0x1fe>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a47      	ldr	r2, [pc, #284]	; (800232c <HAL_GPIO_Init+0x2f8>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d00d      	beq.n	800222e <HAL_GPIO_Init+0x1fa>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a46      	ldr	r2, [pc, #280]	; (8002330 <HAL_GPIO_Init+0x2fc>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d007      	beq.n	800222a <HAL_GPIO_Init+0x1f6>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a45      	ldr	r2, [pc, #276]	; (8002334 <HAL_GPIO_Init+0x300>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d101      	bne.n	8002226 <HAL_GPIO_Init+0x1f2>
 8002222:	2304      	movs	r3, #4
 8002224:	e008      	b.n	8002238 <HAL_GPIO_Init+0x204>
 8002226:	2307      	movs	r3, #7
 8002228:	e006      	b.n	8002238 <HAL_GPIO_Init+0x204>
 800222a:	2303      	movs	r3, #3
 800222c:	e004      	b.n	8002238 <HAL_GPIO_Init+0x204>
 800222e:	2302      	movs	r3, #2
 8002230:	e002      	b.n	8002238 <HAL_GPIO_Init+0x204>
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <HAL_GPIO_Init+0x204>
 8002236:	2300      	movs	r3, #0
 8002238:	69fa      	ldr	r2, [r7, #28]
 800223a:	f002 0203 	and.w	r2, r2, #3
 800223e:	0092      	lsls	r2, r2, #2
 8002240:	4093      	lsls	r3, r2
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4313      	orrs	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002248:	4935      	ldr	r1, [pc, #212]	; (8002320 <HAL_GPIO_Init+0x2ec>)
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	089b      	lsrs	r3, r3, #2
 800224e:	3302      	adds	r3, #2
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002256:	4b38      	ldr	r3, [pc, #224]	; (8002338 <HAL_GPIO_Init+0x304>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	43db      	mvns	r3, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4013      	ands	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	4313      	orrs	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800227a:	4a2f      	ldr	r2, [pc, #188]	; (8002338 <HAL_GPIO_Init+0x304>)
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002280:	4b2d      	ldr	r3, [pc, #180]	; (8002338 <HAL_GPIO_Init+0x304>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022a4:	4a24      	ldr	r2, [pc, #144]	; (8002338 <HAL_GPIO_Init+0x304>)
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022aa:	4b23      	ldr	r3, [pc, #140]	; (8002338 <HAL_GPIO_Init+0x304>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	43db      	mvns	r3, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4013      	ands	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022ce:	4a1a      	ldr	r2, [pc, #104]	; (8002338 <HAL_GPIO_Init+0x304>)
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022d4:	4b18      	ldr	r3, [pc, #96]	; (8002338 <HAL_GPIO_Init+0x304>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022f8:	4a0f      	ldr	r2, [pc, #60]	; (8002338 <HAL_GPIO_Init+0x304>)
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3301      	adds	r3, #1
 8002302:	61fb      	str	r3, [r7, #28]
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	2b0f      	cmp	r3, #15
 8002308:	f67f aea2 	bls.w	8002050 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800230c:	bf00      	nop
 800230e:	bf00      	nop
 8002310:	3724      	adds	r7, #36	; 0x24
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40023800 	.word	0x40023800
 8002320:	40013800 	.word	0x40013800
 8002324:	40020000 	.word	0x40020000
 8002328:	40020400 	.word	0x40020400
 800232c:	40020800 	.word	0x40020800
 8002330:	40020c00 	.word	0x40020c00
 8002334:	40021000 	.word	0x40021000
 8002338:	40013c00 	.word	0x40013c00

0800233c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691a      	ldr	r2, [r3, #16]
 800234c:	887b      	ldrh	r3, [r7, #2]
 800234e:	4013      	ands	r3, r2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d002      	beq.n	800235a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002354:	2301      	movs	r3, #1
 8002356:	73fb      	strb	r3, [r7, #15]
 8002358:	e001      	b.n	800235e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800235a:	2300      	movs	r3, #0
 800235c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800235e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	807b      	strh	r3, [r7, #2]
 8002378:	4613      	mov	r3, r2
 800237a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800237c:	787b      	ldrb	r3, [r7, #1]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002382:	887a      	ldrh	r2, [r7, #2]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002388:	e003      	b.n	8002392 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800238a:	887b      	ldrh	r3, [r7, #2]
 800238c:	041a      	lsls	r2, r3, #16
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	619a      	str	r2, [r3, #24]
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
	...

080023a0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e128      	b.n	8002604 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d109      	bne.n	80023d2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a90      	ldr	r2, [pc, #576]	; (800260c <HAL_I2S_Init+0x26c>)
 80023ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7fe fb93 	bl	8000af8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2202      	movs	r2, #2
 80023d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6812      	ldr	r2, [r2, #0]
 80023e4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80023e8:	f023 030f 	bic.w	r3, r3, #15
 80023ec:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2202      	movs	r2, #2
 80023f4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d060      	beq.n	80024c0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d102      	bne.n	800240c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002406:	2310      	movs	r3, #16
 8002408:	617b      	str	r3, [r7, #20]
 800240a:	e001      	b.n	8002410 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800240c:	2320      	movs	r3, #32
 800240e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	2b20      	cmp	r3, #32
 8002416:	d802      	bhi.n	800241e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800241e:	2001      	movs	r0, #1
 8002420:	f002 fd24 	bl	8004e6c <HAL_RCCEx_GetPeriphCLKFreq>
 8002424:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800242e:	d125      	bne.n	800247c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d010      	beq.n	800245a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002442:	4613      	mov	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	461a      	mov	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	fbb2 f3f3 	udiv	r3, r2, r3
 8002454:	3305      	adds	r3, #5
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	e01f      	b.n	800249a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	fbb2 f2f3 	udiv	r2, r2, r3
 8002464:	4613      	mov	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	461a      	mov	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	fbb2 f3f3 	udiv	r3, r2, r3
 8002476:	3305      	adds	r3, #5
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	e00e      	b.n	800249a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	fbb2 f2f3 	udiv	r2, r2, r3
 8002484:	4613      	mov	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	461a      	mov	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	fbb2 f3f3 	udiv	r3, r2, r3
 8002496:	3305      	adds	r3, #5
 8002498:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4a5c      	ldr	r2, [pc, #368]	; (8002610 <HAL_I2S_Init+0x270>)
 800249e:	fba2 2303 	umull	r2, r3, r2, r3
 80024a2:	08db      	lsrs	r3, r3, #3
 80024a4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	085b      	lsrs	r3, r3, #1
 80024b6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	021b      	lsls	r3, r3, #8
 80024bc:	61bb      	str	r3, [r7, #24]
 80024be:	e003      	b.n	80024c8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80024c0:	2302      	movs	r3, #2
 80024c2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80024c4:	2300      	movs	r3, #0
 80024c6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d902      	bls.n	80024d4 <HAL_I2S_Init+0x134>
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	2bff      	cmp	r3, #255	; 0xff
 80024d2:	d907      	bls.n	80024e4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d8:	f043 0210 	orr.w	r2, r3, #16
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e08f      	b.n	8002604 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	691a      	ldr	r2, [r3, #16]
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	ea42 0103 	orr.w	r1, r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	69fa      	ldr	r2, [r7, #28]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002502:	f023 030f 	bic.w	r3, r3, #15
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6851      	ldr	r1, [r2, #4]
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6892      	ldr	r2, [r2, #8]
 800250e:	4311      	orrs	r1, r2
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	68d2      	ldr	r2, [r2, #12]
 8002514:	4311      	orrs	r1, r2
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6992      	ldr	r2, [r2, #24]
 800251a:	430a      	orrs	r2, r1
 800251c:	431a      	orrs	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002526:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d161      	bne.n	80025f4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a38      	ldr	r2, [pc, #224]	; (8002614 <HAL_I2S_Init+0x274>)
 8002534:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a37      	ldr	r2, [pc, #220]	; (8002618 <HAL_I2S_Init+0x278>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d101      	bne.n	8002544 <HAL_I2S_Init+0x1a4>
 8002540:	4b36      	ldr	r3, [pc, #216]	; (800261c <HAL_I2S_Init+0x27c>)
 8002542:	e001      	b.n	8002548 <HAL_I2S_Init+0x1a8>
 8002544:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6812      	ldr	r2, [r2, #0]
 800254e:	4932      	ldr	r1, [pc, #200]	; (8002618 <HAL_I2S_Init+0x278>)
 8002550:	428a      	cmp	r2, r1
 8002552:	d101      	bne.n	8002558 <HAL_I2S_Init+0x1b8>
 8002554:	4a31      	ldr	r2, [pc, #196]	; (800261c <HAL_I2S_Init+0x27c>)
 8002556:	e001      	b.n	800255c <HAL_I2S_Init+0x1bc>
 8002558:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800255c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002560:	f023 030f 	bic.w	r3, r3, #15
 8002564:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a2b      	ldr	r2, [pc, #172]	; (8002618 <HAL_I2S_Init+0x278>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d101      	bne.n	8002574 <HAL_I2S_Init+0x1d4>
 8002570:	4b2a      	ldr	r3, [pc, #168]	; (800261c <HAL_I2S_Init+0x27c>)
 8002572:	e001      	b.n	8002578 <HAL_I2S_Init+0x1d8>
 8002574:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002578:	2202      	movs	r2, #2
 800257a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a25      	ldr	r2, [pc, #148]	; (8002618 <HAL_I2S_Init+0x278>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d101      	bne.n	800258a <HAL_I2S_Init+0x1ea>
 8002586:	4b25      	ldr	r3, [pc, #148]	; (800261c <HAL_I2S_Init+0x27c>)
 8002588:	e001      	b.n	800258e <HAL_I2S_Init+0x1ee>
 800258a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800258e:	69db      	ldr	r3, [r3, #28]
 8002590:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800259a:	d003      	beq.n	80025a4 <HAL_I2S_Init+0x204>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d103      	bne.n	80025ac <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80025a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	e001      	b.n	80025b0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80025ac:	2300      	movs	r3, #0
 80025ae:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80025ba:	4313      	orrs	r3, r2
 80025bc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80025c4:	4313      	orrs	r3, r2
 80025c6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80025ce:	4313      	orrs	r3, r2
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	897b      	ldrh	r3, [r7, #10]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025dc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a0d      	ldr	r2, [pc, #52]	; (8002618 <HAL_I2S_Init+0x278>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d101      	bne.n	80025ec <HAL_I2S_Init+0x24c>
 80025e8:	4b0c      	ldr	r3, [pc, #48]	; (800261c <HAL_I2S_Init+0x27c>)
 80025ea:	e001      	b.n	80025f0 <HAL_I2S_Init+0x250>
 80025ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025f0:	897a      	ldrh	r2, [r7, #10]
 80025f2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3720      	adds	r7, #32
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	08002925 	.word	0x08002925
 8002610:	cccccccd 	.word	0xcccccccd
 8002614:	08002a39 	.word	0x08002a39
 8002618:	40003800 	.word	0x40003800
 800261c:	40003400 	.word	0x40003400

08002620 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	4613      	mov	r3, r2
 800262c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <HAL_I2S_Transmit_DMA+0x1a>
 8002634:	88fb      	ldrh	r3, [r7, #6]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e08e      	b.n	800275c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b01      	cmp	r3, #1
 8002648:	d101      	bne.n	800264e <HAL_I2S_Transmit_DMA+0x2e>
 800264a:	2302      	movs	r3, #2
 800264c:	e086      	b.n	800275c <HAL_I2S_Transmit_DMA+0x13c>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b01      	cmp	r3, #1
 8002660:	d005      	beq.n	800266e <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800266a:	2302      	movs	r3, #2
 800266c:	e076      	b.n	800275c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2203      	movs	r2, #3
 8002672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	2b03      	cmp	r3, #3
 8002692:	d002      	beq.n	800269a <HAL_I2S_Transmit_DMA+0x7a>
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	2b05      	cmp	r3, #5
 8002698:	d10a      	bne.n	80026b0 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 800269a:	88fb      	ldrh	r3, [r7, #6]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	b29a      	uxth	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80026a4:	88fb      	ldrh	r3, [r7, #6]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026ae:	e005      	b.n	80026bc <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	88fa      	ldrh	r2, [r7, #6]
 80026b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	88fa      	ldrh	r2, [r7, #6]
 80026ba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c0:	4a28      	ldr	r2, [pc, #160]	; (8002764 <HAL_I2S_Transmit_DMA+0x144>)
 80026c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c8:	4a27      	ldr	r2, [pc, #156]	; (8002768 <HAL_I2S_Transmit_DMA+0x148>)
 80026ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d0:	4a26      	ldr	r2, [pc, #152]	; (800276c <HAL_I2S_Transmit_DMA+0x14c>)
 80026d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80026dc:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80026e4:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80026ec:	f7ff f9e0 	bl	8001ab0 <HAL_DMA_Start_IT>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00f      	beq.n	8002716 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fa:	f043 0208 	orr.w	r2, r3, #8
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e022      	b.n	800275c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	69db      	ldr	r3, [r3, #28]
 800271c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002720:	2b00      	cmp	r3, #0
 8002722:	d107      	bne.n	8002734 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	69da      	ldr	r2, [r3, #28]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002732:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d107      	bne.n	8002752 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 0202 	orr.w	r2, r2, #2
 8002750:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3718      	adds	r7, #24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	08002803 	.word	0x08002803
 8002768:	080027c1 	.word	0x080027c1
 800276c:	0800281f 	.word	0x0800281f

08002770 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027cc:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10e      	bne.n	80027f4 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0202 	bic.w	r2, r2, #2
 80027e4:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f7ff ffc5 	bl	8002784 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80027fa:	bf00      	nop
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b084      	sub	sp, #16
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f7ff ffad 	bl	8002770 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b084      	sub	sp, #16
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0203 	bic.w	r2, r2, #3
 800283a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002854:	f043 0208 	orr.w	r2, r3, #8
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f7ff ffa5 	bl	80027ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002862:	bf00      	nop
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b082      	sub	sp, #8
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	881a      	ldrh	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002882:	1c9a      	adds	r2, r3, #2
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288c:	b29b      	uxth	r3, r3
 800288e:	3b01      	subs	r3, #1
 8002890:	b29a      	uxth	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289a:	b29b      	uxth	r3, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10e      	bne.n	80028be <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80028ae:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff ff63 	bl	8002784 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b082      	sub	sp, #8
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d8:	b292      	uxth	r2, r2
 80028da:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e0:	1c9a      	adds	r2, r3, #2
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	3b01      	subs	r3, #1
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10e      	bne.n	800291c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800290c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7ff ff3e 	bl	8002798 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800291c:	bf00      	nop
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b04      	cmp	r3, #4
 800293e:	d13a      	bne.n	80029b6 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b01      	cmp	r3, #1
 8002948:	d109      	bne.n	800295e <I2S_IRQHandler+0x3a>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002954:	2b40      	cmp	r3, #64	; 0x40
 8002956:	d102      	bne.n	800295e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7ff ffb4 	bl	80028c6 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002964:	2b40      	cmp	r3, #64	; 0x40
 8002966:	d126      	bne.n	80029b6 <I2S_IRQHandler+0x92>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f003 0320 	and.w	r3, r3, #32
 8002972:	2b20      	cmp	r3, #32
 8002974:	d11f      	bne.n	80029b6 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002984:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002986:	2300      	movs	r3, #0
 8002988:	613b      	str	r3, [r7, #16]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	613b      	str	r3, [r7, #16]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	613b      	str	r3, [r7, #16]
 800299a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a8:	f043 0202 	orr.w	r2, r3, #2
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7ff fefb 	bl	80027ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d136      	bne.n	8002a30 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d109      	bne.n	80029e0 <I2S_IRQHandler+0xbc>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d6:	2b80      	cmp	r3, #128	; 0x80
 80029d8:	d102      	bne.n	80029e0 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff ff45 	bl	800286a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	d122      	bne.n	8002a30 <I2S_IRQHandler+0x10c>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 0320 	and.w	r3, r3, #32
 80029f4:	2b20      	cmp	r3, #32
 80029f6:	d11b      	bne.n	8002a30 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a06:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a22:	f043 0204 	orr.w	r2, r3, #4
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff febe 	bl	80027ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002a30:	bf00      	nop
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a92      	ldr	r2, [pc, #584]	; (8002c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d101      	bne.n	8002a56 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002a52:	4b92      	ldr	r3, [pc, #584]	; (8002c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002a54:	e001      	b.n	8002a5a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002a56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a8b      	ldr	r2, [pc, #556]	; (8002c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d101      	bne.n	8002a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002a70:	4b8a      	ldr	r3, [pc, #552]	; (8002c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002a72:	e001      	b.n	8002a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002a74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a84:	d004      	beq.n	8002a90 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f040 8099 	bne.w	8002bc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d107      	bne.n	8002aaa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d002      	beq.n	8002aaa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 f925 	bl	8002cf4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d107      	bne.n	8002ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d002      	beq.n	8002ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f9c8 	bl	8002e54 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aca:	2b40      	cmp	r3, #64	; 0x40
 8002acc:	d13a      	bne.n	8002b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	f003 0320 	and.w	r3, r3, #32
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d035      	beq.n	8002b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a6e      	ldr	r2, [pc, #440]	; (8002c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d101      	bne.n	8002ae6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002ae2:	4b6e      	ldr	r3, [pc, #440]	; (8002c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ae4:	e001      	b.n	8002aea <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002ae6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4969      	ldr	r1, [pc, #420]	; (8002c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002af2:	428b      	cmp	r3, r1
 8002af4:	d101      	bne.n	8002afa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002af6:	4b69      	ldr	r3, [pc, #420]	; (8002c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002af8:	e001      	b.n	8002afe <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002afa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002afe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b02:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b12:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002b14:	2300      	movs	r3, #0
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b36:	f043 0202 	orr.w	r2, r3, #2
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7ff fe34 	bl	80027ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b08      	cmp	r3, #8
 8002b4c:	f040 80c3 	bne.w	8002cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f003 0320 	and.w	r3, r3, #32
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 80bd 	beq.w	8002cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b6a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a49      	ldr	r2, [pc, #292]	; (8002c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d101      	bne.n	8002b7a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002b76:	4b49      	ldr	r3, [pc, #292]	; (8002c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b78:	e001      	b.n	8002b7e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002b7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4944      	ldr	r1, [pc, #272]	; (8002c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b86:	428b      	cmp	r3, r1
 8002b88:	d101      	bne.n	8002b8e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002b8a:	4b44      	ldr	r3, [pc, #272]	; (8002c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b8c:	e001      	b.n	8002b92 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002b8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b92:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b96:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60bb      	str	r3, [r7, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	60bb      	str	r3, [r7, #8]
 8002ba4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb2:	f043 0204 	orr.w	r2, r3, #4
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7ff fdf6 	bl	80027ac <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002bc0:	e089      	b.n	8002cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d107      	bne.n	8002bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d002      	beq.n	8002bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f8be 	bl	8002d58 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d107      	bne.n	8002bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d002      	beq.n	8002bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 f8fd 	bl	8002df0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfc:	2b40      	cmp	r3, #64	; 0x40
 8002bfe:	d12f      	bne.n	8002c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f003 0320 	and.w	r3, r3, #32
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d02a      	beq.n	8002c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c18:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a1e      	ldr	r2, [pc, #120]	; (8002c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d101      	bne.n	8002c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002c24:	4b1d      	ldr	r3, [pc, #116]	; (8002c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c26:	e001      	b.n	8002c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002c28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4919      	ldr	r1, [pc, #100]	; (8002c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c34:	428b      	cmp	r3, r1
 8002c36:	d101      	bne.n	8002c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002c38:	4b18      	ldr	r3, [pc, #96]	; (8002c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c3a:	e001      	b.n	8002c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002c3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c44:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c52:	f043 0202 	orr.w	r2, r3, #2
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7ff fda6 	bl	80027ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d136      	bne.n	8002cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	f003 0320 	and.w	r3, r3, #32
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d031      	beq.n	8002cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a07      	ldr	r2, [pc, #28]	; (8002c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d101      	bne.n	8002c82 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002c7e:	4b07      	ldr	r3, [pc, #28]	; (8002c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c80:	e001      	b.n	8002c86 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002c82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4902      	ldr	r1, [pc, #8]	; (8002c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c8e:	428b      	cmp	r3, r1
 8002c90:	d106      	bne.n	8002ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002c92:	4b02      	ldr	r3, [pc, #8]	; (8002c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c94:	e006      	b.n	8002ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002c96:	bf00      	nop
 8002c98:	40003800 	.word	0x40003800
 8002c9c:	40003400 	.word	0x40003400
 8002ca0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ca4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ca8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002cb8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc6:	f043 0204 	orr.w	r2, r3, #4
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7ff fd6c 	bl	80027ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002cd4:	e000      	b.n	8002cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002cd6:	bf00      	nop
}
 8002cd8:	bf00      	nop
 8002cda:	3720      	adds	r7, #32
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	1c99      	adds	r1, r3, #2
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6251      	str	r1, [r2, #36]	; 0x24
 8002d06:	881a      	ldrh	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d113      	bne.n	8002d4e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d34:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d106      	bne.n	8002d4e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f7ff ffc9 	bl	8002ce0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
	...

08002d58 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	1c99      	adds	r1, r3, #2
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	6251      	str	r1, [r2, #36]	; 0x24
 8002d6a:	8819      	ldrh	r1, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a1d      	ldr	r2, [pc, #116]	; (8002de8 <I2SEx_TxISR_I2SExt+0x90>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d101      	bne.n	8002d7a <I2SEx_TxISR_I2SExt+0x22>
 8002d76:	4b1d      	ldr	r3, [pc, #116]	; (8002dec <I2SEx_TxISR_I2SExt+0x94>)
 8002d78:	e001      	b.n	8002d7e <I2SEx_TxISR_I2SExt+0x26>
 8002d7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d7e:	460a      	mov	r2, r1
 8002d80:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d121      	bne.n	8002dde <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a12      	ldr	r2, [pc, #72]	; (8002de8 <I2SEx_TxISR_I2SExt+0x90>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d101      	bne.n	8002da8 <I2SEx_TxISR_I2SExt+0x50>
 8002da4:	4b11      	ldr	r3, [pc, #68]	; (8002dec <I2SEx_TxISR_I2SExt+0x94>)
 8002da6:	e001      	b.n	8002dac <I2SEx_TxISR_I2SExt+0x54>
 8002da8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	490d      	ldr	r1, [pc, #52]	; (8002de8 <I2SEx_TxISR_I2SExt+0x90>)
 8002db4:	428b      	cmp	r3, r1
 8002db6:	d101      	bne.n	8002dbc <I2SEx_TxISR_I2SExt+0x64>
 8002db8:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <I2SEx_TxISR_I2SExt+0x94>)
 8002dba:	e001      	b.n	8002dc0 <I2SEx_TxISR_I2SExt+0x68>
 8002dbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dc0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002dc4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d106      	bne.n	8002dde <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f7ff ff81 	bl	8002ce0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002dde:	bf00      	nop
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40003800 	.word	0x40003800
 8002dec:	40003400 	.word	0x40003400

08002df0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68d8      	ldr	r0, [r3, #12]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e02:	1c99      	adds	r1, r3, #2
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002e08:	b282      	uxth	r2, r0
 8002e0a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	3b01      	subs	r3, #1
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d113      	bne.n	8002e4c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e32:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d106      	bne.n	8002e4c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7ff ff4a 	bl	8002ce0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e4c:	bf00      	nop
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a20      	ldr	r2, [pc, #128]	; (8002ee4 <I2SEx_RxISR_I2SExt+0x90>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d101      	bne.n	8002e6a <I2SEx_RxISR_I2SExt+0x16>
 8002e66:	4b20      	ldr	r3, [pc, #128]	; (8002ee8 <I2SEx_RxISR_I2SExt+0x94>)
 8002e68:	e001      	b.n	8002e6e <I2SEx_RxISR_I2SExt+0x1a>
 8002e6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e6e:	68d8      	ldr	r0, [r3, #12]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e74:	1c99      	adds	r1, r3, #2
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002e7a:	b282      	uxth	r2, r0
 8002e7c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	3b01      	subs	r3, #1
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d121      	bne.n	8002eda <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a12      	ldr	r2, [pc, #72]	; (8002ee4 <I2SEx_RxISR_I2SExt+0x90>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d101      	bne.n	8002ea4 <I2SEx_RxISR_I2SExt+0x50>
 8002ea0:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <I2SEx_RxISR_I2SExt+0x94>)
 8002ea2:	e001      	b.n	8002ea8 <I2SEx_RxISR_I2SExt+0x54>
 8002ea4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	490d      	ldr	r1, [pc, #52]	; (8002ee4 <I2SEx_RxISR_I2SExt+0x90>)
 8002eb0:	428b      	cmp	r3, r1
 8002eb2:	d101      	bne.n	8002eb8 <I2SEx_RxISR_I2SExt+0x64>
 8002eb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <I2SEx_RxISR_I2SExt+0x94>)
 8002eb6:	e001      	b.n	8002ebc <I2SEx_RxISR_I2SExt+0x68>
 8002eb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ebc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ec0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d106      	bne.n	8002eda <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7ff ff03 	bl	8002ce0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002eda:	bf00      	nop
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40003800 	.word	0x40003800
 8002ee8:	40003400 	.word	0x40003400

08002eec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af02      	add	r7, sp, #8
 8002ef2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e101      	b.n	8003102 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d106      	bne.n	8002f1e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f005 fec1 	bl	8008ca0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2203      	movs	r2, #3
 8002f22:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f2c:	d102      	bne.n	8002f34 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f002 fbd4 	bl	80056e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6818      	ldr	r0, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	7c1a      	ldrb	r2, [r3, #16]
 8002f46:	f88d 2000 	strb.w	r2, [sp]
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f4e:	f002 fab3 	bl	80054b8 <USB_CoreInit>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d005      	beq.n	8002f64 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0ce      	b.n	8003102 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2100      	movs	r1, #0
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f002 fbcc 	bl	8005708 <USB_SetCurrentMode>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d005      	beq.n	8002f82 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2202      	movs	r2, #2
 8002f7a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e0bf      	b.n	8003102 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f82:	2300      	movs	r3, #0
 8002f84:	73fb      	strb	r3, [r7, #15]
 8002f86:	e04a      	b.n	800301e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f88:	7bfa      	ldrb	r2, [r7, #15]
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	4413      	add	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	3315      	adds	r3, #21
 8002f98:	2201      	movs	r2, #1
 8002f9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f9c:	7bfa      	ldrb	r2, [r7, #15]
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	3314      	adds	r3, #20
 8002fac:	7bfa      	ldrb	r2, [r7, #15]
 8002fae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002fb0:	7bfa      	ldrb	r2, [r7, #15]
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	b298      	uxth	r0, r3
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	332e      	adds	r3, #46	; 0x2e
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002fc8:	7bfa      	ldrb	r2, [r7, #15]
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	3318      	adds	r3, #24
 8002fd8:	2200      	movs	r2, #0
 8002fda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002fdc:	7bfa      	ldrb	r2, [r7, #15]
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	331c      	adds	r3, #28
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ff0:	7bfa      	ldrb	r2, [r7, #15]
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	4413      	add	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	3320      	adds	r3, #32
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003004:	7bfa      	ldrb	r2, [r7, #15]
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	4613      	mov	r3, r2
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	4413      	add	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	3324      	adds	r3, #36	; 0x24
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003018:	7bfb      	ldrb	r3, [r7, #15]
 800301a:	3301      	adds	r3, #1
 800301c:	73fb      	strb	r3, [r7, #15]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	791b      	ldrb	r3, [r3, #4]
 8003022:	7bfa      	ldrb	r2, [r7, #15]
 8003024:	429a      	cmp	r2, r3
 8003026:	d3af      	bcc.n	8002f88 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003028:	2300      	movs	r3, #0
 800302a:	73fb      	strb	r3, [r7, #15]
 800302c:	e044      	b.n	80030b8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800302e:	7bfa      	ldrb	r2, [r7, #15]
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	4413      	add	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	440b      	add	r3, r1
 800303c:	f203 2355 	addw	r3, r3, #597	; 0x255
 8003040:	2200      	movs	r2, #0
 8003042:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003044:	7bfa      	ldrb	r2, [r7, #15]
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	4613      	mov	r3, r2
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	4413      	add	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8003056:	7bfa      	ldrb	r2, [r7, #15]
 8003058:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800305a:	7bfa      	ldrb	r2, [r7, #15]
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	4413      	add	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800306c:	2200      	movs	r2, #0
 800306e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003070:	7bfa      	ldrb	r2, [r7, #15]
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	4613      	mov	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4413      	add	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003086:	7bfa      	ldrb	r2, [r7, #15]
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	4613      	mov	r3, r2
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	4413      	add	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	440b      	add	r3, r1
 8003094:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800309c:	7bfa      	ldrb	r2, [r7, #15]
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	4413      	add	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
 80030b4:	3301      	adds	r3, #1
 80030b6:	73fb      	strb	r3, [r7, #15]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	791b      	ldrb	r3, [r3, #4]
 80030bc:	7bfa      	ldrb	r2, [r7, #15]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d3b5      	bcc.n	800302e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6818      	ldr	r0, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	7c1a      	ldrb	r2, [r3, #16]
 80030ca:	f88d 2000 	strb.w	r2, [sp]
 80030ce:	3304      	adds	r3, #4
 80030d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030d2:	f002 fb65 	bl	80057a0 <USB_DevInit>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d005      	beq.n	80030e8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e00c      	b.n	8003102 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f003 fba9 	bl	8006852 <USB_DevDisconnect>

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b084      	sub	sp, #16
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800311e:	2b01      	cmp	r3, #1
 8003120:	d101      	bne.n	8003126 <HAL_PCD_Start+0x1c>
 8003122:	2302      	movs	r3, #2
 8003124:	e022      	b.n	800316c <HAL_PCD_Start+0x62>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003136:	2b00      	cmp	r3, #0
 8003138:	d009      	beq.n	800314e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800313e:	2b01      	cmp	r3, #1
 8003140:	d105      	bne.n	800314e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003146:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f002 fab6 	bl	80056c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f003 fb57 	bl	8006810 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003174:	b590      	push	{r4, r7, lr}
 8003176:	b08d      	sub	sp, #52	; 0x34
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4618      	mov	r0, r3
 800318c:	f003 fc15 	bl	80069ba <USB_GetMode>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	f040 848c 	bne.w	8003ab0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4618      	mov	r0, r3
 800319e:	f003 fb79 	bl	8006894 <USB_ReadInterrupts>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 8482 	beq.w	8003aae <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	0a1b      	lsrs	r3, r3, #8
 80031b4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f003 fb66 	bl	8006894 <USB_ReadInterrupts>
 80031c8:	4603      	mov	r3, r0
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d107      	bne.n	80031e2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695a      	ldr	r2, [r3, #20]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f002 0202 	and.w	r2, r2, #2
 80031e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f003 fb54 	bl	8006894 <USB_ReadInterrupts>
 80031ec:	4603      	mov	r3, r0
 80031ee:	f003 0310 	and.w	r3, r3, #16
 80031f2:	2b10      	cmp	r3, #16
 80031f4:	d161      	bne.n	80032ba <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	699a      	ldr	r2, [r3, #24]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0210 	bic.w	r2, r2, #16
 8003204:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	f003 020f 	and.w	r2, r3, #15
 8003212:	4613      	mov	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	4413      	add	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	4413      	add	r3, r2
 8003222:	3304      	adds	r3, #4
 8003224:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	0c5b      	lsrs	r3, r3, #17
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	2b02      	cmp	r3, #2
 8003230:	d124      	bne.n	800327c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003238:	4013      	ands	r3, r2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d035      	beq.n	80032aa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	091b      	lsrs	r3, r3, #4
 8003246:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003248:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800324c:	b29b      	uxth	r3, r3
 800324e:	461a      	mov	r2, r3
 8003250:	6a38      	ldr	r0, [r7, #32]
 8003252:	f003 f98b 	bl	800656c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	091b      	lsrs	r3, r3, #4
 800325e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003262:	441a      	add	r2, r3
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	695a      	ldr	r2, [r3, #20]
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	091b      	lsrs	r3, r3, #4
 8003270:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003274:	441a      	add	r2, r3
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	615a      	str	r2, [r3, #20]
 800327a:	e016      	b.n	80032aa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	0c5b      	lsrs	r3, r3, #17
 8003280:	f003 030f 	and.w	r3, r3, #15
 8003284:	2b06      	cmp	r3, #6
 8003286:	d110      	bne.n	80032aa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800328e:	2208      	movs	r2, #8
 8003290:	4619      	mov	r1, r3
 8003292:	6a38      	ldr	r0, [r7, #32]
 8003294:	f003 f96a 	bl	800656c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	695a      	ldr	r2, [r3, #20]
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	091b      	lsrs	r3, r3, #4
 80032a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032a4:	441a      	add	r2, r3
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	699a      	ldr	r2, [r3, #24]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f042 0210 	orr.w	r2, r2, #16
 80032b8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f003 fae8 	bl	8006894 <USB_ReadInterrupts>
 80032c4:	4603      	mov	r3, r0
 80032c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80032ce:	f040 80a7 	bne.w	8003420 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80032d2:	2300      	movs	r3, #0
 80032d4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f003 faed 	bl	80068ba <USB_ReadDevAllOutEpInterrupt>
 80032e0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80032e2:	e099      	b.n	8003418 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80032e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 808e 	beq.w	800340c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f6:	b2d2      	uxtb	r2, r2
 80032f8:	4611      	mov	r1, r2
 80032fa:	4618      	mov	r0, r3
 80032fc:	f003 fb11 	bl	8006922 <USB_ReadDevOutEPInterrupt>
 8003300:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00c      	beq.n	8003326 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	015a      	lsls	r2, r3, #5
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	4413      	add	r3, r2
 8003314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003318:	461a      	mov	r2, r3
 800331a:	2301      	movs	r3, #1
 800331c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800331e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 fe89 	bl	8004038 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	f003 0308 	and.w	r3, r3, #8
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00c      	beq.n	800334a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	4413      	add	r3, r2
 8003338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800333c:	461a      	mov	r2, r3
 800333e:	2308      	movs	r3, #8
 8003340:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003342:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 ff5f 	bl	8004208 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	f003 0310 	and.w	r3, r3, #16
 8003350:	2b00      	cmp	r3, #0
 8003352:	d008      	beq.n	8003366 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	015a      	lsls	r2, r3, #5
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	4413      	add	r3, r2
 800335c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003360:	461a      	mov	r2, r3
 8003362:	2310      	movs	r3, #16
 8003364:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d030      	beq.n	80033d2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003370:	6a3b      	ldr	r3, [r7, #32]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003378:	2b80      	cmp	r3, #128	; 0x80
 800337a:	d109      	bne.n	8003390 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	69fa      	ldr	r2, [r7, #28]
 8003386:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800338a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800338e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003392:	4613      	mov	r3, r2
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	4413      	add	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	4413      	add	r3, r2
 80033a2:	3304      	adds	r3, #4
 80033a4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	78db      	ldrb	r3, [r3, #3]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d108      	bne.n	80033c0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	2200      	movs	r2, #0
 80033b2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	4619      	mov	r1, r3
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f005 fd6c 	bl	8008e98 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	015a      	lsls	r2, r3, #5
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033cc:	461a      	mov	r2, r3
 80033ce:	2302      	movs	r3, #2
 80033d0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	f003 0320 	and.w	r3, r3, #32
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	015a      	lsls	r2, r3, #5
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e8:	461a      	mov	r2, r3
 80033ea:	2320      	movs	r3, #32
 80033ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d009      	beq.n	800340c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003404:	461a      	mov	r2, r3
 8003406:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800340a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	3301      	adds	r3, #1
 8003410:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003414:	085b      	lsrs	r3, r3, #1
 8003416:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341a:	2b00      	cmp	r3, #0
 800341c:	f47f af62 	bne.w	80032e4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f003 fa35 	bl	8006894 <USB_ReadInterrupts>
 800342a:	4603      	mov	r3, r0
 800342c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003430:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003434:	f040 80db 	bne.w	80035ee <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f003 fa56 	bl	80068ee <USB_ReadDevAllInEpInterrupt>
 8003442:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003444:	2300      	movs	r3, #0
 8003446:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003448:	e0cd      	b.n	80035e6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800344a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 80c2 	beq.w	80035da <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	4611      	mov	r1, r2
 8003460:	4618      	mov	r0, r3
 8003462:	f003 fa7c 	bl	800695e <USB_ReadDevInEPInterrupt>
 8003466:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d057      	beq.n	8003522 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	f003 030f 	and.w	r3, r3, #15
 8003478:	2201      	movs	r2, #1
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	43db      	mvns	r3, r3
 800348c:	69f9      	ldr	r1, [r7, #28]
 800348e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003492:	4013      	ands	r3, r2
 8003494:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	015a      	lsls	r2, r3, #5
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	4413      	add	r3, r2
 800349e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034a2:	461a      	mov	r2, r3
 80034a4:	2301      	movs	r3, #1
 80034a6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	799b      	ldrb	r3, [r3, #6]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d132      	bne.n	8003516 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b4:	4613      	mov	r3, r2
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	4413      	add	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	3320      	adds	r3, #32
 80034c0:	6819      	ldr	r1, [r3, #0]
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c6:	4613      	mov	r3, r2
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	4413      	add	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4403      	add	r3, r0
 80034d0:	331c      	adds	r3, #28
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4419      	add	r1, r3
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034da:	4613      	mov	r3, r2
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	4413      	add	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4403      	add	r3, r0
 80034e4:	3320      	adds	r3, #32
 80034e6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d113      	bne.n	8003516 <HAL_PCD_IRQHandler+0x3a2>
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f2:	4613      	mov	r3, r2
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	4413      	add	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	440b      	add	r3, r1
 80034fc:	3324      	adds	r3, #36	; 0x24
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d108      	bne.n	8003516 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6818      	ldr	r0, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800350e:	461a      	mov	r2, r3
 8003510:	2101      	movs	r1, #1
 8003512:	f003 fa83 	bl	8006a1c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003518:	b2db      	uxtb	r3, r3
 800351a:	4619      	mov	r1, r3
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f005 fc40 	bl	8008da2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	f003 0308 	and.w	r3, r3, #8
 8003528:	2b00      	cmp	r3, #0
 800352a:	d008      	beq.n	800353e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	015a      	lsls	r2, r3, #5
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	4413      	add	r3, r2
 8003534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003538:	461a      	mov	r2, r3
 800353a:	2308      	movs	r3, #8
 800353c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f003 0310 	and.w	r3, r3, #16
 8003544:	2b00      	cmp	r3, #0
 8003546:	d008      	beq.n	800355a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	4413      	add	r3, r2
 8003550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003554:	461a      	mov	r2, r3
 8003556:	2310      	movs	r3, #16
 8003558:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003560:	2b00      	cmp	r3, #0
 8003562:	d008      	beq.n	8003576 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003566:	015a      	lsls	r2, r3, #5
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	4413      	add	r3, r2
 800356c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003570:	461a      	mov	r2, r3
 8003572:	2340      	movs	r3, #64	; 0x40
 8003574:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d023      	beq.n	80035c8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003580:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003582:	6a38      	ldr	r0, [r7, #32]
 8003584:	f002 fa70 	bl	8005a68 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800358a:	4613      	mov	r3, r2
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	4413      	add	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	3310      	adds	r3, #16
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	4413      	add	r3, r2
 8003598:	3304      	adds	r3, #4
 800359a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	78db      	ldrb	r3, [r3, #3]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d108      	bne.n	80035b6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	2200      	movs	r2, #0
 80035a8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	4619      	mov	r1, r3
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f005 fc83 	bl	8008ebc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	015a      	lsls	r2, r3, #5
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	4413      	add	r3, r2
 80035be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035c2:	461a      	mov	r2, r3
 80035c4:	2302      	movs	r3, #2
 80035c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80035d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 fca3 	bl	8003f20 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	3301      	adds	r3, #1
 80035de:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80035e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e2:	085b      	lsrs	r3, r3, #1
 80035e4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80035e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f47f af2e 	bne.w	800344a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f003 f94e 	bl	8006894 <USB_ReadInterrupts>
 80035f8:	4603      	mov	r3, r0
 80035fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003602:	d122      	bne.n	800364a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	69fa      	ldr	r2, [r7, #28]
 800360e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003612:	f023 0301 	bic.w	r3, r3, #1
 8003616:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 800361e:	2b01      	cmp	r3, #1
 8003620:	d108      	bne.n	8003634 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800362a:	2100      	movs	r1, #0
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 fe89 	bl	8004344 <HAL_PCDEx_LPM_Callback>
 8003632:	e002      	b.n	800363a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f005 fc21 	bl	8008e7c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	695a      	ldr	r2, [r3, #20]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003648:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f003 f920 	bl	8006894 <USB_ReadInterrupts>
 8003654:	4603      	mov	r3, r0
 8003656:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800365a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800365e:	d112      	bne.n	8003686 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b01      	cmp	r3, #1
 800366e:	d102      	bne.n	8003676 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f005 fbdd 	bl	8008e30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695a      	ldr	r2, [r3, #20]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003684:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f003 f902 	bl	8006894 <USB_ReadInterrupts>
 8003690:	4603      	mov	r3, r0
 8003692:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800369a:	f040 80b7 	bne.w	800380c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	69fa      	ldr	r2, [r7, #28]
 80036a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036ac:	f023 0301 	bic.w	r3, r3, #1
 80036b0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2110      	movs	r1, #16
 80036b8:	4618      	mov	r0, r3
 80036ba:	f002 f9d5 	bl	8005a68 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036be:	2300      	movs	r3, #0
 80036c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036c2:	e046      	b.n	8003752 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80036c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c6:	015a      	lsls	r2, r3, #5
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	4413      	add	r3, r2
 80036cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036d0:	461a      	mov	r2, r3
 80036d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036d6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80036d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036da:	015a      	lsls	r2, r3, #5
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	4413      	add	r3, r2
 80036e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036e8:	0151      	lsls	r1, r2, #5
 80036ea:	69fa      	ldr	r2, [r7, #28]
 80036ec:	440a      	add	r2, r1
 80036ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80036f6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80036f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003704:	461a      	mov	r2, r3
 8003706:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800370a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800370c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800370e:	015a      	lsls	r2, r3, #5
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	4413      	add	r3, r2
 8003714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800371c:	0151      	lsls	r1, r2, #5
 800371e:	69fa      	ldr	r2, [r7, #28]
 8003720:	440a      	add	r2, r1
 8003722:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003726:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800372a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800372c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800372e:	015a      	lsls	r2, r3, #5
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	4413      	add	r3, r2
 8003734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800373c:	0151      	lsls	r1, r2, #5
 800373e:	69fa      	ldr	r2, [r7, #28]
 8003740:	440a      	add	r2, r1
 8003742:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003746:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800374a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800374c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800374e:	3301      	adds	r3, #1
 8003750:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	791b      	ldrb	r3, [r3, #4]
 8003756:	461a      	mov	r2, r3
 8003758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375a:	4293      	cmp	r3, r2
 800375c:	d3b2      	bcc.n	80036c4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	69fa      	ldr	r2, [r7, #28]
 8003768:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800376c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003770:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	7bdb      	ldrb	r3, [r3, #15]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d016      	beq.n	80037a8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003780:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003784:	69fa      	ldr	r2, [r7, #28]
 8003786:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800378a:	f043 030b 	orr.w	r3, r3, #11
 800378e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379a:	69fa      	ldr	r2, [r7, #28]
 800379c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037a0:	f043 030b 	orr.w	r3, r3, #11
 80037a4:	6453      	str	r3, [r2, #68]	; 0x44
 80037a6:	e015      	b.n	80037d4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	69fa      	ldr	r2, [r7, #28]
 80037b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037ba:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80037be:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	69fa      	ldr	r2, [r7, #28]
 80037ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037ce:	f043 030b 	orr.w	r3, r3, #11
 80037d2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	69fa      	ldr	r2, [r7, #28]
 80037de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037e2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80037e6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6818      	ldr	r0, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037f6:	461a      	mov	r2, r3
 80037f8:	f003 f910 	bl	8006a1c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	695a      	ldr	r2, [r3, #20]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800380a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4618      	mov	r0, r3
 8003812:	f003 f83f 	bl	8006894 <USB_ReadInterrupts>
 8003816:	4603      	mov	r3, r0
 8003818:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800381c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003820:	d123      	bne.n	800386a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f003 f8d5 	bl	80069d6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4618      	mov	r0, r3
 8003832:	f002 f992 	bl	8005b5a <USB_GetDevSpeed>
 8003836:	4603      	mov	r3, r0
 8003838:	461a      	mov	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681c      	ldr	r4, [r3, #0]
 8003842:	f001 f9ef 	bl	8004c24 <HAL_RCC_GetHCLKFreq>
 8003846:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800384c:	461a      	mov	r2, r3
 800384e:	4620      	mov	r0, r4
 8003850:	f001 fe96 	bl	8005580 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f005 facc 	bl	8008df2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	695a      	ldr	r2, [r3, #20]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003868:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f003 f810 	bl	8006894 <USB_ReadInterrupts>
 8003874:	4603      	mov	r3, r0
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	2b08      	cmp	r3, #8
 800387c:	d10a      	bne.n	8003894 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f005 faa9 	bl	8008dd6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	695a      	ldr	r2, [r3, #20]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f002 0208 	and.w	r2, r2, #8
 8003892:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4618      	mov	r0, r3
 800389a:	f002 fffb 	bl	8006894 <USB_ReadInterrupts>
 800389e:	4603      	mov	r3, r0
 80038a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a4:	2b80      	cmp	r3, #128	; 0x80
 80038a6:	d123      	bne.n	80038f0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80038a8:	6a3b      	ldr	r3, [r7, #32]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038b4:	2301      	movs	r3, #1
 80038b6:	627b      	str	r3, [r7, #36]	; 0x24
 80038b8:	e014      	b.n	80038e4 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80038ba:	6879      	ldr	r1, [r7, #4]
 80038bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038be:	4613      	mov	r3, r2
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	4413      	add	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	440b      	add	r3, r1
 80038c8:	f203 2357 	addw	r3, r3, #599	; 0x257
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d105      	bne.n	80038de <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	4619      	mov	r1, r3
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 faf0 	bl	8003ebe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	3301      	adds	r3, #1
 80038e2:	627b      	str	r3, [r7, #36]	; 0x24
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	791b      	ldrb	r3, [r3, #4]
 80038e8:	461a      	mov	r2, r3
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d3e4      	bcc.n	80038ba <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f002 ffcd 	bl	8006894 <USB_ReadInterrupts>
 80038fa:	4603      	mov	r3, r0
 80038fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003900:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003904:	d13c      	bne.n	8003980 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003906:	2301      	movs	r3, #1
 8003908:	627b      	str	r3, [r7, #36]	; 0x24
 800390a:	e02b      	b.n	8003964 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390e:	015a      	lsls	r2, r3, #5
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	4413      	add	r3, r2
 8003914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003920:	4613      	mov	r3, r2
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	4413      	add	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	3318      	adds	r3, #24
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d115      	bne.n	800395e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003932:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003934:	2b00      	cmp	r3, #0
 8003936:	da12      	bge.n	800395e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800393c:	4613      	mov	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	4413      	add	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	3317      	adds	r3, #23
 8003948:	2201      	movs	r2, #1
 800394a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	b2db      	uxtb	r3, r3
 8003950:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003954:	b2db      	uxtb	r3, r3
 8003956:	4619      	mov	r1, r3
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 fab0 	bl	8003ebe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	3301      	adds	r3, #1
 8003962:	627b      	str	r3, [r7, #36]	; 0x24
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	791b      	ldrb	r3, [r3, #4]
 8003968:	461a      	mov	r2, r3
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	4293      	cmp	r3, r2
 800396e:	d3cd      	bcc.n	800390c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695a      	ldr	r2, [r3, #20]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800397e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4618      	mov	r0, r3
 8003986:	f002 ff85 	bl	8006894 <USB_ReadInterrupts>
 800398a:	4603      	mov	r3, r0
 800398c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003990:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003994:	d156      	bne.n	8003a44 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003996:	2301      	movs	r3, #1
 8003998:	627b      	str	r3, [r7, #36]	; 0x24
 800399a:	e045      	b.n	8003a28 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	015a      	lsls	r2, r3, #5
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b0:	4613      	mov	r3, r2
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	4413      	add	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d12e      	bne.n	8003a22 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80039c4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	da2b      	bge.n	8003a22 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80039d6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80039da:	429a      	cmp	r2, r3
 80039dc:	d121      	bne.n	8003a22 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80039de:	6879      	ldr	r1, [r7, #4]
 80039e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e2:	4613      	mov	r3, r2
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	4413      	add	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	440b      	add	r3, r1
 80039ec:	f203 2357 	addw	r3, r3, #599	; 0x257
 80039f0:	2201      	movs	r2, #1
 80039f2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80039fc:	6a3b      	ldr	r3, [r7, #32]
 80039fe:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003a00:	6a3b      	ldr	r3, [r7, #32]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10a      	bne.n	8003a22 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	69fa      	ldr	r2, [r7, #28]
 8003a16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a1e:	6053      	str	r3, [r2, #4]
            break;
 8003a20:	e008      	b.n	8003a34 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a24:	3301      	adds	r3, #1
 8003a26:	627b      	str	r3, [r7, #36]	; 0x24
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	791b      	ldrb	r3, [r3, #4]
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d3b3      	bcc.n	800399c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695a      	ldr	r2, [r3, #20]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003a42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f002 ff23 	bl	8006894 <USB_ReadInterrupts>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a58:	d10a      	bne.n	8003a70 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f005 fa40 	bl	8008ee0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695a      	ldr	r2, [r3, #20]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003a6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f002 ff0d 	bl	8006894 <USB_ReadInterrupts>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b04      	cmp	r3, #4
 8003a82:	d115      	bne.n	8003ab0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	f003 0304 	and.w	r3, r3, #4
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d002      	beq.n	8003a9c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f005 fa30 	bl	8008efc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6859      	ldr	r1, [r3, #4]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	605a      	str	r2, [r3, #4]
 8003aac:	e000      	b.n	8003ab0 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003aae:	bf00      	nop
    }
  }
}
 8003ab0:	3734      	adds	r7, #52	; 0x34
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd90      	pop	{r4, r7, pc}

08003ab6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b082      	sub	sp, #8
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
 8003abe:	460b      	mov	r3, r1
 8003ac0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d101      	bne.n	8003ad0 <HAL_PCD_SetAddress+0x1a>
 8003acc:	2302      	movs	r3, #2
 8003ace:	e012      	b.n	8003af6 <HAL_PCD_SetAddress+0x40>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	78fa      	ldrb	r2, [r7, #3]
 8003adc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	78fa      	ldrb	r2, [r7, #3]
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f002 fe6c 	bl	80067c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b084      	sub	sp, #16
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
 8003b06:	4608      	mov	r0, r1
 8003b08:	4611      	mov	r1, r2
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	70fb      	strb	r3, [r7, #3]
 8003b10:	460b      	mov	r3, r1
 8003b12:	803b      	strh	r3, [r7, #0]
 8003b14:	4613      	mov	r3, r2
 8003b16:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	da0f      	bge.n	8003b44 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b24:	78fb      	ldrb	r3, [r7, #3]
 8003b26:	f003 020f 	and.w	r2, r3, #15
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	4413      	add	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	3310      	adds	r3, #16
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	4413      	add	r3, r2
 8003b38:	3304      	adds	r3, #4
 8003b3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	705a      	strb	r2, [r3, #1]
 8003b42:	e00f      	b.n	8003b64 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b44:	78fb      	ldrb	r3, [r7, #3]
 8003b46:	f003 020f 	and.w	r2, r3, #15
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	4413      	add	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	4413      	add	r3, r2
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b64:	78fb      	ldrb	r3, [r7, #3]
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003b70:	883a      	ldrh	r2, [r7, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	78ba      	ldrb	r2, [r7, #2]
 8003b7a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	785b      	ldrb	r3, [r3, #1]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d004      	beq.n	8003b8e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b8e:	78bb      	ldrb	r3, [r7, #2]
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d102      	bne.n	8003b9a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d101      	bne.n	8003ba8 <HAL_PCD_EP_Open+0xaa>
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	e00e      	b.n	8003bc6 <HAL_PCD_EP_Open+0xc8>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68f9      	ldr	r1, [r7, #12]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f001 fff4 	bl	8005ba4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8003bc4:	7afb      	ldrb	r3, [r7, #11]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b084      	sub	sp, #16
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	da0f      	bge.n	8003c02 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003be2:	78fb      	ldrb	r3, [r7, #3]
 8003be4:	f003 020f 	and.w	r2, r3, #15
 8003be8:	4613      	mov	r3, r2
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	4413      	add	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	3310      	adds	r3, #16
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	3304      	adds	r3, #4
 8003bf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	705a      	strb	r2, [r3, #1]
 8003c00:	e00f      	b.n	8003c22 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c02:	78fb      	ldrb	r3, [r7, #3]
 8003c04:	f003 020f 	and.w	r2, r3, #15
 8003c08:	4613      	mov	r3, r2
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	4413      	add	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	4413      	add	r3, r2
 8003c18:	3304      	adds	r3, #4
 8003c1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c22:	78fb      	ldrb	r3, [r7, #3]
 8003c24:	f003 030f 	and.w	r3, r3, #15
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d101      	bne.n	8003c3c <HAL_PCD_EP_Close+0x6e>
 8003c38:	2302      	movs	r3, #2
 8003c3a:	e00e      	b.n	8003c5a <HAL_PCD_EP_Close+0x8c>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68f9      	ldr	r1, [r7, #12]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f002 f832 	bl	8005cb4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b086      	sub	sp, #24
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	60f8      	str	r0, [r7, #12]
 8003c6a:	607a      	str	r2, [r7, #4]
 8003c6c:	603b      	str	r3, [r7, #0]
 8003c6e:	460b      	mov	r3, r1
 8003c70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c72:	7afb      	ldrb	r3, [r7, #11]
 8003c74:	f003 020f 	and.w	r2, r3, #15
 8003c78:	4613      	mov	r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	4413      	add	r3, r2
 8003c88:	3304      	adds	r3, #4
 8003c8a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ca4:	7afb      	ldrb	r3, [r7, #11]
 8003ca6:	f003 030f 	and.w	r3, r3, #15
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	799b      	ldrb	r3, [r3, #6]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d102      	bne.n	8003cbe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6818      	ldr	r0, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	799b      	ldrb	r3, [r3, #6]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	6979      	ldr	r1, [r7, #20]
 8003cca:	f002 f8cf 	bl	8005e6c <USB_EPStartXfer>

  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3718      	adds	r7, #24
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	607a      	str	r2, [r7, #4]
 8003ce2:	603b      	str	r3, [r7, #0]
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ce8:	7afb      	ldrb	r3, [r7, #11]
 8003cea:	f003 020f 	and.w	r2, r3, #15
 8003cee:	4613      	mov	r3, r2
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	4413      	add	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	3310      	adds	r3, #16
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2201      	movs	r2, #1
 8003d16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d18:	7afb      	ldrb	r3, [r7, #11]
 8003d1a:	f003 030f 	and.w	r3, r3, #15
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	799b      	ldrb	r3, [r3, #6]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d102      	bne.n	8003d32 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6818      	ldr	r0, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	799b      	ldrb	r3, [r3, #6]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	6979      	ldr	r1, [r7, #20]
 8003d3e:	f002 f895 	bl	8005e6c <USB_EPStartXfer>

  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3718      	adds	r7, #24
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	460b      	mov	r3, r1
 8003d56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d58:	78fb      	ldrb	r3, [r7, #3]
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	7912      	ldrb	r2, [r2, #4]
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d901      	bls.n	8003d6a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e04f      	b.n	8003e0a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	da0f      	bge.n	8003d92 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d72:	78fb      	ldrb	r3, [r7, #3]
 8003d74:	f003 020f 	and.w	r2, r3, #15
 8003d78:	4613      	mov	r3, r2
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	4413      	add	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	3310      	adds	r3, #16
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	4413      	add	r3, r2
 8003d86:	3304      	adds	r3, #4
 8003d88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	705a      	strb	r2, [r3, #1]
 8003d90:	e00d      	b.n	8003dae <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d92:	78fa      	ldrb	r2, [r7, #3]
 8003d94:	4613      	mov	r3, r2
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	4413      	add	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	4413      	add	r3, r2
 8003da4:	3304      	adds	r3, #4
 8003da6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2201      	movs	r2, #1
 8003db2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003db4:	78fb      	ldrb	r3, [r7, #3]
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	b2da      	uxtb	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d101      	bne.n	8003dce <HAL_PCD_EP_SetStall+0x82>
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e01d      	b.n	8003e0a <HAL_PCD_EP_SetStall+0xbe>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68f9      	ldr	r1, [r7, #12]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f002 fc1d 	bl	800661c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003de2:	78fb      	ldrb	r3, [r7, #3]
 8003de4:	f003 030f 	and.w	r3, r3, #15
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d109      	bne.n	8003e00 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6818      	ldr	r0, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	7999      	ldrb	r1, [r3, #6]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	f002 fe0e 	bl	8006a1c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b084      	sub	sp, #16
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e1e:	78fb      	ldrb	r3, [r7, #3]
 8003e20:	f003 030f 	and.w	r3, r3, #15
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	7912      	ldrb	r2, [r2, #4]
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d901      	bls.n	8003e30 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e042      	b.n	8003eb6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	da0f      	bge.n	8003e58 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e38:	78fb      	ldrb	r3, [r7, #3]
 8003e3a:	f003 020f 	and.w	r2, r3, #15
 8003e3e:	4613      	mov	r3, r2
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	4413      	add	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	3310      	adds	r3, #16
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2201      	movs	r2, #1
 8003e54:	705a      	strb	r2, [r3, #1]
 8003e56:	e00f      	b.n	8003e78 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e58:	78fb      	ldrb	r3, [r7, #3]
 8003e5a:	f003 020f 	and.w	r2, r3, #15
 8003e5e:	4613      	mov	r3, r2
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	4413      	add	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	3304      	adds	r3, #4
 8003e70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e7e:	78fb      	ldrb	r3, [r7, #3]
 8003e80:	f003 030f 	and.w	r3, r3, #15
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d101      	bne.n	8003e98 <HAL_PCD_EP_ClrStall+0x86>
 8003e94:	2302      	movs	r3, #2
 8003e96:	e00e      	b.n	8003eb6 <HAL_PCD_EP_ClrStall+0xa4>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68f9      	ldr	r1, [r7, #12]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f002 fc26 	bl	80066f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b084      	sub	sp, #16
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003eca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	da0c      	bge.n	8003eec <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ed2:	78fb      	ldrb	r3, [r7, #3]
 8003ed4:	f003 020f 	and.w	r2, r3, #15
 8003ed8:	4613      	mov	r3, r2
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	4413      	add	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	3310      	adds	r3, #16
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	3304      	adds	r3, #4
 8003ee8:	60fb      	str	r3, [r7, #12]
 8003eea:	e00c      	b.n	8003f06 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003eec:	78fb      	ldrb	r3, [r7, #3]
 8003eee:	f003 020f 	and.w	r2, r3, #15
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	4413      	add	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	4413      	add	r3, r2
 8003f02:	3304      	adds	r3, #4
 8003f04:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68f9      	ldr	r1, [r7, #12]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f002 fa45 	bl	800639c <USB_EPStopXfer>
 8003f12:	4603      	mov	r3, r0
 8003f14:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003f16:	7afb      	ldrb	r3, [r7, #11]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b08a      	sub	sp, #40	; 0x28
 8003f24:	af02      	add	r7, sp, #8
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	4613      	mov	r3, r2
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	4413      	add	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	3310      	adds	r3, #16
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	4413      	add	r3, r2
 8003f44:	3304      	adds	r3, #4
 8003f46:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	695a      	ldr	r2, [r3, #20]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d901      	bls.n	8003f58 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e06b      	b.n	8004030 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	691a      	ldr	r2, [r3, #16]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	69fa      	ldr	r2, [r7, #28]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d902      	bls.n	8003f74 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	3303      	adds	r3, #3
 8003f78:	089b      	lsrs	r3, r3, #2
 8003f7a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f7c:	e02a      	b.n	8003fd4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	691a      	ldr	r2, [r3, #16]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	69fa      	ldr	r2, [r7, #28]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d902      	bls.n	8003f9a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	3303      	adds	r3, #3
 8003f9e:	089b      	lsrs	r3, r3, #2
 8003fa0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	68d9      	ldr	r1, [r3, #12]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	6978      	ldr	r0, [r7, #20]
 8003fb8:	f002 fa9a 	bl	80064f0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	68da      	ldr	r2, [r3, #12]
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	441a      	add	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	695a      	ldr	r2, [r3, #20]
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	441a      	add	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d809      	bhi.n	8003ffe <PCD_WriteEmptyTxFifo+0xde>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	695a      	ldr	r2, [r3, #20]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d203      	bcs.n	8003ffe <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1bf      	bne.n	8003f7e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	691a      	ldr	r2, [r3, #16]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	429a      	cmp	r2, r3
 8004008:	d811      	bhi.n	800402e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	f003 030f 	and.w	r3, r3, #15
 8004010:	2201      	movs	r2, #1
 8004012:	fa02 f303 	lsl.w	r3, r2, r3
 8004016:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800401e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	43db      	mvns	r3, r3
 8004024:	6939      	ldr	r1, [r7, #16]
 8004026:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800402a:	4013      	ands	r3, r2
 800402c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3720      	adds	r7, #32
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b088      	sub	sp, #32
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	333c      	adds	r3, #60	; 0x3c
 8004050:	3304      	adds	r3, #4
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	015a      	lsls	r2, r3, #5
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	4413      	add	r3, r2
 800405e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	799b      	ldrb	r3, [r3, #6]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d17b      	bne.n	8004166 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	f003 0308 	and.w	r3, r3, #8
 8004074:	2b00      	cmp	r3, #0
 8004076:	d015      	beq.n	80040a4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	4a61      	ldr	r2, [pc, #388]	; (8004200 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800407c:	4293      	cmp	r3, r2
 800407e:	f240 80b9 	bls.w	80041f4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 80b3 	beq.w	80041f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	015a      	lsls	r2, r3, #5
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	4413      	add	r3, r2
 8004096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409a:	461a      	mov	r2, r3
 800409c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040a0:	6093      	str	r3, [r2, #8]
 80040a2:	e0a7      	b.n	80041f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	f003 0320 	and.w	r3, r3, #32
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d009      	beq.n	80040c2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	015a      	lsls	r2, r3, #5
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	4413      	add	r3, r2
 80040b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ba:	461a      	mov	r2, r3
 80040bc:	2320      	movs	r3, #32
 80040be:	6093      	str	r3, [r2, #8]
 80040c0:	e098      	b.n	80041f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f040 8093 	bne.w	80041f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	4a4b      	ldr	r2, [pc, #300]	; (8004200 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d90f      	bls.n	80040f6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00a      	beq.n	80040f6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ec:	461a      	mov	r2, r3
 80040ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040f2:	6093      	str	r3, [r2, #8]
 80040f4:	e07e      	b.n	80041f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	4613      	mov	r3, r2
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	4413      	add	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	4413      	add	r3, r2
 8004108:	3304      	adds	r3, #4
 800410a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6a1a      	ldr	r2, [r3, #32]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	0159      	lsls	r1, r3, #5
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	440b      	add	r3, r1
 8004118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004122:	1ad2      	subs	r2, r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d114      	bne.n	8004158 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d109      	bne.n	800414a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6818      	ldr	r0, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004140:	461a      	mov	r2, r3
 8004142:	2101      	movs	r1, #1
 8004144:	f002 fc6a 	bl	8006a1c <USB_EP0_OutStart>
 8004148:	e006      	b.n	8004158 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	68da      	ldr	r2, [r3, #12]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	441a      	add	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	b2db      	uxtb	r3, r3
 800415c:	4619      	mov	r1, r3
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f004 fe04 	bl	8008d6c <HAL_PCD_DataOutStageCallback>
 8004164:	e046      	b.n	80041f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	4a26      	ldr	r2, [pc, #152]	; (8004204 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d124      	bne.n	80041b8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00a      	beq.n	800418e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	015a      	lsls	r2, r3, #5
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	4413      	add	r3, r2
 8004180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004184:	461a      	mov	r2, r3
 8004186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800418a:	6093      	str	r3, [r2, #8]
 800418c:	e032      	b.n	80041f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f003 0320 	and.w	r3, r3, #32
 8004194:	2b00      	cmp	r3, #0
 8004196:	d008      	beq.n	80041aa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	015a      	lsls	r2, r3, #5
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	4413      	add	r3, r2
 80041a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a4:	461a      	mov	r2, r3
 80041a6:	2320      	movs	r3, #32
 80041a8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	4619      	mov	r1, r3
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f004 fddb 	bl	8008d6c <HAL_PCD_DataOutStageCallback>
 80041b6:	e01d      	b.n	80041f4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d114      	bne.n	80041e8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	4613      	mov	r3, r2
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	4413      	add	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	440b      	add	r3, r1
 80041cc:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d108      	bne.n	80041e8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6818      	ldr	r0, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80041e0:	461a      	mov	r2, r3
 80041e2:	2100      	movs	r1, #0
 80041e4:	f002 fc1a 	bl	8006a1c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	4619      	mov	r1, r3
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f004 fdbc 	bl	8008d6c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3720      	adds	r7, #32
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	4f54300a 	.word	0x4f54300a
 8004204:	4f54310a 	.word	0x4f54310a

08004208 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	333c      	adds	r3, #60	; 0x3c
 8004220:	3304      	adds	r3, #4
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	4413      	add	r3, r2
 800422e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	4a15      	ldr	r2, [pc, #84]	; (8004290 <PCD_EP_OutSetupPacket_int+0x88>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d90e      	bls.n	800425c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004244:	2b00      	cmp	r3, #0
 8004246:	d009      	beq.n	800425c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	015a      	lsls	r2, r3, #5
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	4413      	add	r3, r2
 8004250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004254:	461a      	mov	r2, r3
 8004256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800425a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f004 fd73 	bl	8008d48 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4a0a      	ldr	r2, [pc, #40]	; (8004290 <PCD_EP_OutSetupPacket_int+0x88>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d90c      	bls.n	8004284 <PCD_EP_OutSetupPacket_int+0x7c>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	799b      	ldrb	r3, [r3, #6]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d108      	bne.n	8004284 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6818      	ldr	r0, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800427c:	461a      	mov	r2, r3
 800427e:	2101      	movs	r1, #1
 8004280:	f002 fbcc 	bl	8006a1c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3718      	adds	r7, #24
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	4f54300a 	.word	0x4f54300a

08004294 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	460b      	mov	r3, r1
 800429e:	70fb      	strb	r3, [r7, #3]
 80042a0:	4613      	mov	r3, r2
 80042a2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042aa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80042ac:	78fb      	ldrb	r3, [r7, #3]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d107      	bne.n	80042c2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80042b2:	883b      	ldrh	r3, [r7, #0]
 80042b4:	0419      	lsls	r1, r3, #16
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	430a      	orrs	r2, r1
 80042be:	629a      	str	r2, [r3, #40]	; 0x28
 80042c0:	e028      	b.n	8004314 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c8:	0c1b      	lsrs	r3, r3, #16
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	4413      	add	r3, r2
 80042ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042d0:	2300      	movs	r3, #0
 80042d2:	73fb      	strb	r3, [r7, #15]
 80042d4:	e00d      	b.n	80042f2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	7bfb      	ldrb	r3, [r7, #15]
 80042dc:	3340      	adds	r3, #64	; 0x40
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	0c1b      	lsrs	r3, r3, #16
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	4413      	add	r3, r2
 80042ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
 80042ee:	3301      	adds	r3, #1
 80042f0:	73fb      	strb	r3, [r7, #15]
 80042f2:	7bfa      	ldrb	r2, [r7, #15]
 80042f4:	78fb      	ldrb	r3, [r7, #3]
 80042f6:	3b01      	subs	r3, #1
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d3ec      	bcc.n	80042d6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80042fc:	883b      	ldrh	r3, [r7, #0]
 80042fe:	0418      	lsls	r0, r3, #16
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6819      	ldr	r1, [r3, #0]
 8004304:	78fb      	ldrb	r3, [r7, #3]
 8004306:	3b01      	subs	r3, #1
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	4302      	orrs	r2, r0
 800430c:	3340      	adds	r3, #64	; 0x40
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	440b      	add	r3, r1
 8004312:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004322:	b480      	push	{r7}
 8004324:	b083      	sub	sp, #12
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
 800432a:	460b      	mov	r3, r1
 800432c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	887a      	ldrh	r2, [r7, #2]
 8004334:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	460b      	mov	r3, r1
 800434e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e267      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b00      	cmp	r3, #0
 8004378:	d075      	beq.n	8004466 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800437a:	4b88      	ldr	r3, [pc, #544]	; (800459c <HAL_RCC_OscConfig+0x240>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 030c 	and.w	r3, r3, #12
 8004382:	2b04      	cmp	r3, #4
 8004384:	d00c      	beq.n	80043a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004386:	4b85      	ldr	r3, [pc, #532]	; (800459c <HAL_RCC_OscConfig+0x240>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800438e:	2b08      	cmp	r3, #8
 8004390:	d112      	bne.n	80043b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004392:	4b82      	ldr	r3, [pc, #520]	; (800459c <HAL_RCC_OscConfig+0x240>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800439a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800439e:	d10b      	bne.n	80043b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a0:	4b7e      	ldr	r3, [pc, #504]	; (800459c <HAL_RCC_OscConfig+0x240>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d05b      	beq.n	8004464 <HAL_RCC_OscConfig+0x108>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d157      	bne.n	8004464 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e242      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c0:	d106      	bne.n	80043d0 <HAL_RCC_OscConfig+0x74>
 80043c2:	4b76      	ldr	r3, [pc, #472]	; (800459c <HAL_RCC_OscConfig+0x240>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a75      	ldr	r2, [pc, #468]	; (800459c <HAL_RCC_OscConfig+0x240>)
 80043c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043cc:	6013      	str	r3, [r2, #0]
 80043ce:	e01d      	b.n	800440c <HAL_RCC_OscConfig+0xb0>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043d8:	d10c      	bne.n	80043f4 <HAL_RCC_OscConfig+0x98>
 80043da:	4b70      	ldr	r3, [pc, #448]	; (800459c <HAL_RCC_OscConfig+0x240>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a6f      	ldr	r2, [pc, #444]	; (800459c <HAL_RCC_OscConfig+0x240>)
 80043e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043e4:	6013      	str	r3, [r2, #0]
 80043e6:	4b6d      	ldr	r3, [pc, #436]	; (800459c <HAL_RCC_OscConfig+0x240>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a6c      	ldr	r2, [pc, #432]	; (800459c <HAL_RCC_OscConfig+0x240>)
 80043ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	e00b      	b.n	800440c <HAL_RCC_OscConfig+0xb0>
 80043f4:	4b69      	ldr	r3, [pc, #420]	; (800459c <HAL_RCC_OscConfig+0x240>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a68      	ldr	r2, [pc, #416]	; (800459c <HAL_RCC_OscConfig+0x240>)
 80043fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043fe:	6013      	str	r3, [r2, #0]
 8004400:	4b66      	ldr	r3, [pc, #408]	; (800459c <HAL_RCC_OscConfig+0x240>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a65      	ldr	r2, [pc, #404]	; (800459c <HAL_RCC_OscConfig+0x240>)
 8004406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800440a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d013      	beq.n	800443c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004414:	f7fc fd5a 	bl	8000ecc <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800441c:	f7fc fd56 	bl	8000ecc <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b64      	cmp	r3, #100	; 0x64
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e207      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800442e:	4b5b      	ldr	r3, [pc, #364]	; (800459c <HAL_RCC_OscConfig+0x240>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d0f0      	beq.n	800441c <HAL_RCC_OscConfig+0xc0>
 800443a:	e014      	b.n	8004466 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443c:	f7fc fd46 	bl	8000ecc <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004444:	f7fc fd42 	bl	8000ecc <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b64      	cmp	r3, #100	; 0x64
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e1f3      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004456:	4b51      	ldr	r3, [pc, #324]	; (800459c <HAL_RCC_OscConfig+0x240>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1f0      	bne.n	8004444 <HAL_RCC_OscConfig+0xe8>
 8004462:	e000      	b.n	8004466 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d063      	beq.n	800453a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004472:	4b4a      	ldr	r3, [pc, #296]	; (800459c <HAL_RCC_OscConfig+0x240>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 030c 	and.w	r3, r3, #12
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00b      	beq.n	8004496 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800447e:	4b47      	ldr	r3, [pc, #284]	; (800459c <HAL_RCC_OscConfig+0x240>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004486:	2b08      	cmp	r3, #8
 8004488:	d11c      	bne.n	80044c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800448a:	4b44      	ldr	r3, [pc, #272]	; (800459c <HAL_RCC_OscConfig+0x240>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d116      	bne.n	80044c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004496:	4b41      	ldr	r3, [pc, #260]	; (800459c <HAL_RCC_OscConfig+0x240>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d005      	beq.n	80044ae <HAL_RCC_OscConfig+0x152>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d001      	beq.n	80044ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e1c7      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ae:	4b3b      	ldr	r3, [pc, #236]	; (800459c <HAL_RCC_OscConfig+0x240>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	4937      	ldr	r1, [pc, #220]	; (800459c <HAL_RCC_OscConfig+0x240>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044c2:	e03a      	b.n	800453a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d020      	beq.n	800450e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044cc:	4b34      	ldr	r3, [pc, #208]	; (80045a0 <HAL_RCC_OscConfig+0x244>)
 80044ce:	2201      	movs	r2, #1
 80044d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d2:	f7fc fcfb 	bl	8000ecc <HAL_GetTick>
 80044d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044d8:	e008      	b.n	80044ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044da:	f7fc fcf7 	bl	8000ecc <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e1a8      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ec:	4b2b      	ldr	r3, [pc, #172]	; (800459c <HAL_RCC_OscConfig+0x240>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0f0      	beq.n	80044da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f8:	4b28      	ldr	r3, [pc, #160]	; (800459c <HAL_RCC_OscConfig+0x240>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	4925      	ldr	r1, [pc, #148]	; (800459c <HAL_RCC_OscConfig+0x240>)
 8004508:	4313      	orrs	r3, r2
 800450a:	600b      	str	r3, [r1, #0]
 800450c:	e015      	b.n	800453a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800450e:	4b24      	ldr	r3, [pc, #144]	; (80045a0 <HAL_RCC_OscConfig+0x244>)
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004514:	f7fc fcda 	bl	8000ecc <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800451c:	f7fc fcd6 	bl	8000ecc <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e187      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800452e:	4b1b      	ldr	r3, [pc, #108]	; (800459c <HAL_RCC_OscConfig+0x240>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1f0      	bne.n	800451c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0308 	and.w	r3, r3, #8
 8004542:	2b00      	cmp	r3, #0
 8004544:	d036      	beq.n	80045b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d016      	beq.n	800457c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800454e:	4b15      	ldr	r3, [pc, #84]	; (80045a4 <HAL_RCC_OscConfig+0x248>)
 8004550:	2201      	movs	r2, #1
 8004552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004554:	f7fc fcba 	bl	8000ecc <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800455c:	f7fc fcb6 	bl	8000ecc <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e167      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800456e:	4b0b      	ldr	r3, [pc, #44]	; (800459c <HAL_RCC_OscConfig+0x240>)
 8004570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0f0      	beq.n	800455c <HAL_RCC_OscConfig+0x200>
 800457a:	e01b      	b.n	80045b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800457c:	4b09      	ldr	r3, [pc, #36]	; (80045a4 <HAL_RCC_OscConfig+0x248>)
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004582:	f7fc fca3 	bl	8000ecc <HAL_GetTick>
 8004586:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004588:	e00e      	b.n	80045a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800458a:	f7fc fc9f 	bl	8000ecc <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d907      	bls.n	80045a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e150      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
 800459c:	40023800 	.word	0x40023800
 80045a0:	42470000 	.word	0x42470000
 80045a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045a8:	4b88      	ldr	r3, [pc, #544]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 80045aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1ea      	bne.n	800458a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 8097 	beq.w	80046f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045c2:	2300      	movs	r3, #0
 80045c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045c6:	4b81      	ldr	r3, [pc, #516]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10f      	bne.n	80045f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045d2:	2300      	movs	r3, #0
 80045d4:	60bb      	str	r3, [r7, #8]
 80045d6:	4b7d      	ldr	r3, [pc, #500]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	4a7c      	ldr	r2, [pc, #496]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 80045dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045e0:	6413      	str	r3, [r2, #64]	; 0x40
 80045e2:	4b7a      	ldr	r3, [pc, #488]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ea:	60bb      	str	r3, [r7, #8]
 80045ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ee:	2301      	movs	r3, #1
 80045f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f2:	4b77      	ldr	r3, [pc, #476]	; (80047d0 <HAL_RCC_OscConfig+0x474>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d118      	bne.n	8004630 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045fe:	4b74      	ldr	r3, [pc, #464]	; (80047d0 <HAL_RCC_OscConfig+0x474>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a73      	ldr	r2, [pc, #460]	; (80047d0 <HAL_RCC_OscConfig+0x474>)
 8004604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004608:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800460a:	f7fc fc5f 	bl	8000ecc <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004610:	e008      	b.n	8004624 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004612:	f7fc fc5b 	bl	8000ecc <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d901      	bls.n	8004624 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e10c      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004624:	4b6a      	ldr	r3, [pc, #424]	; (80047d0 <HAL_RCC_OscConfig+0x474>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462c:	2b00      	cmp	r3, #0
 800462e:	d0f0      	beq.n	8004612 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d106      	bne.n	8004646 <HAL_RCC_OscConfig+0x2ea>
 8004638:	4b64      	ldr	r3, [pc, #400]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 800463a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463c:	4a63      	ldr	r2, [pc, #396]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 800463e:	f043 0301 	orr.w	r3, r3, #1
 8004642:	6713      	str	r3, [r2, #112]	; 0x70
 8004644:	e01c      	b.n	8004680 <HAL_RCC_OscConfig+0x324>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	2b05      	cmp	r3, #5
 800464c:	d10c      	bne.n	8004668 <HAL_RCC_OscConfig+0x30c>
 800464e:	4b5f      	ldr	r3, [pc, #380]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 8004650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004652:	4a5e      	ldr	r2, [pc, #376]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 8004654:	f043 0304 	orr.w	r3, r3, #4
 8004658:	6713      	str	r3, [r2, #112]	; 0x70
 800465a:	4b5c      	ldr	r3, [pc, #368]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 800465c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465e:	4a5b      	ldr	r2, [pc, #364]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 8004660:	f043 0301 	orr.w	r3, r3, #1
 8004664:	6713      	str	r3, [r2, #112]	; 0x70
 8004666:	e00b      	b.n	8004680 <HAL_RCC_OscConfig+0x324>
 8004668:	4b58      	ldr	r3, [pc, #352]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 800466a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466c:	4a57      	ldr	r2, [pc, #348]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 800466e:	f023 0301 	bic.w	r3, r3, #1
 8004672:	6713      	str	r3, [r2, #112]	; 0x70
 8004674:	4b55      	ldr	r3, [pc, #340]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 8004676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004678:	4a54      	ldr	r2, [pc, #336]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 800467a:	f023 0304 	bic.w	r3, r3, #4
 800467e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d015      	beq.n	80046b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004688:	f7fc fc20 	bl	8000ecc <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800468e:	e00a      	b.n	80046a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004690:	f7fc fc1c 	bl	8000ecc <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	f241 3288 	movw	r2, #5000	; 0x1388
 800469e:	4293      	cmp	r3, r2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e0cb      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a6:	4b49      	ldr	r3, [pc, #292]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 80046a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d0ee      	beq.n	8004690 <HAL_RCC_OscConfig+0x334>
 80046b2:	e014      	b.n	80046de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046b4:	f7fc fc0a 	bl	8000ecc <HAL_GetTick>
 80046b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ba:	e00a      	b.n	80046d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046bc:	f7fc fc06 	bl	8000ecc <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e0b5      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046d2:	4b3e      	ldr	r3, [pc, #248]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 80046d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1ee      	bne.n	80046bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046de:	7dfb      	ldrb	r3, [r7, #23]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d105      	bne.n	80046f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046e4:	4b39      	ldr	r3, [pc, #228]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 80046e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e8:	4a38      	ldr	r2, [pc, #224]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 80046ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 80a1 	beq.w	800483c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046fa:	4b34      	ldr	r3, [pc, #208]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f003 030c 	and.w	r3, r3, #12
 8004702:	2b08      	cmp	r3, #8
 8004704:	d05c      	beq.n	80047c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	2b02      	cmp	r3, #2
 800470c:	d141      	bne.n	8004792 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800470e:	4b31      	ldr	r3, [pc, #196]	; (80047d4 <HAL_RCC_OscConfig+0x478>)
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004714:	f7fc fbda 	bl	8000ecc <HAL_GetTick>
 8004718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800471a:	e008      	b.n	800472e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800471c:	f7fc fbd6 	bl	8000ecc <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b02      	cmp	r3, #2
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e087      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800472e:	4b27      	ldr	r3, [pc, #156]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1f0      	bne.n	800471c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	69da      	ldr	r2, [r3, #28]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	431a      	orrs	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004748:	019b      	lsls	r3, r3, #6
 800474a:	431a      	orrs	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004750:	085b      	lsrs	r3, r3, #1
 8004752:	3b01      	subs	r3, #1
 8004754:	041b      	lsls	r3, r3, #16
 8004756:	431a      	orrs	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475c:	061b      	lsls	r3, r3, #24
 800475e:	491b      	ldr	r1, [pc, #108]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 8004760:	4313      	orrs	r3, r2
 8004762:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004764:	4b1b      	ldr	r3, [pc, #108]	; (80047d4 <HAL_RCC_OscConfig+0x478>)
 8004766:	2201      	movs	r2, #1
 8004768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800476a:	f7fc fbaf 	bl	8000ecc <HAL_GetTick>
 800476e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004770:	e008      	b.n	8004784 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004772:	f7fc fbab 	bl	8000ecc <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d901      	bls.n	8004784 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e05c      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004784:	4b11      	ldr	r3, [pc, #68]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0f0      	beq.n	8004772 <HAL_RCC_OscConfig+0x416>
 8004790:	e054      	b.n	800483c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004792:	4b10      	ldr	r3, [pc, #64]	; (80047d4 <HAL_RCC_OscConfig+0x478>)
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004798:	f7fc fb98 	bl	8000ecc <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047a0:	f7fc fb94 	bl	8000ecc <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e045      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b2:	4b06      	ldr	r3, [pc, #24]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1f0      	bne.n	80047a0 <HAL_RCC_OscConfig+0x444>
 80047be:	e03d      	b.n	800483c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d107      	bne.n	80047d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e038      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
 80047cc:	40023800 	.word	0x40023800
 80047d0:	40007000 	.word	0x40007000
 80047d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047d8:	4b1b      	ldr	r3, [pc, #108]	; (8004848 <HAL_RCC_OscConfig+0x4ec>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d028      	beq.n	8004838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d121      	bne.n	8004838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047fe:	429a      	cmp	r2, r3
 8004800:	d11a      	bne.n	8004838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004808:	4013      	ands	r3, r2
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800480e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004810:	4293      	cmp	r3, r2
 8004812:	d111      	bne.n	8004838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481e:	085b      	lsrs	r3, r3, #1
 8004820:	3b01      	subs	r3, #1
 8004822:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004824:	429a      	cmp	r2, r3
 8004826:	d107      	bne.n	8004838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004832:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004834:	429a      	cmp	r2, r3
 8004836:	d001      	beq.n	800483c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e000      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3718      	adds	r7, #24
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	40023800 	.word	0x40023800

0800484c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e0cc      	b.n	80049fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004860:	4b68      	ldr	r3, [pc, #416]	; (8004a04 <HAL_RCC_ClockConfig+0x1b8>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0307 	and.w	r3, r3, #7
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	429a      	cmp	r2, r3
 800486c:	d90c      	bls.n	8004888 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800486e:	4b65      	ldr	r3, [pc, #404]	; (8004a04 <HAL_RCC_ClockConfig+0x1b8>)
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	b2d2      	uxtb	r2, r2
 8004874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004876:	4b63      	ldr	r3, [pc, #396]	; (8004a04 <HAL_RCC_ClockConfig+0x1b8>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0307 	and.w	r3, r3, #7
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	429a      	cmp	r2, r3
 8004882:	d001      	beq.n	8004888 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e0b8      	b.n	80049fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d020      	beq.n	80048d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b00      	cmp	r3, #0
 800489e:	d005      	beq.n	80048ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048a0:	4b59      	ldr	r3, [pc, #356]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	4a58      	ldr	r2, [pc, #352]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80048a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0308 	and.w	r3, r3, #8
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d005      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048b8:	4b53      	ldr	r3, [pc, #332]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	4a52      	ldr	r2, [pc, #328]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80048be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048c4:	4b50      	ldr	r3, [pc, #320]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	494d      	ldr	r1, [pc, #308]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d044      	beq.n	800496c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d107      	bne.n	80048fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ea:	4b47      	ldr	r3, [pc, #284]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d119      	bne.n	800492a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e07f      	b.n	80049fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d003      	beq.n	800490a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004906:	2b03      	cmp	r3, #3
 8004908:	d107      	bne.n	800491a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800490a:	4b3f      	ldr	r3, [pc, #252]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d109      	bne.n	800492a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e06f      	b.n	80049fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800491a:	4b3b      	ldr	r3, [pc, #236]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e067      	b.n	80049fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800492a:	4b37      	ldr	r3, [pc, #220]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f023 0203 	bic.w	r2, r3, #3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	4934      	ldr	r1, [pc, #208]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 8004938:	4313      	orrs	r3, r2
 800493a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800493c:	f7fc fac6 	bl	8000ecc <HAL_GetTick>
 8004940:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004942:	e00a      	b.n	800495a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004944:	f7fc fac2 	bl	8000ecc <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004952:	4293      	cmp	r3, r2
 8004954:	d901      	bls.n	800495a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e04f      	b.n	80049fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800495a:	4b2b      	ldr	r3, [pc, #172]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 020c 	and.w	r2, r3, #12
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	429a      	cmp	r2, r3
 800496a:	d1eb      	bne.n	8004944 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800496c:	4b25      	ldr	r3, [pc, #148]	; (8004a04 <HAL_RCC_ClockConfig+0x1b8>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	429a      	cmp	r2, r3
 8004978:	d20c      	bcs.n	8004994 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800497a:	4b22      	ldr	r3, [pc, #136]	; (8004a04 <HAL_RCC_ClockConfig+0x1b8>)
 800497c:	683a      	ldr	r2, [r7, #0]
 800497e:	b2d2      	uxtb	r2, r2
 8004980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004982:	4b20      	ldr	r3, [pc, #128]	; (8004a04 <HAL_RCC_ClockConfig+0x1b8>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0307 	and.w	r3, r3, #7
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	429a      	cmp	r2, r3
 800498e:	d001      	beq.n	8004994 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e032      	b.n	80049fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0304 	and.w	r3, r3, #4
 800499c:	2b00      	cmp	r3, #0
 800499e:	d008      	beq.n	80049b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049a0:	4b19      	ldr	r3, [pc, #100]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	4916      	ldr	r1, [pc, #88]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0308 	and.w	r3, r3, #8
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d009      	beq.n	80049d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049be:	4b12      	ldr	r3, [pc, #72]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	490e      	ldr	r1, [pc, #56]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049d2:	f000 f821 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 80049d6:	4602      	mov	r2, r0
 80049d8:	4b0b      	ldr	r3, [pc, #44]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	091b      	lsrs	r3, r3, #4
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	490a      	ldr	r1, [pc, #40]	; (8004a0c <HAL_RCC_ClockConfig+0x1c0>)
 80049e4:	5ccb      	ldrb	r3, [r1, r3]
 80049e6:	fa22 f303 	lsr.w	r3, r2, r3
 80049ea:	4a09      	ldr	r2, [pc, #36]	; (8004a10 <HAL_RCC_ClockConfig+0x1c4>)
 80049ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049ee:	4b09      	ldr	r3, [pc, #36]	; (8004a14 <HAL_RCC_ClockConfig+0x1c8>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fc fa26 	bl	8000e44 <HAL_InitTick>

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	40023c00 	.word	0x40023c00
 8004a08:	40023800 	.word	0x40023800
 8004a0c:	08009358 	.word	0x08009358
 8004a10:	20000000 	.word	0x20000000
 8004a14:	20000004 	.word	0x20000004

08004a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a1c:	b094      	sub	sp, #80	; 0x50
 8004a1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	647b      	str	r3, [r7, #68]	; 0x44
 8004a24:	2300      	movs	r3, #0
 8004a26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a28:	2300      	movs	r3, #0
 8004a2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a30:	4b79      	ldr	r3, [pc, #484]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f003 030c 	and.w	r3, r3, #12
 8004a38:	2b08      	cmp	r3, #8
 8004a3a:	d00d      	beq.n	8004a58 <HAL_RCC_GetSysClockFreq+0x40>
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	f200 80e1 	bhi.w	8004c04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d002      	beq.n	8004a4c <HAL_RCC_GetSysClockFreq+0x34>
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	d003      	beq.n	8004a52 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a4a:	e0db      	b.n	8004c04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a4c:	4b73      	ldr	r3, [pc, #460]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x204>)
 8004a4e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004a50:	e0db      	b.n	8004c0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a52:	4b73      	ldr	r3, [pc, #460]	; (8004c20 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a56:	e0d8      	b.n	8004c0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a58:	4b6f      	ldr	r3, [pc, #444]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a60:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a62:	4b6d      	ldr	r3, [pc, #436]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d063      	beq.n	8004b36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a6e:	4b6a      	ldr	r3, [pc, #424]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	099b      	lsrs	r3, r3, #6
 8004a74:	2200      	movs	r2, #0
 8004a76:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a80:	633b      	str	r3, [r7, #48]	; 0x30
 8004a82:	2300      	movs	r3, #0
 8004a84:	637b      	str	r3, [r7, #52]	; 0x34
 8004a86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004a8a:	4622      	mov	r2, r4
 8004a8c:	462b      	mov	r3, r5
 8004a8e:	f04f 0000 	mov.w	r0, #0
 8004a92:	f04f 0100 	mov.w	r1, #0
 8004a96:	0159      	lsls	r1, r3, #5
 8004a98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a9c:	0150      	lsls	r0, r2, #5
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	4621      	mov	r1, r4
 8004aa4:	1a51      	subs	r1, r2, r1
 8004aa6:	6139      	str	r1, [r7, #16]
 8004aa8:	4629      	mov	r1, r5
 8004aaa:	eb63 0301 	sbc.w	r3, r3, r1
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	f04f 0300 	mov.w	r3, #0
 8004ab8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004abc:	4659      	mov	r1, fp
 8004abe:	018b      	lsls	r3, r1, #6
 8004ac0:	4651      	mov	r1, sl
 8004ac2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ac6:	4651      	mov	r1, sl
 8004ac8:	018a      	lsls	r2, r1, #6
 8004aca:	4651      	mov	r1, sl
 8004acc:	ebb2 0801 	subs.w	r8, r2, r1
 8004ad0:	4659      	mov	r1, fp
 8004ad2:	eb63 0901 	sbc.w	r9, r3, r1
 8004ad6:	f04f 0200 	mov.w	r2, #0
 8004ada:	f04f 0300 	mov.w	r3, #0
 8004ade:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ae2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ae6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004aea:	4690      	mov	r8, r2
 8004aec:	4699      	mov	r9, r3
 8004aee:	4623      	mov	r3, r4
 8004af0:	eb18 0303 	adds.w	r3, r8, r3
 8004af4:	60bb      	str	r3, [r7, #8]
 8004af6:	462b      	mov	r3, r5
 8004af8:	eb49 0303 	adc.w	r3, r9, r3
 8004afc:	60fb      	str	r3, [r7, #12]
 8004afe:	f04f 0200 	mov.w	r2, #0
 8004b02:	f04f 0300 	mov.w	r3, #0
 8004b06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b0a:	4629      	mov	r1, r5
 8004b0c:	024b      	lsls	r3, r1, #9
 8004b0e:	4621      	mov	r1, r4
 8004b10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b14:	4621      	mov	r1, r4
 8004b16:	024a      	lsls	r2, r1, #9
 8004b18:	4610      	mov	r0, r2
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b1e:	2200      	movs	r2, #0
 8004b20:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b28:	f7fb fb56 	bl	80001d8 <__aeabi_uldivmod>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4613      	mov	r3, r2
 8004b32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b34:	e058      	b.n	8004be8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b36:	4b38      	ldr	r3, [pc, #224]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	099b      	lsrs	r3, r3, #6
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	4618      	mov	r0, r3
 8004b40:	4611      	mov	r1, r2
 8004b42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b46:	623b      	str	r3, [r7, #32]
 8004b48:	2300      	movs	r3, #0
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b50:	4642      	mov	r2, r8
 8004b52:	464b      	mov	r3, r9
 8004b54:	f04f 0000 	mov.w	r0, #0
 8004b58:	f04f 0100 	mov.w	r1, #0
 8004b5c:	0159      	lsls	r1, r3, #5
 8004b5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b62:	0150      	lsls	r0, r2, #5
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	4641      	mov	r1, r8
 8004b6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b6e:	4649      	mov	r1, r9
 8004b70:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b74:	f04f 0200 	mov.w	r2, #0
 8004b78:	f04f 0300 	mov.w	r3, #0
 8004b7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b88:	ebb2 040a 	subs.w	r4, r2, sl
 8004b8c:	eb63 050b 	sbc.w	r5, r3, fp
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	f04f 0300 	mov.w	r3, #0
 8004b98:	00eb      	lsls	r3, r5, #3
 8004b9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b9e:	00e2      	lsls	r2, r4, #3
 8004ba0:	4614      	mov	r4, r2
 8004ba2:	461d      	mov	r5, r3
 8004ba4:	4643      	mov	r3, r8
 8004ba6:	18e3      	adds	r3, r4, r3
 8004ba8:	603b      	str	r3, [r7, #0]
 8004baa:	464b      	mov	r3, r9
 8004bac:	eb45 0303 	adc.w	r3, r5, r3
 8004bb0:	607b      	str	r3, [r7, #4]
 8004bb2:	f04f 0200 	mov.w	r2, #0
 8004bb6:	f04f 0300 	mov.w	r3, #0
 8004bba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bbe:	4629      	mov	r1, r5
 8004bc0:	028b      	lsls	r3, r1, #10
 8004bc2:	4621      	mov	r1, r4
 8004bc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bc8:	4621      	mov	r1, r4
 8004bca:	028a      	lsls	r2, r1, #10
 8004bcc:	4610      	mov	r0, r2
 8004bce:	4619      	mov	r1, r3
 8004bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	61bb      	str	r3, [r7, #24]
 8004bd6:	61fa      	str	r2, [r7, #28]
 8004bd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bdc:	f7fb fafc 	bl	80001d8 <__aeabi_uldivmod>
 8004be0:	4602      	mov	r2, r0
 8004be2:	460b      	mov	r3, r1
 8004be4:	4613      	mov	r3, r2
 8004be6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004be8:	4b0b      	ldr	r3, [pc, #44]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	0c1b      	lsrs	r3, r3, #16
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004bf8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c02:	e002      	b.n	8004c0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c04:	4b05      	ldr	r3, [pc, #20]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x204>)
 8004c06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3750      	adds	r7, #80	; 0x50
 8004c10:	46bd      	mov	sp, r7
 8004c12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c16:	bf00      	nop
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	00f42400 	.word	0x00f42400
 8004c20:	007a1200 	.word	0x007a1200

08004c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c24:	b480      	push	{r7}
 8004c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c28:	4b03      	ldr	r3, [pc, #12]	; (8004c38 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	20000000 	.word	0x20000000

08004c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c40:	f7ff fff0 	bl	8004c24 <HAL_RCC_GetHCLKFreq>
 8004c44:	4602      	mov	r2, r0
 8004c46:	4b05      	ldr	r3, [pc, #20]	; (8004c5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	0a9b      	lsrs	r3, r3, #10
 8004c4c:	f003 0307 	and.w	r3, r3, #7
 8004c50:	4903      	ldr	r1, [pc, #12]	; (8004c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c52:	5ccb      	ldrb	r3, [r1, r3]
 8004c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	40023800 	.word	0x40023800
 8004c60:	08009368 	.word	0x08009368

08004c64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c68:	f7ff ffdc 	bl	8004c24 <HAL_RCC_GetHCLKFreq>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	4b05      	ldr	r3, [pc, #20]	; (8004c84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	0b5b      	lsrs	r3, r3, #13
 8004c74:	f003 0307 	and.w	r3, r3, #7
 8004c78:	4903      	ldr	r1, [pc, #12]	; (8004c88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c7a:	5ccb      	ldrb	r3, [r1, r3]
 8004c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	40023800 	.word	0x40023800
 8004c88:	08009368 	.word	0x08009368

08004c8c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c94:	2300      	movs	r3, #0
 8004c96:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d105      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d038      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004cb4:	4b68      	ldr	r3, [pc, #416]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cba:	f7fc f907 	bl	8000ecc <HAL_GetTick>
 8004cbe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cc0:	e008      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004cc2:	f7fc f903 	bl	8000ecc <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e0bd      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cd4:	4b61      	ldr	r3, [pc, #388]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1f0      	bne.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685a      	ldr	r2, [r3, #4]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	019b      	lsls	r3, r3, #6
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	071b      	lsls	r3, r3, #28
 8004cf2:	495a      	ldr	r1, [pc, #360]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cfa:	4b57      	ldr	r3, [pc, #348]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d00:	f7fc f8e4 	bl	8000ecc <HAL_GetTick>
 8004d04:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d06:	e008      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d08:	f7fc f8e0 	bl	8000ecc <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e09a      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d1a:	4b50      	ldr	r3, [pc, #320]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d0f0      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 8083 	beq.w	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d34:	2300      	movs	r3, #0
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	4b48      	ldr	r3, [pc, #288]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3c:	4a47      	ldr	r2, [pc, #284]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d42:	6413      	str	r3, [r2, #64]	; 0x40
 8004d44:	4b45      	ldr	r3, [pc, #276]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d4c:	60fb      	str	r3, [r7, #12]
 8004d4e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d50:	4b43      	ldr	r3, [pc, #268]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a42      	ldr	r2, [pc, #264]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d5a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d5c:	f7fc f8b6 	bl	8000ecc <HAL_GetTick>
 8004d60:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d62:	e008      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d64:	f7fc f8b2 	bl	8000ecc <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e06c      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d76:	4b3a      	ldr	r3, [pc, #232]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d0f0      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d82:	4b36      	ldr	r3, [pc, #216]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d8a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d02f      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d028      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004da0:	4b2e      	ldr	r3, [pc, #184]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004da8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004daa:	4b2e      	ldr	r3, [pc, #184]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004dac:	2201      	movs	r2, #1
 8004dae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004db0:	4b2c      	ldr	r3, [pc, #176]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004db6:	4a29      	ldr	r2, [pc, #164]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004dbc:	4b27      	ldr	r3, [pc, #156]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d114      	bne.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004dc8:	f7fc f880 	bl	8000ecc <HAL_GetTick>
 8004dcc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dce:	e00a      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dd0:	f7fc f87c 	bl	8000ecc <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e034      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de6:	4b1d      	ldr	r3, [pc, #116]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0ee      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dfe:	d10d      	bne.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004e00:	4b16      	ldr	r3, [pc, #88]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e14:	4911      	ldr	r1, [pc, #68]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	608b      	str	r3, [r1, #8]
 8004e1a:	e005      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004e1c:	4b0f      	ldr	r3, [pc, #60]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	4a0e      	ldr	r2, [pc, #56]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e22:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e26:	6093      	str	r3, [r2, #8]
 8004e28:	4b0c      	ldr	r3, [pc, #48]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e34:	4909      	ldr	r1, [pc, #36]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0308 	and.w	r3, r3, #8
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	7d1a      	ldrb	r2, [r3, #20]
 8004e4a:	4b07      	ldr	r3, [pc, #28]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004e4c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3718      	adds	r7, #24
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	42470068 	.word	0x42470068
 8004e5c:	40023800 	.word	0x40023800
 8004e60:	40007000 	.word	0x40007000
 8004e64:	42470e40 	.word	0x42470e40
 8004e68:	424711e0 	.word	0x424711e0

08004e6c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b087      	sub	sp, #28
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d141      	bne.n	8004f0e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004e8a:	4b25      	ldr	r3, [pc, #148]	; (8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e92:	60fb      	str	r3, [r7, #12]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d006      	beq.n	8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ea0:	d131      	bne.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004ea2:	4b20      	ldr	r3, [pc, #128]	; (8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004ea4:	617b      	str	r3, [r7, #20]
          break;
 8004ea6:	e031      	b.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ea8:	4b1d      	ldr	r3, [pc, #116]	; (8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eb4:	d109      	bne.n	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004eb6:	4b1a      	ldr	r3, [pc, #104]	; (8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ebc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ec0:	4a19      	ldr	r2, [pc, #100]	; (8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec6:	613b      	str	r3, [r7, #16]
 8004ec8:	e008      	b.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004eca:	4b15      	ldr	r3, [pc, #84]	; (8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ed0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ed4:	4a15      	ldr	r2, [pc, #84]	; (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eda:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004edc:	4b10      	ldr	r3, [pc, #64]	; (8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ee2:	099b      	lsrs	r3, r3, #6
 8004ee4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	fb02 f303 	mul.w	r3, r2, r3
 8004eee:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004ef0:	4b0b      	ldr	r3, [pc, #44]	; (8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ef6:	0f1b      	lsrs	r3, r3, #28
 8004ef8:	f003 0307 	and.w	r3, r3, #7
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f02:	617b      	str	r3, [r7, #20]
          break;
 8004f04:	e002      	b.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004f06:	2300      	movs	r3, #0
 8004f08:	617b      	str	r3, [r7, #20]
          break;
 8004f0a:	bf00      	nop
        }
      }
      break;
 8004f0c:	e000      	b.n	8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
  default:
    {
       break;
 8004f0e:	bf00      	nop
    }
  }
  return frequency;
 8004f10:	697b      	ldr	r3, [r7, #20]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	371c      	adds	r7, #28
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	40023800 	.word	0x40023800
 8004f24:	00bb8000 	.word	0x00bb8000
 8004f28:	007a1200 	.word	0x007a1200
 8004f2c:	00f42400 	.word	0x00f42400

08004f30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e042      	b.n	8004fc8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d106      	bne.n	8004f5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7fb fe86 	bl	8000c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2224      	movs	r2, #36	; 0x24
 8004f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68da      	ldr	r2, [r3, #12]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 f82b 	bl	8004fd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	691a      	ldr	r2, [r3, #16]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	695a      	ldr	r2, [r3, #20]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68da      	ldr	r2, [r3, #12]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fa8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3708      	adds	r7, #8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fd4:	b0c0      	sub	sp, #256	; 0x100
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fec:	68d9      	ldr	r1, [r3, #12]
 8004fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	ea40 0301 	orr.w	r3, r0, r1
 8004ff8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ffe:	689a      	ldr	r2, [r3, #8]
 8005000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	431a      	orrs	r2, r3
 8005008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	431a      	orrs	r2, r3
 8005010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005014:	69db      	ldr	r3, [r3, #28]
 8005016:	4313      	orrs	r3, r2
 8005018:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800501c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005028:	f021 010c 	bic.w	r1, r1, #12
 800502c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005036:	430b      	orrs	r3, r1
 8005038:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800503a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800504a:	6999      	ldr	r1, [r3, #24]
 800504c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	ea40 0301 	orr.w	r3, r0, r1
 8005056:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	4b8f      	ldr	r3, [pc, #572]	; (800529c <UART_SetConfig+0x2cc>)
 8005060:	429a      	cmp	r2, r3
 8005062:	d005      	beq.n	8005070 <UART_SetConfig+0xa0>
 8005064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	4b8d      	ldr	r3, [pc, #564]	; (80052a0 <UART_SetConfig+0x2d0>)
 800506c:	429a      	cmp	r2, r3
 800506e:	d104      	bne.n	800507a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005070:	f7ff fdf8 	bl	8004c64 <HAL_RCC_GetPCLK2Freq>
 8005074:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005078:	e003      	b.n	8005082 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800507a:	f7ff fddf 	bl	8004c3c <HAL_RCC_GetPCLK1Freq>
 800507e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005086:	69db      	ldr	r3, [r3, #28]
 8005088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800508c:	f040 810c 	bne.w	80052a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005090:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005094:	2200      	movs	r2, #0
 8005096:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800509a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800509e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80050a2:	4622      	mov	r2, r4
 80050a4:	462b      	mov	r3, r5
 80050a6:	1891      	adds	r1, r2, r2
 80050a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80050aa:	415b      	adcs	r3, r3
 80050ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80050b2:	4621      	mov	r1, r4
 80050b4:	eb12 0801 	adds.w	r8, r2, r1
 80050b8:	4629      	mov	r1, r5
 80050ba:	eb43 0901 	adc.w	r9, r3, r1
 80050be:	f04f 0200 	mov.w	r2, #0
 80050c2:	f04f 0300 	mov.w	r3, #0
 80050c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050d2:	4690      	mov	r8, r2
 80050d4:	4699      	mov	r9, r3
 80050d6:	4623      	mov	r3, r4
 80050d8:	eb18 0303 	adds.w	r3, r8, r3
 80050dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80050e0:	462b      	mov	r3, r5
 80050e2:	eb49 0303 	adc.w	r3, r9, r3
 80050e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80050ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80050f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80050fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80050fe:	460b      	mov	r3, r1
 8005100:	18db      	adds	r3, r3, r3
 8005102:	653b      	str	r3, [r7, #80]	; 0x50
 8005104:	4613      	mov	r3, r2
 8005106:	eb42 0303 	adc.w	r3, r2, r3
 800510a:	657b      	str	r3, [r7, #84]	; 0x54
 800510c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005110:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005114:	f7fb f860 	bl	80001d8 <__aeabi_uldivmod>
 8005118:	4602      	mov	r2, r0
 800511a:	460b      	mov	r3, r1
 800511c:	4b61      	ldr	r3, [pc, #388]	; (80052a4 <UART_SetConfig+0x2d4>)
 800511e:	fba3 2302 	umull	r2, r3, r3, r2
 8005122:	095b      	lsrs	r3, r3, #5
 8005124:	011c      	lsls	r4, r3, #4
 8005126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800512a:	2200      	movs	r2, #0
 800512c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005130:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005134:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005138:	4642      	mov	r2, r8
 800513a:	464b      	mov	r3, r9
 800513c:	1891      	adds	r1, r2, r2
 800513e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005140:	415b      	adcs	r3, r3
 8005142:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005144:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005148:	4641      	mov	r1, r8
 800514a:	eb12 0a01 	adds.w	sl, r2, r1
 800514e:	4649      	mov	r1, r9
 8005150:	eb43 0b01 	adc.w	fp, r3, r1
 8005154:	f04f 0200 	mov.w	r2, #0
 8005158:	f04f 0300 	mov.w	r3, #0
 800515c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005160:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005164:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005168:	4692      	mov	sl, r2
 800516a:	469b      	mov	fp, r3
 800516c:	4643      	mov	r3, r8
 800516e:	eb1a 0303 	adds.w	r3, sl, r3
 8005172:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005176:	464b      	mov	r3, r9
 8005178:	eb4b 0303 	adc.w	r3, fp, r3
 800517c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800518c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005190:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005194:	460b      	mov	r3, r1
 8005196:	18db      	adds	r3, r3, r3
 8005198:	643b      	str	r3, [r7, #64]	; 0x40
 800519a:	4613      	mov	r3, r2
 800519c:	eb42 0303 	adc.w	r3, r2, r3
 80051a0:	647b      	str	r3, [r7, #68]	; 0x44
 80051a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80051aa:	f7fb f815 	bl	80001d8 <__aeabi_uldivmod>
 80051ae:	4602      	mov	r2, r0
 80051b0:	460b      	mov	r3, r1
 80051b2:	4611      	mov	r1, r2
 80051b4:	4b3b      	ldr	r3, [pc, #236]	; (80052a4 <UART_SetConfig+0x2d4>)
 80051b6:	fba3 2301 	umull	r2, r3, r3, r1
 80051ba:	095b      	lsrs	r3, r3, #5
 80051bc:	2264      	movs	r2, #100	; 0x64
 80051be:	fb02 f303 	mul.w	r3, r2, r3
 80051c2:	1acb      	subs	r3, r1, r3
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80051ca:	4b36      	ldr	r3, [pc, #216]	; (80052a4 <UART_SetConfig+0x2d4>)
 80051cc:	fba3 2302 	umull	r2, r3, r3, r2
 80051d0:	095b      	lsrs	r3, r3, #5
 80051d2:	005b      	lsls	r3, r3, #1
 80051d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051d8:	441c      	add	r4, r3
 80051da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051de:	2200      	movs	r2, #0
 80051e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80051e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80051ec:	4642      	mov	r2, r8
 80051ee:	464b      	mov	r3, r9
 80051f0:	1891      	adds	r1, r2, r2
 80051f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80051f4:	415b      	adcs	r3, r3
 80051f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80051fc:	4641      	mov	r1, r8
 80051fe:	1851      	adds	r1, r2, r1
 8005200:	6339      	str	r1, [r7, #48]	; 0x30
 8005202:	4649      	mov	r1, r9
 8005204:	414b      	adcs	r3, r1
 8005206:	637b      	str	r3, [r7, #52]	; 0x34
 8005208:	f04f 0200 	mov.w	r2, #0
 800520c:	f04f 0300 	mov.w	r3, #0
 8005210:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005214:	4659      	mov	r1, fp
 8005216:	00cb      	lsls	r3, r1, #3
 8005218:	4651      	mov	r1, sl
 800521a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800521e:	4651      	mov	r1, sl
 8005220:	00ca      	lsls	r2, r1, #3
 8005222:	4610      	mov	r0, r2
 8005224:	4619      	mov	r1, r3
 8005226:	4603      	mov	r3, r0
 8005228:	4642      	mov	r2, r8
 800522a:	189b      	adds	r3, r3, r2
 800522c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005230:	464b      	mov	r3, r9
 8005232:	460a      	mov	r2, r1
 8005234:	eb42 0303 	adc.w	r3, r2, r3
 8005238:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800523c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005248:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800524c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005250:	460b      	mov	r3, r1
 8005252:	18db      	adds	r3, r3, r3
 8005254:	62bb      	str	r3, [r7, #40]	; 0x28
 8005256:	4613      	mov	r3, r2
 8005258:	eb42 0303 	adc.w	r3, r2, r3
 800525c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800525e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005262:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005266:	f7fa ffb7 	bl	80001d8 <__aeabi_uldivmod>
 800526a:	4602      	mov	r2, r0
 800526c:	460b      	mov	r3, r1
 800526e:	4b0d      	ldr	r3, [pc, #52]	; (80052a4 <UART_SetConfig+0x2d4>)
 8005270:	fba3 1302 	umull	r1, r3, r3, r2
 8005274:	095b      	lsrs	r3, r3, #5
 8005276:	2164      	movs	r1, #100	; 0x64
 8005278:	fb01 f303 	mul.w	r3, r1, r3
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	3332      	adds	r3, #50	; 0x32
 8005282:	4a08      	ldr	r2, [pc, #32]	; (80052a4 <UART_SetConfig+0x2d4>)
 8005284:	fba2 2303 	umull	r2, r3, r2, r3
 8005288:	095b      	lsrs	r3, r3, #5
 800528a:	f003 0207 	and.w	r2, r3, #7
 800528e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4422      	add	r2, r4
 8005296:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005298:	e106      	b.n	80054a8 <UART_SetConfig+0x4d8>
 800529a:	bf00      	nop
 800529c:	40011000 	.word	0x40011000
 80052a0:	40011400 	.word	0x40011400
 80052a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052ac:	2200      	movs	r2, #0
 80052ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80052b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80052b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80052ba:	4642      	mov	r2, r8
 80052bc:	464b      	mov	r3, r9
 80052be:	1891      	adds	r1, r2, r2
 80052c0:	6239      	str	r1, [r7, #32]
 80052c2:	415b      	adcs	r3, r3
 80052c4:	627b      	str	r3, [r7, #36]	; 0x24
 80052c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052ca:	4641      	mov	r1, r8
 80052cc:	1854      	adds	r4, r2, r1
 80052ce:	4649      	mov	r1, r9
 80052d0:	eb43 0501 	adc.w	r5, r3, r1
 80052d4:	f04f 0200 	mov.w	r2, #0
 80052d8:	f04f 0300 	mov.w	r3, #0
 80052dc:	00eb      	lsls	r3, r5, #3
 80052de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052e2:	00e2      	lsls	r2, r4, #3
 80052e4:	4614      	mov	r4, r2
 80052e6:	461d      	mov	r5, r3
 80052e8:	4643      	mov	r3, r8
 80052ea:	18e3      	adds	r3, r4, r3
 80052ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80052f0:	464b      	mov	r3, r9
 80052f2:	eb45 0303 	adc.w	r3, r5, r3
 80052f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80052fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005306:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800530a:	f04f 0200 	mov.w	r2, #0
 800530e:	f04f 0300 	mov.w	r3, #0
 8005312:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005316:	4629      	mov	r1, r5
 8005318:	008b      	lsls	r3, r1, #2
 800531a:	4621      	mov	r1, r4
 800531c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005320:	4621      	mov	r1, r4
 8005322:	008a      	lsls	r2, r1, #2
 8005324:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005328:	f7fa ff56 	bl	80001d8 <__aeabi_uldivmod>
 800532c:	4602      	mov	r2, r0
 800532e:	460b      	mov	r3, r1
 8005330:	4b60      	ldr	r3, [pc, #384]	; (80054b4 <UART_SetConfig+0x4e4>)
 8005332:	fba3 2302 	umull	r2, r3, r3, r2
 8005336:	095b      	lsrs	r3, r3, #5
 8005338:	011c      	lsls	r4, r3, #4
 800533a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800533e:	2200      	movs	r2, #0
 8005340:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005344:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005348:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800534c:	4642      	mov	r2, r8
 800534e:	464b      	mov	r3, r9
 8005350:	1891      	adds	r1, r2, r2
 8005352:	61b9      	str	r1, [r7, #24]
 8005354:	415b      	adcs	r3, r3
 8005356:	61fb      	str	r3, [r7, #28]
 8005358:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800535c:	4641      	mov	r1, r8
 800535e:	1851      	adds	r1, r2, r1
 8005360:	6139      	str	r1, [r7, #16]
 8005362:	4649      	mov	r1, r9
 8005364:	414b      	adcs	r3, r1
 8005366:	617b      	str	r3, [r7, #20]
 8005368:	f04f 0200 	mov.w	r2, #0
 800536c:	f04f 0300 	mov.w	r3, #0
 8005370:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005374:	4659      	mov	r1, fp
 8005376:	00cb      	lsls	r3, r1, #3
 8005378:	4651      	mov	r1, sl
 800537a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800537e:	4651      	mov	r1, sl
 8005380:	00ca      	lsls	r2, r1, #3
 8005382:	4610      	mov	r0, r2
 8005384:	4619      	mov	r1, r3
 8005386:	4603      	mov	r3, r0
 8005388:	4642      	mov	r2, r8
 800538a:	189b      	adds	r3, r3, r2
 800538c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005390:	464b      	mov	r3, r9
 8005392:	460a      	mov	r2, r1
 8005394:	eb42 0303 	adc.w	r3, r2, r3
 8005398:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800539c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80053a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80053a8:	f04f 0200 	mov.w	r2, #0
 80053ac:	f04f 0300 	mov.w	r3, #0
 80053b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80053b4:	4649      	mov	r1, r9
 80053b6:	008b      	lsls	r3, r1, #2
 80053b8:	4641      	mov	r1, r8
 80053ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053be:	4641      	mov	r1, r8
 80053c0:	008a      	lsls	r2, r1, #2
 80053c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80053c6:	f7fa ff07 	bl	80001d8 <__aeabi_uldivmod>
 80053ca:	4602      	mov	r2, r0
 80053cc:	460b      	mov	r3, r1
 80053ce:	4611      	mov	r1, r2
 80053d0:	4b38      	ldr	r3, [pc, #224]	; (80054b4 <UART_SetConfig+0x4e4>)
 80053d2:	fba3 2301 	umull	r2, r3, r3, r1
 80053d6:	095b      	lsrs	r3, r3, #5
 80053d8:	2264      	movs	r2, #100	; 0x64
 80053da:	fb02 f303 	mul.w	r3, r2, r3
 80053de:	1acb      	subs	r3, r1, r3
 80053e0:	011b      	lsls	r3, r3, #4
 80053e2:	3332      	adds	r3, #50	; 0x32
 80053e4:	4a33      	ldr	r2, [pc, #204]	; (80054b4 <UART_SetConfig+0x4e4>)
 80053e6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ea:	095b      	lsrs	r3, r3, #5
 80053ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053f0:	441c      	add	r4, r3
 80053f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053f6:	2200      	movs	r2, #0
 80053f8:	673b      	str	r3, [r7, #112]	; 0x70
 80053fa:	677a      	str	r2, [r7, #116]	; 0x74
 80053fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005400:	4642      	mov	r2, r8
 8005402:	464b      	mov	r3, r9
 8005404:	1891      	adds	r1, r2, r2
 8005406:	60b9      	str	r1, [r7, #8]
 8005408:	415b      	adcs	r3, r3
 800540a:	60fb      	str	r3, [r7, #12]
 800540c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005410:	4641      	mov	r1, r8
 8005412:	1851      	adds	r1, r2, r1
 8005414:	6039      	str	r1, [r7, #0]
 8005416:	4649      	mov	r1, r9
 8005418:	414b      	adcs	r3, r1
 800541a:	607b      	str	r3, [r7, #4]
 800541c:	f04f 0200 	mov.w	r2, #0
 8005420:	f04f 0300 	mov.w	r3, #0
 8005424:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005428:	4659      	mov	r1, fp
 800542a:	00cb      	lsls	r3, r1, #3
 800542c:	4651      	mov	r1, sl
 800542e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005432:	4651      	mov	r1, sl
 8005434:	00ca      	lsls	r2, r1, #3
 8005436:	4610      	mov	r0, r2
 8005438:	4619      	mov	r1, r3
 800543a:	4603      	mov	r3, r0
 800543c:	4642      	mov	r2, r8
 800543e:	189b      	adds	r3, r3, r2
 8005440:	66bb      	str	r3, [r7, #104]	; 0x68
 8005442:	464b      	mov	r3, r9
 8005444:	460a      	mov	r2, r1
 8005446:	eb42 0303 	adc.w	r3, r2, r3
 800544a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800544c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	663b      	str	r3, [r7, #96]	; 0x60
 8005456:	667a      	str	r2, [r7, #100]	; 0x64
 8005458:	f04f 0200 	mov.w	r2, #0
 800545c:	f04f 0300 	mov.w	r3, #0
 8005460:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005464:	4649      	mov	r1, r9
 8005466:	008b      	lsls	r3, r1, #2
 8005468:	4641      	mov	r1, r8
 800546a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800546e:	4641      	mov	r1, r8
 8005470:	008a      	lsls	r2, r1, #2
 8005472:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005476:	f7fa feaf 	bl	80001d8 <__aeabi_uldivmod>
 800547a:	4602      	mov	r2, r0
 800547c:	460b      	mov	r3, r1
 800547e:	4b0d      	ldr	r3, [pc, #52]	; (80054b4 <UART_SetConfig+0x4e4>)
 8005480:	fba3 1302 	umull	r1, r3, r3, r2
 8005484:	095b      	lsrs	r3, r3, #5
 8005486:	2164      	movs	r1, #100	; 0x64
 8005488:	fb01 f303 	mul.w	r3, r1, r3
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	011b      	lsls	r3, r3, #4
 8005490:	3332      	adds	r3, #50	; 0x32
 8005492:	4a08      	ldr	r2, [pc, #32]	; (80054b4 <UART_SetConfig+0x4e4>)
 8005494:	fba2 2303 	umull	r2, r3, r2, r3
 8005498:	095b      	lsrs	r3, r3, #5
 800549a:	f003 020f 	and.w	r2, r3, #15
 800549e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4422      	add	r2, r4
 80054a6:	609a      	str	r2, [r3, #8]
}
 80054a8:	bf00      	nop
 80054aa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80054ae:	46bd      	mov	sp, r7
 80054b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054b4:	51eb851f 	.word	0x51eb851f

080054b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054b8:	b084      	sub	sp, #16
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b084      	sub	sp, #16
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
 80054c2:	f107 001c 	add.w	r0, r7, #28
 80054c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054ca:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d123      	bne.n	800551a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80054e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80054fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d105      	bne.n	800550e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f001 fae2 	bl	8006ad8 <USB_CoreReset>
 8005514:	4603      	mov	r3, r0
 8005516:	73fb      	strb	r3, [r7, #15]
 8005518:	e01b      	b.n	8005552 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f001 fad6 	bl	8006ad8 <USB_CoreReset>
 800552c:	4603      	mov	r3, r0
 800552e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005530:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005534:	2b00      	cmp	r3, #0
 8005536:	d106      	bne.n	8005546 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	639a      	str	r2, [r3, #56]	; 0x38
 8005544:	e005      	b.n	8005552 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005552:	7fbb      	ldrb	r3, [r7, #30]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d10b      	bne.n	8005570 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f043 0206 	orr.w	r2, r3, #6
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f043 0220 	orr.w	r2, r3, #32
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005570:	7bfb      	ldrb	r3, [r7, #15]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800557c:	b004      	add	sp, #16
 800557e:	4770      	bx	lr

08005580 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005580:	b480      	push	{r7}
 8005582:	b087      	sub	sp, #28
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	4613      	mov	r3, r2
 800558c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800558e:	79fb      	ldrb	r3, [r7, #7]
 8005590:	2b02      	cmp	r3, #2
 8005592:	d165      	bne.n	8005660 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	4a41      	ldr	r2, [pc, #260]	; (800569c <USB_SetTurnaroundTime+0x11c>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d906      	bls.n	80055aa <USB_SetTurnaroundTime+0x2a>
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	4a40      	ldr	r2, [pc, #256]	; (80056a0 <USB_SetTurnaroundTime+0x120>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d202      	bcs.n	80055aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80055a4:	230f      	movs	r3, #15
 80055a6:	617b      	str	r3, [r7, #20]
 80055a8:	e062      	b.n	8005670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	4a3c      	ldr	r2, [pc, #240]	; (80056a0 <USB_SetTurnaroundTime+0x120>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d306      	bcc.n	80055c0 <USB_SetTurnaroundTime+0x40>
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	4a3b      	ldr	r2, [pc, #236]	; (80056a4 <USB_SetTurnaroundTime+0x124>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d202      	bcs.n	80055c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80055ba:	230e      	movs	r3, #14
 80055bc:	617b      	str	r3, [r7, #20]
 80055be:	e057      	b.n	8005670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	4a38      	ldr	r2, [pc, #224]	; (80056a4 <USB_SetTurnaroundTime+0x124>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d306      	bcc.n	80055d6 <USB_SetTurnaroundTime+0x56>
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	4a37      	ldr	r2, [pc, #220]	; (80056a8 <USB_SetTurnaroundTime+0x128>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d202      	bcs.n	80055d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80055d0:	230d      	movs	r3, #13
 80055d2:	617b      	str	r3, [r7, #20]
 80055d4:	e04c      	b.n	8005670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	4a33      	ldr	r2, [pc, #204]	; (80056a8 <USB_SetTurnaroundTime+0x128>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d306      	bcc.n	80055ec <USB_SetTurnaroundTime+0x6c>
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	4a32      	ldr	r2, [pc, #200]	; (80056ac <USB_SetTurnaroundTime+0x12c>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d802      	bhi.n	80055ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80055e6:	230c      	movs	r3, #12
 80055e8:	617b      	str	r3, [r7, #20]
 80055ea:	e041      	b.n	8005670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	4a2f      	ldr	r2, [pc, #188]	; (80056ac <USB_SetTurnaroundTime+0x12c>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d906      	bls.n	8005602 <USB_SetTurnaroundTime+0x82>
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	4a2e      	ldr	r2, [pc, #184]	; (80056b0 <USB_SetTurnaroundTime+0x130>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d802      	bhi.n	8005602 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80055fc:	230b      	movs	r3, #11
 80055fe:	617b      	str	r3, [r7, #20]
 8005600:	e036      	b.n	8005670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	4a2a      	ldr	r2, [pc, #168]	; (80056b0 <USB_SetTurnaroundTime+0x130>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d906      	bls.n	8005618 <USB_SetTurnaroundTime+0x98>
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	4a29      	ldr	r2, [pc, #164]	; (80056b4 <USB_SetTurnaroundTime+0x134>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d802      	bhi.n	8005618 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005612:	230a      	movs	r3, #10
 8005614:	617b      	str	r3, [r7, #20]
 8005616:	e02b      	b.n	8005670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	4a26      	ldr	r2, [pc, #152]	; (80056b4 <USB_SetTurnaroundTime+0x134>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d906      	bls.n	800562e <USB_SetTurnaroundTime+0xae>
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	4a25      	ldr	r2, [pc, #148]	; (80056b8 <USB_SetTurnaroundTime+0x138>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d202      	bcs.n	800562e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005628:	2309      	movs	r3, #9
 800562a:	617b      	str	r3, [r7, #20]
 800562c:	e020      	b.n	8005670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	4a21      	ldr	r2, [pc, #132]	; (80056b8 <USB_SetTurnaroundTime+0x138>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d306      	bcc.n	8005644 <USB_SetTurnaroundTime+0xc4>
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	4a20      	ldr	r2, [pc, #128]	; (80056bc <USB_SetTurnaroundTime+0x13c>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d802      	bhi.n	8005644 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800563e:	2308      	movs	r3, #8
 8005640:	617b      	str	r3, [r7, #20]
 8005642:	e015      	b.n	8005670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	4a1d      	ldr	r2, [pc, #116]	; (80056bc <USB_SetTurnaroundTime+0x13c>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d906      	bls.n	800565a <USB_SetTurnaroundTime+0xda>
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	4a1c      	ldr	r2, [pc, #112]	; (80056c0 <USB_SetTurnaroundTime+0x140>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d202      	bcs.n	800565a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005654:	2307      	movs	r3, #7
 8005656:	617b      	str	r3, [r7, #20]
 8005658:	e00a      	b.n	8005670 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800565a:	2306      	movs	r3, #6
 800565c:	617b      	str	r3, [r7, #20]
 800565e:	e007      	b.n	8005670 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005660:	79fb      	ldrb	r3, [r7, #7]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d102      	bne.n	800566c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005666:	2309      	movs	r3, #9
 8005668:	617b      	str	r3, [r7, #20]
 800566a:	e001      	b.n	8005670 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800566c:	2309      	movs	r3, #9
 800566e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	68da      	ldr	r2, [r3, #12]
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	029b      	lsls	r3, r3, #10
 8005684:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005688:	431a      	orrs	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	371c      	adds	r7, #28
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	00d8acbf 	.word	0x00d8acbf
 80056a0:	00e4e1c0 	.word	0x00e4e1c0
 80056a4:	00f42400 	.word	0x00f42400
 80056a8:	01067380 	.word	0x01067380
 80056ac:	011a499f 	.word	0x011a499f
 80056b0:	01312cff 	.word	0x01312cff
 80056b4:	014ca43f 	.word	0x014ca43f
 80056b8:	016e3600 	.word	0x016e3600
 80056bc:	01a6ab1f 	.word	0x01a6ab1f
 80056c0:	01e84800 	.word	0x01e84800

080056c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f043 0201 	orr.w	r2, r3, #1
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b083      	sub	sp, #12
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f023 0201 	bic.w	r2, r3, #1
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	460b      	mov	r3, r1
 8005712:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005714:	2300      	movs	r3, #0
 8005716:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005724:	78fb      	ldrb	r3, [r7, #3]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d115      	bne.n	8005756 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005736:	200a      	movs	r0, #10
 8005738:	f7fb fbd4 	bl	8000ee4 <HAL_Delay>
      ms += 10U;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	330a      	adds	r3, #10
 8005740:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f001 f939 	bl	80069ba <USB_GetMode>
 8005748:	4603      	mov	r3, r0
 800574a:	2b01      	cmp	r3, #1
 800574c:	d01e      	beq.n	800578c <USB_SetCurrentMode+0x84>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2bc7      	cmp	r3, #199	; 0xc7
 8005752:	d9f0      	bls.n	8005736 <USB_SetCurrentMode+0x2e>
 8005754:	e01a      	b.n	800578c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005756:	78fb      	ldrb	r3, [r7, #3]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d115      	bne.n	8005788 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005768:	200a      	movs	r0, #10
 800576a:	f7fb fbbb 	bl	8000ee4 <HAL_Delay>
      ms += 10U;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	330a      	adds	r3, #10
 8005772:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f001 f920 	bl	80069ba <USB_GetMode>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d005      	beq.n	800578c <USB_SetCurrentMode+0x84>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2bc7      	cmp	r3, #199	; 0xc7
 8005784:	d9f0      	bls.n	8005768 <USB_SetCurrentMode+0x60>
 8005786:	e001      	b.n	800578c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e005      	b.n	8005798 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2bc8      	cmp	r3, #200	; 0xc8
 8005790:	d101      	bne.n	8005796 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e000      	b.n	8005798 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057a0:	b084      	sub	sp, #16
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b086      	sub	sp, #24
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
 80057aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80057ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80057b2:	2300      	movs	r3, #0
 80057b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80057ba:	2300      	movs	r3, #0
 80057bc:	613b      	str	r3, [r7, #16]
 80057be:	e009      	b.n	80057d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	3340      	adds	r3, #64	; 0x40
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	4413      	add	r3, r2
 80057ca:	2200      	movs	r2, #0
 80057cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	3301      	adds	r3, #1
 80057d2:	613b      	str	r3, [r7, #16]
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	2b0e      	cmp	r3, #14
 80057d8:	d9f2      	bls.n	80057c0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80057da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d11c      	bne.n	800581c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057f0:	f043 0302 	orr.w	r3, r3, #2
 80057f4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005806:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005812:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	639a      	str	r2, [r3, #56]	; 0x38
 800581a:	e00b      	b.n	8005834 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005820:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800583a:	461a      	mov	r2, r3
 800583c:	2300      	movs	r3, #0
 800583e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005840:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005844:	2b01      	cmp	r3, #1
 8005846:	d10d      	bne.n	8005864 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005848:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800584c:	2b00      	cmp	r3, #0
 800584e:	d104      	bne.n	800585a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005850:	2100      	movs	r1, #0
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f968 	bl	8005b28 <USB_SetDevSpeed>
 8005858:	e008      	b.n	800586c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800585a:	2101      	movs	r1, #1
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 f963 	bl	8005b28 <USB_SetDevSpeed>
 8005862:	e003      	b.n	800586c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005864:	2103      	movs	r1, #3
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f95e 	bl	8005b28 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800586c:	2110      	movs	r1, #16
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f8fa 	bl	8005a68 <USB_FlushTxFifo>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d001      	beq.n	800587e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f924 	bl	8005acc <USB_FlushRxFifo>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d001      	beq.n	800588e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005894:	461a      	mov	r2, r3
 8005896:	2300      	movs	r3, #0
 8005898:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a0:	461a      	mov	r2, r3
 80058a2:	2300      	movs	r3, #0
 80058a4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ac:	461a      	mov	r2, r3
 80058ae:	2300      	movs	r3, #0
 80058b0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058b2:	2300      	movs	r3, #0
 80058b4:	613b      	str	r3, [r7, #16]
 80058b6:	e043      	b.n	8005940 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058ce:	d118      	bne.n	8005902 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10a      	bne.n	80058ec <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	015a      	lsls	r2, r3, #5
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	4413      	add	r3, r2
 80058de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e2:	461a      	mov	r2, r3
 80058e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80058e8:	6013      	str	r3, [r2, #0]
 80058ea:	e013      	b.n	8005914 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	015a      	lsls	r2, r3, #5
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4413      	add	r3, r2
 80058f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f8:	461a      	mov	r2, r3
 80058fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80058fe:	6013      	str	r3, [r2, #0]
 8005900:	e008      	b.n	8005914 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	015a      	lsls	r2, r3, #5
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	4413      	add	r3, r2
 800590a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800590e:	461a      	mov	r2, r3
 8005910:	2300      	movs	r3, #0
 8005912:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	015a      	lsls	r2, r3, #5
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	4413      	add	r3, r2
 800591c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005920:	461a      	mov	r2, r3
 8005922:	2300      	movs	r3, #0
 8005924:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	015a      	lsls	r2, r3, #5
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	4413      	add	r3, r2
 800592e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005932:	461a      	mov	r2, r3
 8005934:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005938:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	3301      	adds	r3, #1
 800593e:	613b      	str	r3, [r7, #16]
 8005940:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005944:	461a      	mov	r2, r3
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	4293      	cmp	r3, r2
 800594a:	d3b5      	bcc.n	80058b8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800594c:	2300      	movs	r3, #0
 800594e:	613b      	str	r3, [r7, #16]
 8005950:	e043      	b.n	80059da <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	4413      	add	r3, r2
 800595a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005964:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005968:	d118      	bne.n	800599c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d10a      	bne.n	8005986 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	015a      	lsls	r2, r3, #5
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4413      	add	r3, r2
 8005978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597c:	461a      	mov	r2, r3
 800597e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005982:	6013      	str	r3, [r2, #0]
 8005984:	e013      	b.n	80059ae <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	015a      	lsls	r2, r3, #5
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	4413      	add	r3, r2
 800598e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005992:	461a      	mov	r2, r3
 8005994:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005998:	6013      	str	r3, [r2, #0]
 800599a:	e008      	b.n	80059ae <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	015a      	lsls	r2, r3, #5
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	4413      	add	r3, r2
 80059a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a8:	461a      	mov	r2, r3
 80059aa:	2300      	movs	r3, #0
 80059ac:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ba:	461a      	mov	r2, r3
 80059bc:	2300      	movs	r3, #0
 80059be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059cc:	461a      	mov	r2, r3
 80059ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	3301      	adds	r3, #1
 80059d8:	613b      	str	r3, [r7, #16]
 80059da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80059de:	461a      	mov	r2, r3
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d3b5      	bcc.n	8005952 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059f8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005a06:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005a08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d105      	bne.n	8005a1c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	f043 0210 	orr.w	r2, r3, #16
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	699a      	ldr	r2, [r3, #24]
 8005a20:	4b10      	ldr	r3, [pc, #64]	; (8005a64 <USB_DevInit+0x2c4>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005a28:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d005      	beq.n	8005a3c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	f043 0208 	orr.w	r2, r3, #8
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005a3c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d107      	bne.n	8005a54 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a4c:	f043 0304 	orr.w	r3, r3, #4
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005a54:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3718      	adds	r7, #24
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a60:	b004      	add	sp, #16
 8005a62:	4770      	bx	lr
 8005a64:	803c3800 	.word	0x803c3800

08005a68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a72:	2300      	movs	r3, #0
 8005a74:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005a82:	d901      	bls.n	8005a88 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e01b      	b.n	8005ac0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	daf2      	bge.n	8005a76 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005a90:	2300      	movs	r3, #0
 8005a92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	019b      	lsls	r3, r3, #6
 8005a98:	f043 0220 	orr.w	r2, r3, #32
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005aac:	d901      	bls.n	8005ab2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e006      	b.n	8005ac0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	f003 0320 	and.w	r3, r3, #32
 8005aba:	2b20      	cmp	r3, #32
 8005abc:	d0f0      	beq.n	8005aa0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3714      	adds	r7, #20
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	3301      	adds	r3, #1
 8005adc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005ae4:	d901      	bls.n	8005aea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e018      	b.n	8005b1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	daf2      	bge.n	8005ad8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005af2:	2300      	movs	r3, #0
 8005af4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2210      	movs	r2, #16
 8005afa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	3301      	adds	r3, #1
 8005b00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005b08:	d901      	bls.n	8005b0e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e006      	b.n	8005b1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	f003 0310 	and.w	r3, r3, #16
 8005b16:	2b10      	cmp	r3, #16
 8005b18:	d0f0      	beq.n	8005afc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3714      	adds	r7, #20
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	460b      	mov	r3, r1
 8005b32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	78fb      	ldrb	r3, [r7, #3]
 8005b42:	68f9      	ldr	r1, [r7, #12]
 8005b44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b087      	sub	sp, #28
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f003 0306 	and.w	r3, r3, #6
 8005b72:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d102      	bne.n	8005b80 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	75fb      	strb	r3, [r7, #23]
 8005b7e:	e00a      	b.n	8005b96 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d002      	beq.n	8005b8c <USB_GetDevSpeed+0x32>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2b06      	cmp	r3, #6
 8005b8a:	d102      	bne.n	8005b92 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	75fb      	strb	r3, [r7, #23]
 8005b90:	e001      	b.n	8005b96 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005b92:	230f      	movs	r3, #15
 8005b94:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	371c      	adds	r7, #28
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	785b      	ldrb	r3, [r3, #1]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d13a      	bne.n	8005c36 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bc6:	69da      	ldr	r2, [r3, #28]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	f003 030f 	and.w	r3, r3, #15
 8005bd0:	2101      	movs	r1, #1
 8005bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	68f9      	ldr	r1, [r7, #12]
 8005bda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bde:	4313      	orrs	r3, r2
 8005be0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d155      	bne.n	8005ca4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	791b      	ldrb	r3, [r3, #4]
 8005c12:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c14:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	059b      	lsls	r3, r3, #22
 8005c1a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	0151      	lsls	r1, r2, #5
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	440a      	add	r2, r1
 8005c26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c32:	6013      	str	r3, [r2, #0]
 8005c34:	e036      	b.n	8005ca4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c3c:	69da      	ldr	r2, [r3, #28]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	f003 030f 	and.w	r3, r3, #15
 8005c46:	2101      	movs	r1, #1
 8005c48:	fa01 f303 	lsl.w	r3, r1, r3
 8005c4c:	041b      	lsls	r3, r3, #16
 8005c4e:	68f9      	ldr	r1, [r7, #12]
 8005c50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c54:	4313      	orrs	r3, r2
 8005c56:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d11a      	bne.n	8005ca4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	791b      	ldrb	r3, [r3, #4]
 8005c88:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005c8a:	430b      	orrs	r3, r1
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	0151      	lsls	r1, r2, #5
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	440a      	add	r2, r1
 8005c96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ca2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
	...

08005cb4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	785b      	ldrb	r3, [r3, #1]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d161      	bne.n	8005d94 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	015a      	lsls	r2, r3, #5
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ce2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ce6:	d11f      	bne.n	8005d28 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	0151      	lsls	r1, r2, #5
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	440a      	add	r2, r1
 8005cfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d06:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	015a      	lsls	r2, r3, #5
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	4413      	add	r3, r2
 8005d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68ba      	ldr	r2, [r7, #8]
 8005d18:	0151      	lsls	r1, r2, #5
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	440a      	add	r2, r1
 8005d1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	f003 030f 	and.w	r3, r3, #15
 8005d38:	2101      	movs	r1, #1
 8005d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	43db      	mvns	r3, r3
 8005d42:	68f9      	ldr	r1, [r7, #12]
 8005d44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d48:	4013      	ands	r3, r2
 8005d4a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d52:	69da      	ldr	r2, [r3, #28]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	f003 030f 	and.w	r3, r3, #15
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	43db      	mvns	r3, r3
 8005d66:	68f9      	ldr	r1, [r7, #12]
 8005d68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	0159      	lsls	r1, r3, #5
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	440b      	add	r3, r1
 8005d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	4b35      	ldr	r3, [pc, #212]	; (8005e64 <USB_DeactivateEndpoint+0x1b0>)
 8005d8e:	4013      	ands	r3, r2
 8005d90:	600b      	str	r3, [r1, #0]
 8005d92:	e060      	b.n	8005e56 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005da6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005daa:	d11f      	bne.n	8005dec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	0151      	lsls	r1, r2, #5
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	440a      	add	r2, r1
 8005dc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005dca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	015a      	lsls	r2, r3, #5
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	0151      	lsls	r1, r2, #5
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	440a      	add	r2, r1
 8005de2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005de6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005dea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005df2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	f003 030f 	and.w	r3, r3, #15
 8005dfc:	2101      	movs	r1, #1
 8005dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8005e02:	041b      	lsls	r3, r3, #16
 8005e04:	43db      	mvns	r3, r3
 8005e06:	68f9      	ldr	r1, [r7, #12]
 8005e08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e16:	69da      	ldr	r2, [r3, #28]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	f003 030f 	and.w	r3, r3, #15
 8005e20:	2101      	movs	r1, #1
 8005e22:	fa01 f303 	lsl.w	r3, r1, r3
 8005e26:	041b      	lsls	r3, r3, #16
 8005e28:	43db      	mvns	r3, r3
 8005e2a:	68f9      	ldr	r1, [r7, #12]
 8005e2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e30:	4013      	ands	r3, r2
 8005e32:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	015a      	lsls	r2, r3, #5
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	0159      	lsls	r1, r3, #5
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	440b      	add	r3, r1
 8005e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e4e:	4619      	mov	r1, r3
 8005e50:	4b05      	ldr	r3, [pc, #20]	; (8005e68 <USB_DeactivateEndpoint+0x1b4>)
 8005e52:	4013      	ands	r3, r2
 8005e54:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3714      	adds	r7, #20
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr
 8005e64:	ec337800 	.word	0xec337800
 8005e68:	eff37800 	.word	0xeff37800

08005e6c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b08a      	sub	sp, #40	; 0x28
 8005e70:	af02      	add	r7, sp, #8
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	4613      	mov	r3, r2
 8005e78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	785b      	ldrb	r3, [r3, #1]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	f040 817a 	bne.w	8006182 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d132      	bne.n	8005efc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	69ba      	ldr	r2, [r7, #24]
 8005ea6:	0151      	lsls	r1, r2, #5
 8005ea8:	69fa      	ldr	r2, [r7, #28]
 8005eaa:	440a      	add	r2, r1
 8005eac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eb0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005eb4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005eb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	015a      	lsls	r2, r3, #5
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	0151      	lsls	r1, r2, #5
 8005ecc:	69fa      	ldr	r2, [r7, #28]
 8005ece:	440a      	add	r2, r1
 8005ed0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ed4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ed8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	69ba      	ldr	r2, [r7, #24]
 8005eea:	0151      	lsls	r1, r2, #5
 8005eec:	69fa      	ldr	r2, [r7, #28]
 8005eee:	440a      	add	r2, r1
 8005ef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ef4:	0cdb      	lsrs	r3, r3, #19
 8005ef6:	04db      	lsls	r3, r3, #19
 8005ef8:	6113      	str	r3, [r2, #16]
 8005efa:	e092      	b.n	8006022 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	015a      	lsls	r2, r3, #5
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	4413      	add	r3, r2
 8005f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	69ba      	ldr	r2, [r7, #24]
 8005f0c:	0151      	lsls	r1, r2, #5
 8005f0e:	69fa      	ldr	r2, [r7, #28]
 8005f10:	440a      	add	r2, r1
 8005f12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f16:	0cdb      	lsrs	r3, r3, #19
 8005f18:	04db      	lsls	r3, r3, #19
 8005f1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	69ba      	ldr	r2, [r7, #24]
 8005f2c:	0151      	lsls	r1, r2, #5
 8005f2e:	69fa      	ldr	r2, [r7, #28]
 8005f30:	440a      	add	r2, r1
 8005f32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f36:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f3a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f3e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d11a      	bne.n	8005f7c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	691a      	ldr	r2, [r3, #16]
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d903      	bls.n	8005f5a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	689a      	ldr	r2, [r3, #8]
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	69ba      	ldr	r2, [r7, #24]
 8005f6a:	0151      	lsls	r1, r2, #5
 8005f6c:	69fa      	ldr	r2, [r7, #28]
 8005f6e:	440a      	add	r2, r1
 8005f70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f78:	6113      	str	r3, [r2, #16]
 8005f7a:	e01b      	b.n	8005fb4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f88:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	6919      	ldr	r1, [r3, #16]
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	440b      	add	r3, r1
 8005f94:	1e59      	subs	r1, r3, #1
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f9e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005fa0:	4ba2      	ldr	r3, [pc, #648]	; (800622c <USB_EPStartXfer+0x3c0>)
 8005fa2:	400b      	ands	r3, r1
 8005fa4:	69b9      	ldr	r1, [r7, #24]
 8005fa6:	0148      	lsls	r0, r1, #5
 8005fa8:	69f9      	ldr	r1, [r7, #28]
 8005faa:	4401      	add	r1, r0
 8005fac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc0:	691a      	ldr	r2, [r3, #16]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fca:	69b9      	ldr	r1, [r7, #24]
 8005fcc:	0148      	lsls	r0, r1, #5
 8005fce:	69f9      	ldr	r1, [r7, #28]
 8005fd0:	4401      	add	r1, r0
 8005fd2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	791b      	ldrb	r3, [r3, #4]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d11f      	bne.n	8006022 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	015a      	lsls	r2, r3, #5
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	4413      	add	r3, r2
 8005fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	69ba      	ldr	r2, [r7, #24]
 8005ff2:	0151      	lsls	r1, r2, #5
 8005ff4:	69fa      	ldr	r2, [r7, #28]
 8005ff6:	440a      	add	r2, r1
 8005ff8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ffc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006000:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	015a      	lsls	r2, r3, #5
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	4413      	add	r3, r2
 800600a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	0151      	lsls	r1, r2, #5
 8006014:	69fa      	ldr	r2, [r7, #28]
 8006016:	440a      	add	r2, r1
 8006018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800601c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006020:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006022:	79fb      	ldrb	r3, [r7, #7]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d14b      	bne.n	80060c0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	69db      	ldr	r3, [r3, #28]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d009      	beq.n	8006044 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	4413      	add	r3, r2
 8006038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800603c:	461a      	mov	r2, r3
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	791b      	ldrb	r3, [r3, #4]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d128      	bne.n	800609e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006058:	2b00      	cmp	r3, #0
 800605a:	d110      	bne.n	800607e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	015a      	lsls	r2, r3, #5
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	4413      	add	r3, r2
 8006064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	69ba      	ldr	r2, [r7, #24]
 800606c:	0151      	lsls	r1, r2, #5
 800606e:	69fa      	ldr	r2, [r7, #28]
 8006070:	440a      	add	r2, r1
 8006072:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006076:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800607a:	6013      	str	r3, [r2, #0]
 800607c:	e00f      	b.n	800609e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	015a      	lsls	r2, r3, #5
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	4413      	add	r3, r2
 8006086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	69ba      	ldr	r2, [r7, #24]
 800608e:	0151      	lsls	r1, r2, #5
 8006090:	69fa      	ldr	r2, [r7, #28]
 8006092:	440a      	add	r2, r1
 8006094:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800609c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	015a      	lsls	r2, r3, #5
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	4413      	add	r3, r2
 80060a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	69ba      	ldr	r2, [r7, #24]
 80060ae:	0151      	lsls	r1, r2, #5
 80060b0:	69fa      	ldr	r2, [r7, #28]
 80060b2:	440a      	add	r2, r1
 80060b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060bc:	6013      	str	r3, [r2, #0]
 80060be:	e165      	b.n	800638c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	015a      	lsls	r2, r3, #5
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	4413      	add	r3, r2
 80060c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	69ba      	ldr	r2, [r7, #24]
 80060d0:	0151      	lsls	r1, r2, #5
 80060d2:	69fa      	ldr	r2, [r7, #28]
 80060d4:	440a      	add	r2, r1
 80060d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060de:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	791b      	ldrb	r3, [r3, #4]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d015      	beq.n	8006114 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 814d 	beq.w	800638c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	f003 030f 	and.w	r3, r3, #15
 8006102:	2101      	movs	r1, #1
 8006104:	fa01 f303 	lsl.w	r3, r1, r3
 8006108:	69f9      	ldr	r1, [r7, #28]
 800610a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800610e:	4313      	orrs	r3, r2
 8006110:	634b      	str	r3, [r1, #52]	; 0x34
 8006112:	e13b      	b.n	800638c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006120:	2b00      	cmp	r3, #0
 8006122:	d110      	bne.n	8006146 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	4413      	add	r3, r2
 800612c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	69ba      	ldr	r2, [r7, #24]
 8006134:	0151      	lsls	r1, r2, #5
 8006136:	69fa      	ldr	r2, [r7, #28]
 8006138:	440a      	add	r2, r1
 800613a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800613e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006142:	6013      	str	r3, [r2, #0]
 8006144:	e00f      	b.n	8006166 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	4413      	add	r3, r2
 800614e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	69ba      	ldr	r2, [r7, #24]
 8006156:	0151      	lsls	r1, r2, #5
 8006158:	69fa      	ldr	r2, [r7, #28]
 800615a:	440a      	add	r2, r1
 800615c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006164:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	68d9      	ldr	r1, [r3, #12]
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	781a      	ldrb	r2, [r3, #0]
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	b298      	uxth	r0, r3
 8006174:	79fb      	ldrb	r3, [r7, #7]
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	4603      	mov	r3, r0
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f000 f9b8 	bl	80064f0 <USB_WritePacket>
 8006180:	e104      	b.n	800638c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	015a      	lsls	r2, r3, #5
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	4413      	add	r3, r2
 800618a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	69ba      	ldr	r2, [r7, #24]
 8006192:	0151      	lsls	r1, r2, #5
 8006194:	69fa      	ldr	r2, [r7, #28]
 8006196:	440a      	add	r2, r1
 8006198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800619c:	0cdb      	lsrs	r3, r3, #19
 800619e:	04db      	lsls	r3, r3, #19
 80061a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	015a      	lsls	r2, r3, #5
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	4413      	add	r3, r2
 80061aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	69ba      	ldr	r2, [r7, #24]
 80061b2:	0151      	lsls	r1, r2, #5
 80061b4:	69fa      	ldr	r2, [r7, #28]
 80061b6:	440a      	add	r2, r1
 80061b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061c4:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d131      	bne.n	8006230 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d003      	beq.n	80061dc <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	689a      	ldr	r2, [r3, #8]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	689a      	ldr	r2, [r3, #8]
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	015a      	lsls	r2, r3, #5
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	4413      	add	r3, r2
 80061ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f0:	691a      	ldr	r2, [r3, #16]
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061fa:	69b9      	ldr	r1, [r7, #24]
 80061fc:	0148      	lsls	r0, r1, #5
 80061fe:	69f9      	ldr	r1, [r7, #28]
 8006200:	4401      	add	r1, r0
 8006202:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006206:	4313      	orrs	r3, r2
 8006208:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	015a      	lsls	r2, r3, #5
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	4413      	add	r3, r2
 8006212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	69ba      	ldr	r2, [r7, #24]
 800621a:	0151      	lsls	r1, r2, #5
 800621c:	69fa      	ldr	r2, [r7, #28]
 800621e:	440a      	add	r2, r1
 8006220:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006224:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006228:	6113      	str	r3, [r2, #16]
 800622a:	e061      	b.n	80062f0 <USB_EPStartXfer+0x484>
 800622c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d123      	bne.n	8006280 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	015a      	lsls	r2, r3, #5
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	4413      	add	r3, r2
 8006240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006244:	691a      	ldr	r2, [r3, #16]
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800624e:	69b9      	ldr	r1, [r7, #24]
 8006250:	0148      	lsls	r0, r1, #5
 8006252:	69f9      	ldr	r1, [r7, #28]
 8006254:	4401      	add	r1, r0
 8006256:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800625a:	4313      	orrs	r3, r2
 800625c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	015a      	lsls	r2, r3, #5
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	4413      	add	r3, r2
 8006266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	69ba      	ldr	r2, [r7, #24]
 800626e:	0151      	lsls	r1, r2, #5
 8006270:	69fa      	ldr	r2, [r7, #28]
 8006272:	440a      	add	r2, r1
 8006274:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006278:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800627c:	6113      	str	r3, [r2, #16]
 800627e:	e037      	b.n	80062f0 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	691a      	ldr	r2, [r3, #16]
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	4413      	add	r3, r2
 800628a:	1e5a      	subs	r2, r3, #1
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	fbb2 f3f3 	udiv	r3, r2, r3
 8006294:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	8afa      	ldrh	r2, [r7, #22]
 800629c:	fb03 f202 	mul.w	r2, r3, r2
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b0:	691a      	ldr	r2, [r3, #16]
 80062b2:	8afb      	ldrh	r3, [r7, #22]
 80062b4:	04d9      	lsls	r1, r3, #19
 80062b6:	4b38      	ldr	r3, [pc, #224]	; (8006398 <USB_EPStartXfer+0x52c>)
 80062b8:	400b      	ands	r3, r1
 80062ba:	69b9      	ldr	r1, [r7, #24]
 80062bc:	0148      	lsls	r0, r1, #5
 80062be:	69f9      	ldr	r1, [r7, #28]
 80062c0:	4401      	add	r1, r0
 80062c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062c6:	4313      	orrs	r3, r2
 80062c8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	015a      	lsls	r2, r3, #5
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	4413      	add	r3, r2
 80062d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d6:	691a      	ldr	r2, [r3, #16]
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062e0:	69b9      	ldr	r1, [r7, #24]
 80062e2:	0148      	lsls	r0, r1, #5
 80062e4:	69f9      	ldr	r1, [r7, #28]
 80062e6:	4401      	add	r1, r0
 80062e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062ec:	4313      	orrs	r3, r2
 80062ee:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80062f0:	79fb      	ldrb	r3, [r7, #7]
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d10d      	bne.n	8006312 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d009      	beq.n	8006312 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	68d9      	ldr	r1, [r3, #12]
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	015a      	lsls	r2, r3, #5
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	4413      	add	r3, r2
 800630a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800630e:	460a      	mov	r2, r1
 8006310:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	791b      	ldrb	r3, [r3, #4]
 8006316:	2b01      	cmp	r3, #1
 8006318:	d128      	bne.n	800636c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006326:	2b00      	cmp	r3, #0
 8006328:	d110      	bne.n	800634c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	015a      	lsls	r2, r3, #5
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	4413      	add	r3, r2
 8006332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	69ba      	ldr	r2, [r7, #24]
 800633a:	0151      	lsls	r1, r2, #5
 800633c:	69fa      	ldr	r2, [r7, #28]
 800633e:	440a      	add	r2, r1
 8006340:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006344:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006348:	6013      	str	r3, [r2, #0]
 800634a:	e00f      	b.n	800636c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	015a      	lsls	r2, r3, #5
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	4413      	add	r3, r2
 8006354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	69ba      	ldr	r2, [r7, #24]
 800635c:	0151      	lsls	r1, r2, #5
 800635e:	69fa      	ldr	r2, [r7, #28]
 8006360:	440a      	add	r2, r1
 8006362:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800636a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	4413      	add	r3, r2
 8006374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	69ba      	ldr	r2, [r7, #24]
 800637c:	0151      	lsls	r1, r2, #5
 800637e:	69fa      	ldr	r2, [r7, #28]
 8006380:	440a      	add	r2, r1
 8006382:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006386:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800638a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3720      	adds	r7, #32
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	1ff80000 	.word	0x1ff80000

0800639c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800639c:	b480      	push	{r7}
 800639e:	b087      	sub	sp, #28
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80063a6:	2300      	movs	r3, #0
 80063a8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	785b      	ldrb	r3, [r3, #1]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d14a      	bne.n	8006450 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063d2:	f040 8086 	bne.w	80064e2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	7812      	ldrb	r2, [r2, #0]
 80063ea:	0151      	lsls	r1, r2, #5
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	440a      	add	r2, r1
 80063f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80063f8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	015a      	lsls	r2, r3, #5
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	4413      	add	r3, r2
 8006404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	683a      	ldr	r2, [r7, #0]
 800640c:	7812      	ldrb	r2, [r2, #0]
 800640e:	0151      	lsls	r1, r2, #5
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	440a      	add	r2, r1
 8006414:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006418:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800641c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	3301      	adds	r3, #1
 8006422:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f242 7210 	movw	r2, #10000	; 0x2710
 800642a:	4293      	cmp	r3, r2
 800642c:	d902      	bls.n	8006434 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	75fb      	strb	r3, [r7, #23]
          break;
 8006432:	e056      	b.n	80064e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	015a      	lsls	r2, r3, #5
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	4413      	add	r3, r2
 800643e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006448:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800644c:	d0e7      	beq.n	800641e <USB_EPStopXfer+0x82>
 800644e:	e048      	b.n	80064e2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	4413      	add	r3, r2
 800645a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006464:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006468:	d13b      	bne.n	80064e2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	015a      	lsls	r2, r3, #5
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	4413      	add	r3, r2
 8006474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	683a      	ldr	r2, [r7, #0]
 800647c:	7812      	ldrb	r2, [r2, #0]
 800647e:	0151      	lsls	r1, r2, #5
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	440a      	add	r2, r1
 8006484:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006488:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800648c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	015a      	lsls	r2, r3, #5
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	4413      	add	r3, r2
 8006498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	7812      	ldrb	r2, [r2, #0]
 80064a2:	0151      	lsls	r1, r2, #5
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	440a      	add	r2, r1
 80064a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	3301      	adds	r3, #1
 80064b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80064be:	4293      	cmp	r3, r2
 80064c0:	d902      	bls.n	80064c8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	75fb      	strb	r3, [r7, #23]
          break;
 80064c6:	e00c      	b.n	80064e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	015a      	lsls	r2, r3, #5
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	4413      	add	r3, r2
 80064d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064e0:	d0e7      	beq.n	80064b2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80064e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	371c      	adds	r7, #28
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b089      	sub	sp, #36	; 0x24
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	4611      	mov	r1, r2
 80064fc:	461a      	mov	r2, r3
 80064fe:	460b      	mov	r3, r1
 8006500:	71fb      	strb	r3, [r7, #7]
 8006502:	4613      	mov	r3, r2
 8006504:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800650e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006512:	2b00      	cmp	r3, #0
 8006514:	d123      	bne.n	800655e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006516:	88bb      	ldrh	r3, [r7, #4]
 8006518:	3303      	adds	r3, #3
 800651a:	089b      	lsrs	r3, r3, #2
 800651c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800651e:	2300      	movs	r3, #0
 8006520:	61bb      	str	r3, [r7, #24]
 8006522:	e018      	b.n	8006556 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006524:	79fb      	ldrb	r3, [r7, #7]
 8006526:	031a      	lsls	r2, r3, #12
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	4413      	add	r3, r2
 800652c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006530:	461a      	mov	r2, r3
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	3301      	adds	r3, #1
 800653c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	3301      	adds	r3, #1
 8006542:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	3301      	adds	r3, #1
 8006548:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	3301      	adds	r3, #1
 800654e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	3301      	adds	r3, #1
 8006554:	61bb      	str	r3, [r7, #24]
 8006556:	69ba      	ldr	r2, [r7, #24]
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	429a      	cmp	r2, r3
 800655c:	d3e2      	bcc.n	8006524 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3724      	adds	r7, #36	; 0x24
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800656c:	b480      	push	{r7}
 800656e:	b08b      	sub	sp, #44	; 0x2c
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	4613      	mov	r3, r2
 8006578:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006582:	88fb      	ldrh	r3, [r7, #6]
 8006584:	089b      	lsrs	r3, r3, #2
 8006586:	b29b      	uxth	r3, r3
 8006588:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800658a:	88fb      	ldrh	r3, [r7, #6]
 800658c:	f003 0303 	and.w	r3, r3, #3
 8006590:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006592:	2300      	movs	r3, #0
 8006594:	623b      	str	r3, [r7, #32]
 8006596:	e014      	b.n	80065c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	3301      	adds	r3, #1
 80065a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	3301      	adds	r3, #1
 80065ae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	3301      	adds	r3, #1
 80065b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	3301      	adds	r3, #1
 80065ba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80065bc:	6a3b      	ldr	r3, [r7, #32]
 80065be:	3301      	adds	r3, #1
 80065c0:	623b      	str	r3, [r7, #32]
 80065c2:	6a3a      	ldr	r2, [r7, #32]
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d3e6      	bcc.n	8006598 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80065ca:	8bfb      	ldrh	r3, [r7, #30]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d01e      	beq.n	800660e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80065d0:	2300      	movs	r3, #0
 80065d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065da:	461a      	mov	r2, r3
 80065dc:	f107 0310 	add.w	r3, r7, #16
 80065e0:	6812      	ldr	r2, [r2, #0]
 80065e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	6a3b      	ldr	r3, [r7, #32]
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	00db      	lsls	r3, r3, #3
 80065ec:	fa22 f303 	lsr.w	r3, r2, r3
 80065f0:	b2da      	uxtb	r2, r3
 80065f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f4:	701a      	strb	r2, [r3, #0]
      i++;
 80065f6:	6a3b      	ldr	r3, [r7, #32]
 80065f8:	3301      	adds	r3, #1
 80065fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80065fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fe:	3301      	adds	r3, #1
 8006600:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006602:	8bfb      	ldrh	r3, [r7, #30]
 8006604:	3b01      	subs	r3, #1
 8006606:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006608:	8bfb      	ldrh	r3, [r7, #30]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1ea      	bne.n	80065e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800660e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006610:	4618      	mov	r0, r3
 8006612:	372c      	adds	r7, #44	; 0x2c
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	785b      	ldrb	r3, [r3, #1]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d12c      	bne.n	8006692 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	015a      	lsls	r2, r3, #5
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4413      	add	r3, r2
 8006640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	db12      	blt.n	8006670 <USB_EPSetStall+0x54>
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00f      	beq.n	8006670 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	4413      	add	r3, r2
 8006658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	0151      	lsls	r1, r2, #5
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	440a      	add	r2, r1
 8006666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800666a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800666e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	015a      	lsls	r2, r3, #5
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	4413      	add	r3, r2
 8006678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	0151      	lsls	r1, r2, #5
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	440a      	add	r2, r1
 8006686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800668a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800668e:	6013      	str	r3, [r2, #0]
 8006690:	e02b      	b.n	80066ea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	015a      	lsls	r2, r3, #5
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	4413      	add	r3, r2
 800669a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	db12      	blt.n	80066ca <USB_EPSetStall+0xae>
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00f      	beq.n	80066ca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68ba      	ldr	r2, [r7, #8]
 80066ba:	0151      	lsls	r1, r2, #5
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	440a      	add	r2, r1
 80066c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066c8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68ba      	ldr	r2, [r7, #8]
 80066da:	0151      	lsls	r1, r2, #5
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	440a      	add	r2, r1
 80066e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3714      	adds	r7, #20
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	785b      	ldrb	r3, [r3, #1]
 8006710:	2b01      	cmp	r3, #1
 8006712:	d128      	bne.n	8006766 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4413      	add	r3, r2
 800671c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68ba      	ldr	r2, [r7, #8]
 8006724:	0151      	lsls	r1, r2, #5
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	440a      	add	r2, r1
 800672a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800672e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006732:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	791b      	ldrb	r3, [r3, #4]
 8006738:	2b03      	cmp	r3, #3
 800673a:	d003      	beq.n	8006744 <USB_EPClearStall+0x4c>
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	791b      	ldrb	r3, [r3, #4]
 8006740:	2b02      	cmp	r3, #2
 8006742:	d138      	bne.n	80067b6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	015a      	lsls	r2, r3, #5
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	4413      	add	r3, r2
 800674c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68ba      	ldr	r2, [r7, #8]
 8006754:	0151      	lsls	r1, r2, #5
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	440a      	add	r2, r1
 800675a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800675e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006762:	6013      	str	r3, [r2, #0]
 8006764:	e027      	b.n	80067b6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	015a      	lsls	r2, r3, #5
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	4413      	add	r3, r2
 800676e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	0151      	lsls	r1, r2, #5
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	440a      	add	r2, r1
 800677c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006780:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006784:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	791b      	ldrb	r3, [r3, #4]
 800678a:	2b03      	cmp	r3, #3
 800678c:	d003      	beq.n	8006796 <USB_EPClearStall+0x9e>
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	791b      	ldrb	r3, [r3, #4]
 8006792:	2b02      	cmp	r3, #2
 8006794:	d10f      	bne.n	80067b6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	015a      	lsls	r2, r3, #5
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	4413      	add	r3, r2
 800679e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68ba      	ldr	r2, [r7, #8]
 80067a6:	0151      	lsls	r1, r2, #5
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	440a      	add	r2, r1
 80067ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067b4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3714      	adds	r7, #20
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	460b      	mov	r3, r1
 80067ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067e2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80067e6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	78fb      	ldrb	r3, [r7, #3]
 80067f2:	011b      	lsls	r3, r3, #4
 80067f4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80067f8:	68f9      	ldr	r1, [r7, #12]
 80067fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067fe:	4313      	orrs	r3, r2
 8006800:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3714      	adds	r7, #20
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800682a:	f023 0303 	bic.w	r3, r3, #3
 800682e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800683e:	f023 0302 	bic.w	r3, r3, #2
 8006842:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3714      	adds	r7, #20
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr

08006852 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006852:	b480      	push	{r7}
 8006854:	b085      	sub	sp, #20
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800686c:	f023 0303 	bic.w	r3, r3, #3
 8006870:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006880:	f043 0302 	orr.w	r3, r3, #2
 8006884:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3714      	adds	r7, #20
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	695b      	ldr	r3, [r3, #20]
 80068a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	4013      	ands	r3, r2
 80068aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80068ac:	68fb      	ldr	r3, [r7, #12]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3714      	adds	r7, #20
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b085      	sub	sp, #20
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d6:	69db      	ldr	r3, [r3, #28]
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	4013      	ands	r3, r2
 80068dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	0c1b      	lsrs	r3, r3, #16
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3714      	adds	r7, #20
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr

080068ee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80068ee:	b480      	push	{r7}
 80068f0:	b085      	sub	sp, #20
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800690a:	69db      	ldr	r3, [r3, #28]
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	4013      	ands	r3, r2
 8006910:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	b29b      	uxth	r3, r3
}
 8006916:	4618      	mov	r0, r3
 8006918:	3714      	adds	r7, #20
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006922:	b480      	push	{r7}
 8006924:	b085      	sub	sp, #20
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
 800692a:	460b      	mov	r3, r1
 800692c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006932:	78fb      	ldrb	r3, [r7, #3]
 8006934:	015a      	lsls	r2, r3, #5
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	4413      	add	r3, r2
 800693a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	4013      	ands	r3, r2
 800694e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006950:	68bb      	ldr	r3, [r7, #8]
}
 8006952:	4618      	mov	r0, r3
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr

0800695e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800695e:	b480      	push	{r7}
 8006960:	b087      	sub	sp, #28
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
 8006966:	460b      	mov	r3, r1
 8006968:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800697e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006980:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006982:	78fb      	ldrb	r3, [r7, #3]
 8006984:	f003 030f 	and.w	r3, r3, #15
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	fa22 f303 	lsr.w	r3, r2, r3
 800698e:	01db      	lsls	r3, r3, #7
 8006990:	b2db      	uxtb	r3, r3
 8006992:	693a      	ldr	r2, [r7, #16]
 8006994:	4313      	orrs	r3, r2
 8006996:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006998:	78fb      	ldrb	r3, [r7, #3]
 800699a:	015a      	lsls	r2, r3, #5
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	4013      	ands	r3, r2
 80069aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80069ac:	68bb      	ldr	r3, [r7, #8]
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	371c      	adds	r7, #28
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr

080069ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80069ba:	b480      	push	{r7}
 80069bc:	b083      	sub	sp, #12
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	f003 0301 	and.w	r3, r3, #1
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	370c      	adds	r7, #12
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr

080069d6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80069d6:	b480      	push	{r7}
 80069d8:	b085      	sub	sp, #20
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069f0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80069f4:	f023 0307 	bic.w	r3, r3, #7
 80069f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3714      	adds	r7, #20
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b087      	sub	sp, #28
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	460b      	mov	r3, r1
 8006a26:	607a      	str	r2, [r7, #4]
 8006a28:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	333c      	adds	r3, #60	; 0x3c
 8006a32:	3304      	adds	r3, #4
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	4a26      	ldr	r2, [pc, #152]	; (8006ad4 <USB_EP0_OutStart+0xb8>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d90a      	bls.n	8006a56 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a50:	d101      	bne.n	8006a56 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006a52:	2300      	movs	r3, #0
 8006a54:	e037      	b.n	8006ac6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	2300      	movs	r3, #0
 8006a60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a84:	f043 0318 	orr.w	r3, r3, #24
 8006a88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	697a      	ldr	r2, [r7, #20]
 8006a94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a98:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006a9c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006a9e:	7afb      	ldrb	r3, [r7, #11]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d10f      	bne.n	8006ac4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aaa:	461a      	mov	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	697a      	ldr	r2, [r7, #20]
 8006aba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006abe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006ac2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	371c      	adds	r7, #28
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	4f54300a 	.word	0x4f54300a

08006ad8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006af0:	d901      	bls.n	8006af6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e01b      	b.n	8006b2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	daf2      	bge.n	8006ae4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006afe:	2300      	movs	r3, #0
 8006b00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	f043 0201 	orr.w	r2, r3, #1
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	3301      	adds	r3, #1
 8006b12:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006b1a:	d901      	bls.n	8006b20 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	e006      	b.n	8006b2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	f003 0301 	and.w	r3, r3, #1
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d0f0      	beq.n	8006b0e <USB_CoreReset+0x36>

  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3714      	adds	r7, #20
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
	...

08006b3c <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	460b      	mov	r3, r1
 8006b46:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8006b48:	201c      	movs	r0, #28
 8006b4a:	f002 fb5d 	bl	8009208 <USBD_static_malloc>
 8006b4e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d109      	bne.n	8006b6a <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	32b0      	adds	r2, #176	; 0xb0
 8006b60:	2100      	movs	r1, #0
 8006b62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006b66:	2302      	movs	r3, #2
 8006b68:	e08a      	b.n	8006c80 <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	32b0      	adds	r2, #176	; 0xb0
 8006b74:	68f9      	ldr	r1, [r7, #12]
 8006b76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	32b0      	adds	r2, #176	; 0xb0
 8006b84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	7c1b      	ldrb	r3, [r3, #16]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d11b      	bne.n	8006bce <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006b96:	4b3c      	ldr	r3, [pc, #240]	; (8006c88 <USBD_CUSTOM_HID_Init+0x14c>)
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	f003 020f 	and.w	r2, r3, #15
 8006b9e:	6879      	ldr	r1, [r7, #4]
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	4413      	add	r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	440b      	add	r3, r1
 8006baa:	3326      	adds	r3, #38	; 0x26
 8006bac:	2205      	movs	r2, #5
 8006bae:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006bb0:	4b36      	ldr	r3, [pc, #216]	; (8006c8c <USBD_CUSTOM_HID_Init+0x150>)
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	f003 020f 	and.w	r2, r3, #15
 8006bb8:	6879      	ldr	r1, [r7, #4]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	4413      	add	r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	440b      	add	r3, r1
 8006bc4:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006bc8:	2205      	movs	r2, #5
 8006bca:	801a      	strh	r2, [r3, #0]
 8006bcc:	e01a      	b.n	8006c04 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006bce:	4b2e      	ldr	r3, [pc, #184]	; (8006c88 <USBD_CUSTOM_HID_Init+0x14c>)
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	f003 020f 	and.w	r2, r3, #15
 8006bd6:	6879      	ldr	r1, [r7, #4]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4413      	add	r3, r2
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	440b      	add	r3, r1
 8006be2:	3326      	adds	r3, #38	; 0x26
 8006be4:	2205      	movs	r2, #5
 8006be6:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006be8:	4b28      	ldr	r3, [pc, #160]	; (8006c8c <USBD_CUSTOM_HID_Init+0x150>)
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	f003 020f 	and.w	r2, r3, #15
 8006bf0:	6879      	ldr	r1, [r7, #4]
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	4413      	add	r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	440b      	add	r3, r1
 8006bfc:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006c00:	2205      	movs	r2, #5
 8006c02:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8006c04:	4b20      	ldr	r3, [pc, #128]	; (8006c88 <USBD_CUSTOM_HID_Init+0x14c>)
 8006c06:	7819      	ldrb	r1, [r3, #0]
 8006c08:	2320      	movs	r3, #32
 8006c0a:	2203      	movs	r2, #3
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f002 f9ea 	bl	8008fe6 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8006c12:	4b1d      	ldr	r3, [pc, #116]	; (8006c88 <USBD_CUSTOM_HID_Init+0x14c>)
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	f003 020f 	and.w	r2, r3, #15
 8006c1a:	6879      	ldr	r1, [r7, #4]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4413      	add	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	440b      	add	r3, r1
 8006c26:	3324      	adds	r3, #36	; 0x24
 8006c28:	2201      	movs	r2, #1
 8006c2a:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8006c2c:	4b17      	ldr	r3, [pc, #92]	; (8006c8c <USBD_CUSTOM_HID_Init+0x150>)
 8006c2e:	7819      	ldrb	r1, [r3, #0]
 8006c30:	2308      	movs	r3, #8
 8006c32:	2203      	movs	r2, #3
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f002 f9d6 	bl	8008fe6 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8006c3a:	4b14      	ldr	r3, [pc, #80]	; (8006c8c <USBD_CUSTOM_HID_Init+0x150>)
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	f003 020f 	and.w	r2, r3, #15
 8006c42:	6879      	ldr	r1, [r7, #4]
 8006c44:	4613      	mov	r3, r2
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	4413      	add	r3, r2
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	440b      	add	r3, r1
 8006c4e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c52:	2201      	movs	r2, #1
 8006c54:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	761a      	strb	r2, [r3, #24]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	33b0      	adds	r3, #176	; 0xb0
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	4413      	add	r3, r2
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8006c70:	4b06      	ldr	r3, [pc, #24]	; (8006c8c <USBD_CUSTOM_HID_Init+0x150>)
 8006c72:	7819      	ldrb	r1, [r3, #0]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	2308      	movs	r3, #8
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f002 faa3 	bl	80091c4 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3710      	adds	r7, #16
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	200000f6 	.word	0x200000f6
 8006c8c:	200000f7 	.word	0x200000f7

08006c90 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	460b      	mov	r3, r1
 8006c9a:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8006c9c:	4b37      	ldr	r3, [pc, #220]	; (8006d7c <USBD_CUSTOM_HID_DeInit+0xec>)
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f002 f9c5 	bl	8009032 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8006ca8:	4b34      	ldr	r3, [pc, #208]	; (8006d7c <USBD_CUSTOM_HID_DeInit+0xec>)
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	f003 020f 	and.w	r2, r3, #15
 8006cb0:	6879      	ldr	r1, [r7, #4]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	440b      	add	r3, r1
 8006cbc:	3324      	adds	r3, #36	; 0x24
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8006cc2:	4b2e      	ldr	r3, [pc, #184]	; (8006d7c <USBD_CUSTOM_HID_DeInit+0xec>)
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	f003 020f 	and.w	r2, r3, #15
 8006cca:	6879      	ldr	r1, [r7, #4]
 8006ccc:	4613      	mov	r3, r2
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	4413      	add	r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	440b      	add	r3, r1
 8006cd6:	3326      	adds	r3, #38	; 0x26
 8006cd8:	2200      	movs	r2, #0
 8006cda:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8006cdc:	4b28      	ldr	r3, [pc, #160]	; (8006d80 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f002 f9a5 	bl	8009032 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8006ce8:	4b25      	ldr	r3, [pc, #148]	; (8006d80 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	f003 020f 	and.w	r2, r3, #15
 8006cf0:	6879      	ldr	r1, [r7, #4]
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	4413      	add	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	440b      	add	r3, r1
 8006cfc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d00:	2200      	movs	r2, #0
 8006d02:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8006d04:	4b1e      	ldr	r3, [pc, #120]	; (8006d80 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	f003 020f 	and.w	r2, r3, #15
 8006d0c:	6879      	ldr	r1, [r7, #4]
 8006d0e:	4613      	mov	r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4413      	add	r3, r2
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	440b      	add	r3, r1
 8006d18:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	32b0      	adds	r2, #176	; 0xb0
 8006d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d01f      	beq.n	8006d72 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	33b0      	adds	r3, #176	; 0xb0
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4413      	add	r3, r2
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	32b0      	adds	r2, #176	; 0xb0
 8006d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d54:	4618      	mov	r0, r3
 8006d56:	f002 fa65 	bl	8009224 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	32b0      	adds	r2, #176	; 0xb0
 8006d64:	2100      	movs	r1, #0
 8006d66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3708      	adds	r7, #8
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	200000f6 	.word	0x200000f6
 8006d80:	200000f7 	.word	0x200000f7

08006d84 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b088      	sub	sp, #32
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	32b0      	adds	r2, #176	; 0xb0
 8006d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d9c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8006da2:	2300      	movs	r3, #0
 8006da4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006da6:	2300      	movs	r3, #0
 8006da8:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006daa:	2300      	movs	r3, #0
 8006dac:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d101      	bne.n	8006db8 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8006db4:	2303      	movs	r3, #3
 8006db6:	e0f8      	b.n	8006faa <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d056      	beq.n	8006e72 <USBD_CUSTOM_HID_Setup+0xee>
 8006dc4:	2b20      	cmp	r3, #32
 8006dc6:	f040 80e8 	bne.w	8006f9a <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	785b      	ldrb	r3, [r3, #1]
 8006dce:	3b02      	subs	r3, #2
 8006dd0:	2b09      	cmp	r3, #9
 8006dd2:	d846      	bhi.n	8006e62 <USBD_CUSTOM_HID_Setup+0xde>
 8006dd4:	a201      	add	r2, pc, #4	; (adr r2, 8006ddc <USBD_CUSTOM_HID_Setup+0x58>)
 8006dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dda:	bf00      	nop
 8006ddc:	08006e35 	.word	0x08006e35
 8006de0:	08006e13 	.word	0x08006e13
 8006de4:	08006e63 	.word	0x08006e63
 8006de8:	08006e63 	.word	0x08006e63
 8006dec:	08006e63 	.word	0x08006e63
 8006df0:	08006e63 	.word	0x08006e63
 8006df4:	08006e63 	.word	0x08006e63
 8006df8:	08006e45 	.word	0x08006e45
 8006dfc:	08006e23 	.word	0x08006e23
 8006e00:	08006e05 	.word	0x08006e05
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	885b      	ldrh	r3, [r3, #2]
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	609a      	str	r2, [r3, #8]
          break;
 8006e10:	e02e      	b.n	8006e70 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	3308      	adds	r3, #8
 8006e16:	2201      	movs	r2, #1
 8006e18:	4619      	mov	r1, r3
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f001 fcc6 	bl	80087ac <USBD_CtlSendData>
          break;
 8006e20:	e026      	b.n	8006e70 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	885b      	ldrh	r3, [r3, #2]
 8006e26:	0a1b      	lsrs	r3, r3, #8
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	60da      	str	r2, [r3, #12]
          break;
 8006e32:	e01d      	b.n	8006e70 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	330c      	adds	r3, #12
 8006e38:	2201      	movs	r2, #1
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f001 fcb5 	bl	80087ac <USBD_CtlSendData>
          break;
 8006e42:	e015      	b.n	8006e70 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	2201      	movs	r2, #1
 8006e48:	615a      	str	r2, [r3, #20]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8006e4a:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	88db      	ldrh	r3, [r3, #6]
 8006e50:	2b08      	cmp	r3, #8
 8006e52:	bf28      	it	cs
 8006e54:	2308      	movcs	r3, #8
 8006e56:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8006e58:	461a      	mov	r2, r3
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f001 fcd2 	bl	8008804 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8006e60:	e006      	b.n	8006e70 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8006e62:	6839      	ldr	r1, [r7, #0]
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f001 fc30 	bl	80086ca <USBD_CtlError>
          ret = USBD_FAIL;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	75fb      	strb	r3, [r7, #23]
          break;
 8006e6e:	bf00      	nop
      }
      break;
 8006e70:	e09a      	b.n	8006fa8 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	785b      	ldrb	r3, [r3, #1]
 8006e76:	2b0b      	cmp	r3, #11
 8006e78:	f200 8086 	bhi.w	8006f88 <USBD_CUSTOM_HID_Setup+0x204>
 8006e7c:	a201      	add	r2, pc, #4	; (adr r2, 8006e84 <USBD_CUSTOM_HID_Setup+0x100>)
 8006e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e82:	bf00      	nop
 8006e84:	08006eb5 	.word	0x08006eb5
 8006e88:	08006f97 	.word	0x08006f97
 8006e8c:	08006f89 	.word	0x08006f89
 8006e90:	08006f89 	.word	0x08006f89
 8006e94:	08006f89 	.word	0x08006f89
 8006e98:	08006f89 	.word	0x08006f89
 8006e9c:	08006edf 	.word	0x08006edf
 8006ea0:	08006f89 	.word	0x08006f89
 8006ea4:	08006f89 	.word	0x08006f89
 8006ea8:	08006f89 	.word	0x08006f89
 8006eac:	08006f37 	.word	0x08006f37
 8006eb0:	08006f61 	.word	0x08006f61
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	2b03      	cmp	r3, #3
 8006ebe:	d107      	bne.n	8006ed0 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006ec0:	f107 030e 	add.w	r3, r7, #14
 8006ec4:	2202      	movs	r2, #2
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f001 fc6f 	bl	80087ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ece:	e063      	b.n	8006f98 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006ed0:	6839      	ldr	r1, [r7, #0]
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f001 fbf9 	bl	80086ca <USBD_CtlError>
            ret = USBD_FAIL;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	75fb      	strb	r3, [r7, #23]
          break;
 8006edc:	e05c      	b.n	8006f98 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	885b      	ldrh	r3, [r3, #2]
 8006ee2:	0a1b      	lsrs	r3, r3, #8
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	2b22      	cmp	r3, #34	; 0x22
 8006ee8:	d110      	bne.n	8006f0c <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	88db      	ldrh	r3, [r3, #6]
 8006eee:	2b79      	cmp	r3, #121	; 0x79
 8006ef0:	bf28      	it	cs
 8006ef2:	2379      	movcs	r3, #121	; 0x79
 8006ef4:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	33b0      	adds	r3, #176	; 0xb0
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	4413      	add	r3, r2
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	61bb      	str	r3, [r7, #24]
 8006f0a:	e00d      	b.n	8006f28 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	885b      	ldrh	r3, [r3, #2]
 8006f10:	0a1b      	lsrs	r3, r3, #8
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	2b21      	cmp	r3, #33	; 0x21
 8006f16:	d107      	bne.n	8006f28 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8006f18:	4b26      	ldr	r3, [pc, #152]	; (8006fb4 <USBD_CUSTOM_HID_Setup+0x230>)
 8006f1a:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	88db      	ldrh	r3, [r3, #6]
 8006f20:	2b09      	cmp	r3, #9
 8006f22:	bf28      	it	cs
 8006f24:	2309      	movcs	r3, #9
 8006f26:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006f28:	8bfb      	ldrh	r3, [r7, #30]
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	69b9      	ldr	r1, [r7, #24]
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f001 fc3c 	bl	80087ac <USBD_CtlSendData>
          break;
 8006f34:	e030      	b.n	8006f98 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b03      	cmp	r3, #3
 8006f40:	d107      	bne.n	8006f52 <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	3310      	adds	r3, #16
 8006f46:	2201      	movs	r2, #1
 8006f48:	4619      	mov	r1, r3
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f001 fc2e 	bl	80087ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f50:	e022      	b.n	8006f98 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006f52:	6839      	ldr	r1, [r7, #0]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f001 fbb8 	bl	80086ca <USBD_CtlError>
            ret = USBD_FAIL;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	75fb      	strb	r3, [r7, #23]
          break;
 8006f5e:	e01b      	b.n	8006f98 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	2b03      	cmp	r3, #3
 8006f6a:	d106      	bne.n	8006f7a <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	885b      	ldrh	r3, [r3, #2]
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	461a      	mov	r2, r3
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	611a      	str	r2, [r3, #16]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f78:	e00e      	b.n	8006f98 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006f7a:	6839      	ldr	r1, [r7, #0]
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f001 fba4 	bl	80086ca <USBD_CtlError>
            ret = USBD_FAIL;
 8006f82:	2303      	movs	r3, #3
 8006f84:	75fb      	strb	r3, [r7, #23]
          break;
 8006f86:	e007      	b.n	8006f98 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006f88:	6839      	ldr	r1, [r7, #0]
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f001 fb9d 	bl	80086ca <USBD_CtlError>
          ret = USBD_FAIL;
 8006f90:	2303      	movs	r3, #3
 8006f92:	75fb      	strb	r3, [r7, #23]
          break;
 8006f94:	e000      	b.n	8006f98 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8006f96:	bf00      	nop
      }
      break;
 8006f98:	e006      	b.n	8006fa8 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8006f9a:	6839      	ldr	r1, [r7, #0]
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f001 fb94 	bl	80086ca <USBD_CtlError>
      ret = USBD_FAIL;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	75fb      	strb	r3, [r7, #23]
      break;
 8006fa6:	bf00      	nop
  }
  return (uint8_t)ret;
 8006fa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3720      	adds	r7, #32
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	200000e0 	.word	0x200000e0

08006fb8 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	32b0      	adds	r2, #176	; 0xb0
 8006fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fd4:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d101      	bne.n	8006fe0 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e017      	b.n	8007010 <USBD_CUSTOM_HID_SendReport+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b03      	cmp	r3, #3
 8006fea:	d110      	bne.n	800700e <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	7e1b      	ldrb	r3, [r3, #24]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10a      	bne.n	800700a <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	761a      	strb	r2, [r3, #24]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8006ffa:	4b07      	ldr	r3, [pc, #28]	; (8007018 <USBD_CUSTOM_HID_SendReport+0x60>)
 8006ffc:	7819      	ldrb	r1, [r3, #0]
 8006ffe:	88fb      	ldrh	r3, [r7, #6]
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f002 f8bd 	bl	8009182 <USBD_LL_Transmit>
 8007008:	e001      	b.n	800700e <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 800700a:	2301      	movs	r3, #1
 800700c:	e000      	b.n	8007010 <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3718      	adds	r7, #24
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	200000f6 	.word	0x200000f6

0800701c <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8007024:	2181      	movs	r1, #129	; 0x81
 8007026:	4815      	ldr	r0, [pc, #84]	; (800707c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8007028:	f000 fd17 	bl	8007a5a <USBD_GetEpDesc>
 800702c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800702e:	2102      	movs	r1, #2
 8007030:	4812      	ldr	r0, [pc, #72]	; (800707c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8007032:	f000 fd12 	bl	8007a5a <USBD_GetEpDesc>
 8007036:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d009      	beq.n	8007052 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	f042 0220 	orr.w	r2, r2, #32
 8007046:	711a      	strb	r2, [r3, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2205      	movs	r2, #5
 8007050:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d009      	beq.n	800706c <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	2200      	movs	r2, #0
 800705c:	f042 0208 	orr.w	r2, r2, #8
 8007060:	711a      	strb	r2, [r3, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	2205      	movs	r2, #5
 800706a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2299      	movs	r2, #153	; 0x99
 8007070:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8007072:	4b02      	ldr	r3, [pc, #8]	; (800707c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8007074:	4618      	mov	r0, r3
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	20000044 	.word	0x20000044

08007080 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8007088:	2181      	movs	r1, #129	; 0x81
 800708a:	4815      	ldr	r0, [pc, #84]	; (80070e0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800708c:	f000 fce5 	bl	8007a5a <USBD_GetEpDesc>
 8007090:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8007092:	2102      	movs	r1, #2
 8007094:	4812      	ldr	r0, [pc, #72]	; (80070e0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8007096:	f000 fce0 	bl	8007a5a <USBD_GetEpDesc>
 800709a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d009      	beq.n	80070b6 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f042 0220 	orr.w	r2, r2, #32
 80070aa:	711a      	strb	r2, [r3, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2205      	movs	r2, #5
 80070b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d009      	beq.n	80070d0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	2200      	movs	r2, #0
 80070c0:	f042 0208 	orr.w	r2, r2, #8
 80070c4:	711a      	strb	r2, [r3, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	2205      	movs	r2, #5
 80070ce:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2299      	movs	r2, #153	; 0x99
 80070d4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80070d6:	4b02      	ldr	r3, [pc, #8]	; (80070e0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3710      	adds	r7, #16
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	20000044 	.word	0x20000044

080070e4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80070ec:	2181      	movs	r1, #129	; 0x81
 80070ee:	4815      	ldr	r0, [pc, #84]	; (8007144 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80070f0:	f000 fcb3 	bl	8007a5a <USBD_GetEpDesc>
 80070f4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80070f6:	2102      	movs	r1, #2
 80070f8:	4812      	ldr	r0, [pc, #72]	; (8007144 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80070fa:	f000 fcae 	bl	8007a5a <USBD_GetEpDesc>
 80070fe:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d009      	beq.n	800711a <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	f042 0220 	orr.w	r2, r2, #32
 800710e:	711a      	strb	r2, [r3, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2205      	movs	r2, #5
 8007118:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d009      	beq.n	8007134 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	2200      	movs	r2, #0
 8007124:	f042 0208 	orr.w	r2, r2, #8
 8007128:	711a      	strb	r2, [r3, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	2205      	movs	r2, #5
 8007132:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2299      	movs	r2, #153	; 0x99
 8007138:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800713a:	4b02      	ldr	r3, [pc, #8]	; (8007144 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 800713c:	4618      	mov	r0, r3
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	20000044 	.word	0x20000044

08007148 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	460b      	mov	r3, r1
 8007152:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	32b0      	adds	r2, #176	; 0xb0
 800715e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007162:	2200      	movs	r2, #0
 8007164:	761a      	strb	r2, [r3, #24]

  return (uint8_t)USBD_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	460b      	mov	r3, r1
 800717e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	32b0      	adds	r2, #176	; 0xb0
 800718a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d101      	bne.n	8007196 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007192:	2303      	movs	r3, #3
 8007194:	e014      	b.n	80071c0 <USBD_CUSTOM_HID_DataOut+0x4c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	32b0      	adds	r2, #176	; 0xb0
 80071a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071a4:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	33b0      	adds	r3, #176	; 0xb0
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	4413      	add	r3, r2
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	4610      	mov	r0, r2
 80071bc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80071be:	2300      	movs	r3, #0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	32b0      	adds	r2, #176	; 0xb0
 80071da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d101      	bne.n	80071e6 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e00f      	b.n	8007206 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	32b0      	adds	r2, #176	; 0xb0
 80071f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071f4:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 80071f6:	4b06      	ldr	r3, [pc, #24]	; (8007210 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 80071f8:	7819      	ldrb	r1, [r3, #0]
 80071fa:	68fa      	ldr	r2, [r7, #12]
 80071fc:	2308      	movs	r3, #8
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f001 ffe0 	bl	80091c4 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	200000f7 	.word	0x200000f7

08007214 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	32b0      	adds	r2, #176	; 0xb0
 8007226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800722a:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d101      	bne.n	8007236 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007232:	2303      	movs	r3, #3
 8007234:	e013      	b.n	800725e <USBD_CUSTOM_HID_EP0_RxReady+0x4a>
  }

  if (hhid->IsReportAvailable == 1U)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	695b      	ldr	r3, [r3, #20]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d10e      	bne.n	800725c <USBD_CUSTOM_HID_EP0_RxReady+0x48>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	33b0      	adds	r3, #176	; 0xb0
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	4413      	add	r3, r2
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	4610      	mov	r0, r2
 8007254:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	615a      	str	r2, [r3, #20]
  }

  return (uint8_t)USBD_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
	...

08007268 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	220a      	movs	r2, #10
 8007274:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8007276:	4b03      	ldr	r3, [pc, #12]	; (8007284 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007278:	4618      	mov	r0, r3
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr
 8007284:	200000ec 	.word	0x200000ec

08007288 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d101      	bne.n	800729c <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007298:	2303      	movs	r3, #3
 800729a:	e009      	b.n	80072b0 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	33b0      	adds	r3, #176	; 0xb0
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	4413      	add	r3, r2
 80072aa:	683a      	ldr	r2, [r7, #0]
 80072ac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b086      	sub	sp, #24
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	4613      	mov	r3, r2
 80072c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d101      	bne.n	80072d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80072d0:	2303      	movs	r3, #3
 80072d2:	e01f      	b.n	8007314 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d003      	beq.n	80072fa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2201      	movs	r2, #1
 80072fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	79fa      	ldrb	r2, [r7, #7]
 8007306:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f001 fe05 	bl	8008f18 <USBD_LL_Init>
 800730e:	4603      	mov	r3, r0
 8007310:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007312:	7dfb      	ldrb	r3, [r7, #23]
}
 8007314:	4618      	mov	r0, r3
 8007316:	3718      	adds	r7, #24
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007326:	2300      	movs	r3, #0
 8007328:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d101      	bne.n	8007334 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007330:	2303      	movs	r3, #3
 8007332:	e025      	b.n	8007380 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	32ae      	adds	r2, #174	; 0xae
 8007346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800734a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734c:	2b00      	cmp	r3, #0
 800734e:	d00f      	beq.n	8007370 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	32ae      	adds	r2, #174	; 0xae
 800735a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800735e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007360:	f107 020e 	add.w	r2, r7, #14
 8007364:	4610      	mov	r0, r2
 8007366:	4798      	blx	r3
 8007368:	4602      	mov	r2, r0
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007376:	1c5a      	adds	r2, r3, #1
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	3710      	adds	r7, #16
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f001 fe0d 	bl	8008fb0 <USBD_LL_Start>
 8007396:	4603      	mov	r3, r0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3708      	adds	r7, #8
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80073a8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	370c      	adds	r7, #12
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr

080073b6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b084      	sub	sp, #16
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
 80073be:	460b      	mov	r3, r1
 80073c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80073c2:	2300      	movs	r3, #0
 80073c4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d009      	beq.n	80073e4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	78fa      	ldrb	r2, [r7, #3]
 80073da:	4611      	mov	r1, r2
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	4798      	blx	r3
 80073e0:	4603      	mov	r3, r0
 80073e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b084      	sub	sp, #16
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
 80073f6:	460b      	mov	r3, r1
 80073f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80073fa:	2300      	movs	r3, #0
 80073fc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	78fa      	ldrb	r2, [r7, #3]
 8007408:	4611      	mov	r1, r2
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	4798      	blx	r3
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d001      	beq.n	8007418 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007414:	2303      	movs	r3, #3
 8007416:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007418:	7bfb      	ldrb	r3, [r7, #15]
}
 800741a:	4618      	mov	r0, r3
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b084      	sub	sp, #16
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
 800742a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007432:	6839      	ldr	r1, [r7, #0]
 8007434:	4618      	mov	r0, r3
 8007436:	f001 f90e 	bl	8008656 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2201      	movs	r2, #1
 800743e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007448:	461a      	mov	r2, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007456:	f003 031f 	and.w	r3, r3, #31
 800745a:	2b02      	cmp	r3, #2
 800745c:	d01a      	beq.n	8007494 <USBD_LL_SetupStage+0x72>
 800745e:	2b02      	cmp	r3, #2
 8007460:	d822      	bhi.n	80074a8 <USBD_LL_SetupStage+0x86>
 8007462:	2b00      	cmp	r3, #0
 8007464:	d002      	beq.n	800746c <USBD_LL_SetupStage+0x4a>
 8007466:	2b01      	cmp	r3, #1
 8007468:	d00a      	beq.n	8007480 <USBD_LL_SetupStage+0x5e>
 800746a:	e01d      	b.n	80074a8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007472:	4619      	mov	r1, r3
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 fb65 	bl	8007b44 <USBD_StdDevReq>
 800747a:	4603      	mov	r3, r0
 800747c:	73fb      	strb	r3, [r7, #15]
      break;
 800747e:	e020      	b.n	80074c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007486:	4619      	mov	r1, r3
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fbcd 	bl	8007c28 <USBD_StdItfReq>
 800748e:	4603      	mov	r3, r0
 8007490:	73fb      	strb	r3, [r7, #15]
      break;
 8007492:	e016      	b.n	80074c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800749a:	4619      	mov	r1, r3
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fc2f 	bl	8007d00 <USBD_StdEPReq>
 80074a2:	4603      	mov	r3, r0
 80074a4:	73fb      	strb	r3, [r7, #15]
      break;
 80074a6:	e00c      	b.n	80074c2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80074ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	4619      	mov	r1, r3
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f001 fdda 	bl	8009070 <USBD_LL_StallEP>
 80074bc:	4603      	mov	r3, r0
 80074be:	73fb      	strb	r3, [r7, #15]
      break;
 80074c0:	bf00      	nop
  }

  return ret;
 80074c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3710      	adds	r7, #16
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b086      	sub	sp, #24
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	460b      	mov	r3, r1
 80074d6:	607a      	str	r2, [r7, #4]
 80074d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80074da:	2300      	movs	r3, #0
 80074dc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80074de:	7afb      	ldrb	r3, [r7, #11]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d16e      	bne.n	80075c2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80074ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074f2:	2b03      	cmp	r3, #3
 80074f4:	f040 8098 	bne.w	8007628 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	689a      	ldr	r2, [r3, #8]
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	429a      	cmp	r2, r3
 8007502:	d913      	bls.n	800752c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	689a      	ldr	r2, [r3, #8]
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	1ad2      	subs	r2, r2, r3
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	68da      	ldr	r2, [r3, #12]
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	4293      	cmp	r3, r2
 800751c:	bf28      	it	cs
 800751e:	4613      	movcs	r3, r2
 8007520:	461a      	mov	r2, r3
 8007522:	6879      	ldr	r1, [r7, #4]
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f001 f98a 	bl	800883e <USBD_CtlContinueRx>
 800752a:	e07d      	b.n	8007628 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007532:	f003 031f 	and.w	r3, r3, #31
 8007536:	2b02      	cmp	r3, #2
 8007538:	d014      	beq.n	8007564 <USBD_LL_DataOutStage+0x98>
 800753a:	2b02      	cmp	r3, #2
 800753c:	d81d      	bhi.n	800757a <USBD_LL_DataOutStage+0xae>
 800753e:	2b00      	cmp	r3, #0
 8007540:	d002      	beq.n	8007548 <USBD_LL_DataOutStage+0x7c>
 8007542:	2b01      	cmp	r3, #1
 8007544:	d003      	beq.n	800754e <USBD_LL_DataOutStage+0x82>
 8007546:	e018      	b.n	800757a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007548:	2300      	movs	r3, #0
 800754a:	75bb      	strb	r3, [r7, #22]
            break;
 800754c:	e018      	b.n	8007580 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007554:	b2db      	uxtb	r3, r3
 8007556:	4619      	mov	r1, r3
 8007558:	68f8      	ldr	r0, [r7, #12]
 800755a:	f000 fa64 	bl	8007a26 <USBD_CoreFindIF>
 800755e:	4603      	mov	r3, r0
 8007560:	75bb      	strb	r3, [r7, #22]
            break;
 8007562:	e00d      	b.n	8007580 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800756a:	b2db      	uxtb	r3, r3
 800756c:	4619      	mov	r1, r3
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f000 fa66 	bl	8007a40 <USBD_CoreFindEP>
 8007574:	4603      	mov	r3, r0
 8007576:	75bb      	strb	r3, [r7, #22]
            break;
 8007578:	e002      	b.n	8007580 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800757a:	2300      	movs	r3, #0
 800757c:	75bb      	strb	r3, [r7, #22]
            break;
 800757e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007580:	7dbb      	ldrb	r3, [r7, #22]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d119      	bne.n	80075ba <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800758c:	b2db      	uxtb	r3, r3
 800758e:	2b03      	cmp	r3, #3
 8007590:	d113      	bne.n	80075ba <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007592:	7dba      	ldrb	r2, [r7, #22]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	32ae      	adds	r2, #174	; 0xae
 8007598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00b      	beq.n	80075ba <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80075a2:	7dba      	ldrb	r2, [r7, #22]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80075aa:	7dba      	ldrb	r2, [r7, #22]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	32ae      	adds	r2, #174	; 0xae
 80075b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	68f8      	ldr	r0, [r7, #12]
 80075b8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	f001 f950 	bl	8008860 <USBD_CtlSendStatus>
 80075c0:	e032      	b.n	8007628 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80075c2:	7afb      	ldrb	r3, [r7, #11]
 80075c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	4619      	mov	r1, r3
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f000 fa37 	bl	8007a40 <USBD_CoreFindEP>
 80075d2:	4603      	mov	r3, r0
 80075d4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075d6:	7dbb      	ldrb	r3, [r7, #22]
 80075d8:	2bff      	cmp	r3, #255	; 0xff
 80075da:	d025      	beq.n	8007628 <USBD_LL_DataOutStage+0x15c>
 80075dc:	7dbb      	ldrb	r3, [r7, #22]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d122      	bne.n	8007628 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	2b03      	cmp	r3, #3
 80075ec:	d117      	bne.n	800761e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80075ee:	7dba      	ldrb	r2, [r7, #22]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	32ae      	adds	r2, #174	; 0xae
 80075f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f8:	699b      	ldr	r3, [r3, #24]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00f      	beq.n	800761e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80075fe:	7dba      	ldrb	r2, [r7, #22]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007606:	7dba      	ldrb	r2, [r7, #22]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	32ae      	adds	r2, #174	; 0xae
 800760c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007610:	699b      	ldr	r3, [r3, #24]
 8007612:	7afa      	ldrb	r2, [r7, #11]
 8007614:	4611      	mov	r1, r2
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	4798      	blx	r3
 800761a:	4603      	mov	r3, r0
 800761c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800761e:	7dfb      	ldrb	r3, [r7, #23]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d001      	beq.n	8007628 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007624:	7dfb      	ldrb	r3, [r7, #23]
 8007626:	e000      	b.n	800762a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3718      	adds	r7, #24
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b086      	sub	sp, #24
 8007636:	af00      	add	r7, sp, #0
 8007638:	60f8      	str	r0, [r7, #12]
 800763a:	460b      	mov	r3, r1
 800763c:	607a      	str	r2, [r7, #4]
 800763e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007640:	7afb      	ldrb	r3, [r7, #11]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d16f      	bne.n	8007726 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	3314      	adds	r3, #20
 800764a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007652:	2b02      	cmp	r3, #2
 8007654:	d15a      	bne.n	800770c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	689a      	ldr	r2, [r3, #8]
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	429a      	cmp	r2, r3
 8007660:	d914      	bls.n	800768c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	689a      	ldr	r2, [r3, #8]
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	1ad2      	subs	r2, r2, r3
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	461a      	mov	r2, r3
 8007676:	6879      	ldr	r1, [r7, #4]
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f001 f8b2 	bl	80087e2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800767e:	2300      	movs	r3, #0
 8007680:	2200      	movs	r2, #0
 8007682:	2100      	movs	r1, #0
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f001 fd9d 	bl	80091c4 <USBD_LL_PrepareReceive>
 800768a:	e03f      	b.n	800770c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	68da      	ldr	r2, [r3, #12]
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	429a      	cmp	r2, r3
 8007696:	d11c      	bne.n	80076d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	685a      	ldr	r2, [r3, #4]
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d316      	bcc.n	80076d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	685a      	ldr	r2, [r3, #4]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d20f      	bcs.n	80076d2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80076b2:	2200      	movs	r2, #0
 80076b4:	2100      	movs	r1, #0
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f001 f893 	bl	80087e2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2200      	movs	r2, #0
 80076c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076c4:	2300      	movs	r3, #0
 80076c6:	2200      	movs	r2, #0
 80076c8:	2100      	movs	r1, #0
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f001 fd7a 	bl	80091c4 <USBD_LL_PrepareReceive>
 80076d0:	e01c      	b.n	800770c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b03      	cmp	r3, #3
 80076dc:	d10f      	bne.n	80076fe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d009      	beq.n	80076fe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	68f8      	ldr	r0, [r7, #12]
 80076fc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80076fe:	2180      	movs	r1, #128	; 0x80
 8007700:	68f8      	ldr	r0, [r7, #12]
 8007702:	f001 fcb5 	bl	8009070 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f001 f8bd 	bl	8008886 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d03a      	beq.n	800778c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f7ff fe42 	bl	80073a0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007724:	e032      	b.n	800778c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007726:	7afb      	ldrb	r3, [r7, #11]
 8007728:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800772c:	b2db      	uxtb	r3, r3
 800772e:	4619      	mov	r1, r3
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f000 f985 	bl	8007a40 <USBD_CoreFindEP>
 8007736:	4603      	mov	r3, r0
 8007738:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800773a:	7dfb      	ldrb	r3, [r7, #23]
 800773c:	2bff      	cmp	r3, #255	; 0xff
 800773e:	d025      	beq.n	800778c <USBD_LL_DataInStage+0x15a>
 8007740:	7dfb      	ldrb	r3, [r7, #23]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d122      	bne.n	800778c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800774c:	b2db      	uxtb	r3, r3
 800774e:	2b03      	cmp	r3, #3
 8007750:	d11c      	bne.n	800778c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007752:	7dfa      	ldrb	r2, [r7, #23]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	32ae      	adds	r2, #174	; 0xae
 8007758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d014      	beq.n	800778c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007762:	7dfa      	ldrb	r2, [r7, #23]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800776a:	7dfa      	ldrb	r2, [r7, #23]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	32ae      	adds	r2, #174	; 0xae
 8007770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007774:	695b      	ldr	r3, [r3, #20]
 8007776:	7afa      	ldrb	r2, [r7, #11]
 8007778:	4611      	mov	r1, r2
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	4798      	blx	r3
 800777e:	4603      	mov	r3, r0
 8007780:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007782:	7dbb      	ldrb	r3, [r7, #22]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d001      	beq.n	800778c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007788:	7dbb      	ldrb	r3, [r7, #22]
 800778a:	e000      	b.n	800778e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3718      	adds	r7, #24
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007796:	b580      	push	{r7, lr}
 8007798:	b084      	sub	sp, #16
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d014      	beq.n	80077fc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00e      	beq.n	80077fc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	6852      	ldr	r2, [r2, #4]
 80077ea:	b2d2      	uxtb	r2, r2
 80077ec:	4611      	mov	r1, r2
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	4798      	blx	r3
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d001      	beq.n	80077fc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80077f8:	2303      	movs	r3, #3
 80077fa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077fc:	2340      	movs	r3, #64	; 0x40
 80077fe:	2200      	movs	r2, #0
 8007800:	2100      	movs	r1, #0
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f001 fbef 	bl	8008fe6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2240      	movs	r2, #64	; 0x40
 8007814:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007818:	2340      	movs	r3, #64	; 0x40
 800781a:	2200      	movs	r2, #0
 800781c:	2180      	movs	r1, #128	; 0x80
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f001 fbe1 	bl	8008fe6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2240      	movs	r2, #64	; 0x40
 800782e:	621a      	str	r2, [r3, #32]

  return ret;
 8007830:	7bfb      	ldrb	r3, [r7, #15]
}
 8007832:	4618      	mov	r0, r3
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800783a:	b480      	push	{r7}
 800783c:	b083      	sub	sp, #12
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
 8007842:	460b      	mov	r3, r1
 8007844:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	78fa      	ldrb	r2, [r7, #3]
 800784a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	370c      	adds	r7, #12
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr

0800785a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800785a:	b480      	push	{r7}
 800785c:	b083      	sub	sp, #12
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007868:	b2db      	uxtb	r3, r3
 800786a:	2b04      	cmp	r3, #4
 800786c:	d006      	beq.n	800787c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007874:	b2da      	uxtb	r2, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2204      	movs	r2, #4
 8007880:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007892:	b480      	push	{r7}
 8007894:	b083      	sub	sp, #12
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	2b04      	cmp	r3, #4
 80078a4:	d106      	bne.n	80078b4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80078ac:	b2da      	uxtb	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b082      	sub	sp, #8
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b03      	cmp	r3, #3
 80078d4:	d110      	bne.n	80078f8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00b      	beq.n	80078f8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078e6:	69db      	ldr	r3, [r3, #28]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d005      	beq.n	80078f8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078f2:	69db      	ldr	r3, [r3, #28]
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3708      	adds	r7, #8
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b082      	sub	sp, #8
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
 800790a:	460b      	mov	r3, r1
 800790c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	32ae      	adds	r2, #174	; 0xae
 8007918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d101      	bne.n	8007924 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007920:	2303      	movs	r3, #3
 8007922:	e01c      	b.n	800795e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800792a:	b2db      	uxtb	r3, r3
 800792c:	2b03      	cmp	r3, #3
 800792e:	d115      	bne.n	800795c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	32ae      	adds	r2, #174	; 0xae
 800793a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800793e:	6a1b      	ldr	r3, [r3, #32]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00b      	beq.n	800795c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	32ae      	adds	r2, #174	; 0xae
 800794e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007952:	6a1b      	ldr	r3, [r3, #32]
 8007954:	78fa      	ldrb	r2, [r7, #3]
 8007956:	4611      	mov	r1, r2
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3708      	adds	r7, #8
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007966:	b580      	push	{r7, lr}
 8007968:	b082      	sub	sp, #8
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
 800796e:	460b      	mov	r3, r1
 8007970:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	32ae      	adds	r2, #174	; 0xae
 800797c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d101      	bne.n	8007988 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007984:	2303      	movs	r3, #3
 8007986:	e01c      	b.n	80079c2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800798e:	b2db      	uxtb	r3, r3
 8007990:	2b03      	cmp	r3, #3
 8007992:	d115      	bne.n	80079c0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	32ae      	adds	r2, #174	; 0xae
 800799e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d00b      	beq.n	80079c0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	32ae      	adds	r2, #174	; 0xae
 80079b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b8:	78fa      	ldrb	r2, [r7, #3]
 80079ba:	4611      	mov	r1, r2
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3708      	adds	r7, #8
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80079ca:	b480      	push	{r7}
 80079cc:	b083      	sub	sp, #12
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80079e8:	2300      	movs	r3, #0
 80079ea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00e      	beq.n	8007a1c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	6852      	ldr	r2, [r2, #4]
 8007a0a:	b2d2      	uxtb	r2, r2
 8007a0c:	4611      	mov	r1, r2
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	4798      	blx	r3
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d001      	beq.n	8007a1c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007a18:	2303      	movs	r3, #3
 8007a1a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007a26:	b480      	push	{r7}
 8007a28:	b083      	sub	sp, #12
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
 8007a2e:	460b      	mov	r3, r1
 8007a30:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007a32:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	460b      	mov	r3, r1
 8007a4a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007a4c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	370c      	adds	r7, #12
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr

08007a5a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b086      	sub	sp, #24
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
 8007a62:	460b      	mov	r3, r1
 8007a64:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	885b      	ldrh	r3, [r3, #2]
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d920      	bls.n	8007ac4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007a8a:	e013      	b.n	8007ab4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007a8c:	f107 030a 	add.w	r3, r7, #10
 8007a90:	4619      	mov	r1, r3
 8007a92:	6978      	ldr	r0, [r7, #20]
 8007a94:	f000 f81b 	bl	8007ace <USBD_GetNextDesc>
 8007a98:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	785b      	ldrb	r3, [r3, #1]
 8007a9e:	2b05      	cmp	r3, #5
 8007aa0:	d108      	bne.n	8007ab4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	789b      	ldrb	r3, [r3, #2]
 8007aaa:	78fa      	ldrb	r2, [r7, #3]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d008      	beq.n	8007ac2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	885b      	ldrh	r3, [r3, #2]
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	897b      	ldrh	r3, [r7, #10]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d8e5      	bhi.n	8007a8c <USBD_GetEpDesc+0x32>
 8007ac0:	e000      	b.n	8007ac4 <USBD_GetEpDesc+0x6a>
          break;
 8007ac2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007ac4:	693b      	ldr	r3, [r7, #16]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3718      	adds	r7, #24
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007ace:	b480      	push	{r7}
 8007ad0:	b085      	sub	sp, #20
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
 8007ad6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	881a      	ldrh	r2, [r3, #0]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	4413      	add	r3, r2
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	461a      	mov	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4413      	add	r3, r2
 8007af8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007afa:	68fb      	ldr	r3, [r7, #12]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3714      	adds	r7, #20
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b087      	sub	sp, #28
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007b26:	8a3b      	ldrh	r3, [r7, #16]
 8007b28:	021b      	lsls	r3, r3, #8
 8007b2a:	b21a      	sxth	r2, r3
 8007b2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	b21b      	sxth	r3, r3
 8007b34:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007b36:	89fb      	ldrh	r3, [r7, #14]
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	371c      	adds	r7, #28
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b5a:	2b40      	cmp	r3, #64	; 0x40
 8007b5c:	d005      	beq.n	8007b6a <USBD_StdDevReq+0x26>
 8007b5e:	2b40      	cmp	r3, #64	; 0x40
 8007b60:	d857      	bhi.n	8007c12 <USBD_StdDevReq+0xce>
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00f      	beq.n	8007b86 <USBD_StdDevReq+0x42>
 8007b66:	2b20      	cmp	r3, #32
 8007b68:	d153      	bne.n	8007c12 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	32ae      	adds	r2, #174	; 0xae
 8007b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	6839      	ldr	r1, [r7, #0]
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	4798      	blx	r3
 8007b80:	4603      	mov	r3, r0
 8007b82:	73fb      	strb	r3, [r7, #15]
      break;
 8007b84:	e04a      	b.n	8007c1c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	785b      	ldrb	r3, [r3, #1]
 8007b8a:	2b09      	cmp	r3, #9
 8007b8c:	d83b      	bhi.n	8007c06 <USBD_StdDevReq+0xc2>
 8007b8e:	a201      	add	r2, pc, #4	; (adr r2, 8007b94 <USBD_StdDevReq+0x50>)
 8007b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b94:	08007be9 	.word	0x08007be9
 8007b98:	08007bfd 	.word	0x08007bfd
 8007b9c:	08007c07 	.word	0x08007c07
 8007ba0:	08007bf3 	.word	0x08007bf3
 8007ba4:	08007c07 	.word	0x08007c07
 8007ba8:	08007bc7 	.word	0x08007bc7
 8007bac:	08007bbd 	.word	0x08007bbd
 8007bb0:	08007c07 	.word	0x08007c07
 8007bb4:	08007bdf 	.word	0x08007bdf
 8007bb8:	08007bd1 	.word	0x08007bd1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007bbc:	6839      	ldr	r1, [r7, #0]
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 fa3c 	bl	800803c <USBD_GetDescriptor>
          break;
 8007bc4:	e024      	b.n	8007c10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007bc6:	6839      	ldr	r1, [r7, #0]
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 fba1 	bl	8008310 <USBD_SetAddress>
          break;
 8007bce:	e01f      	b.n	8007c10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007bd0:	6839      	ldr	r1, [r7, #0]
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 fbe0 	bl	8008398 <USBD_SetConfig>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	73fb      	strb	r3, [r7, #15]
          break;
 8007bdc:	e018      	b.n	8007c10 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007bde:	6839      	ldr	r1, [r7, #0]
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 fc83 	bl	80084ec <USBD_GetConfig>
          break;
 8007be6:	e013      	b.n	8007c10 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007be8:	6839      	ldr	r1, [r7, #0]
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 fcb4 	bl	8008558 <USBD_GetStatus>
          break;
 8007bf0:	e00e      	b.n	8007c10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007bf2:	6839      	ldr	r1, [r7, #0]
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 fce3 	bl	80085c0 <USBD_SetFeature>
          break;
 8007bfa:	e009      	b.n	8007c10 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007bfc:	6839      	ldr	r1, [r7, #0]
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 fd07 	bl	8008612 <USBD_ClrFeature>
          break;
 8007c04:	e004      	b.n	8007c10 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007c06:	6839      	ldr	r1, [r7, #0]
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 fd5e 	bl	80086ca <USBD_CtlError>
          break;
 8007c0e:	bf00      	nop
      }
      break;
 8007c10:	e004      	b.n	8007c1c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007c12:	6839      	ldr	r1, [r7, #0]
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 fd58 	bl	80086ca <USBD_CtlError>
      break;
 8007c1a:	bf00      	nop
  }

  return ret;
 8007c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop

08007c28 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c32:	2300      	movs	r3, #0
 8007c34:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c3e:	2b40      	cmp	r3, #64	; 0x40
 8007c40:	d005      	beq.n	8007c4e <USBD_StdItfReq+0x26>
 8007c42:	2b40      	cmp	r3, #64	; 0x40
 8007c44:	d852      	bhi.n	8007cec <USBD_StdItfReq+0xc4>
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d001      	beq.n	8007c4e <USBD_StdItfReq+0x26>
 8007c4a:	2b20      	cmp	r3, #32
 8007c4c:	d14e      	bne.n	8007cec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	3b01      	subs	r3, #1
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	d840      	bhi.n	8007cde <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	889b      	ldrh	r3, [r3, #4]
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d836      	bhi.n	8007cd4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	889b      	ldrh	r3, [r3, #4]
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f7ff fed9 	bl	8007a26 <USBD_CoreFindIF>
 8007c74:	4603      	mov	r3, r0
 8007c76:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c78:	7bbb      	ldrb	r3, [r7, #14]
 8007c7a:	2bff      	cmp	r3, #255	; 0xff
 8007c7c:	d01d      	beq.n	8007cba <USBD_StdItfReq+0x92>
 8007c7e:	7bbb      	ldrb	r3, [r7, #14]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d11a      	bne.n	8007cba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007c84:	7bba      	ldrb	r2, [r7, #14]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	32ae      	adds	r2, #174	; 0xae
 8007c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00f      	beq.n	8007cb4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007c94:	7bba      	ldrb	r2, [r7, #14]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007c9c:	7bba      	ldrb	r2, [r7, #14]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	32ae      	adds	r2, #174	; 0xae
 8007ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	6839      	ldr	r1, [r7, #0]
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	4798      	blx	r3
 8007cae:	4603      	mov	r3, r0
 8007cb0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007cb2:	e004      	b.n	8007cbe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007cb8:	e001      	b.n	8007cbe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	88db      	ldrh	r3, [r3, #6]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d110      	bne.n	8007ce8 <USBD_StdItfReq+0xc0>
 8007cc6:	7bfb      	ldrb	r3, [r7, #15]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d10d      	bne.n	8007ce8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 fdc7 	bl	8008860 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007cd2:	e009      	b.n	8007ce8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007cd4:	6839      	ldr	r1, [r7, #0]
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 fcf7 	bl	80086ca <USBD_CtlError>
          break;
 8007cdc:	e004      	b.n	8007ce8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007cde:	6839      	ldr	r1, [r7, #0]
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 fcf2 	bl	80086ca <USBD_CtlError>
          break;
 8007ce6:	e000      	b.n	8007cea <USBD_StdItfReq+0xc2>
          break;
 8007ce8:	bf00      	nop
      }
      break;
 8007cea:	e004      	b.n	8007cf6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007cec:	6839      	ldr	r1, [r7, #0]
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fceb 	bl	80086ca <USBD_CtlError>
      break;
 8007cf4:	bf00      	nop
  }

  return ret;
 8007cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3710      	adds	r7, #16
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	889b      	ldrh	r3, [r3, #4]
 8007d12:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d1c:	2b40      	cmp	r3, #64	; 0x40
 8007d1e:	d007      	beq.n	8007d30 <USBD_StdEPReq+0x30>
 8007d20:	2b40      	cmp	r3, #64	; 0x40
 8007d22:	f200 817f 	bhi.w	8008024 <USBD_StdEPReq+0x324>
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d02a      	beq.n	8007d80 <USBD_StdEPReq+0x80>
 8007d2a:	2b20      	cmp	r3, #32
 8007d2c:	f040 817a 	bne.w	8008024 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007d30:	7bbb      	ldrb	r3, [r7, #14]
 8007d32:	4619      	mov	r1, r3
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f7ff fe83 	bl	8007a40 <USBD_CoreFindEP>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d3e:	7b7b      	ldrb	r3, [r7, #13]
 8007d40:	2bff      	cmp	r3, #255	; 0xff
 8007d42:	f000 8174 	beq.w	800802e <USBD_StdEPReq+0x32e>
 8007d46:	7b7b      	ldrb	r3, [r7, #13]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f040 8170 	bne.w	800802e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007d4e:	7b7a      	ldrb	r2, [r7, #13]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007d56:	7b7a      	ldrb	r2, [r7, #13]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	32ae      	adds	r2, #174	; 0xae
 8007d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f000 8163 	beq.w	800802e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007d68:	7b7a      	ldrb	r2, [r7, #13]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	32ae      	adds	r2, #174	; 0xae
 8007d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	6839      	ldr	r1, [r7, #0]
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	4798      	blx	r3
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007d7e:	e156      	b.n	800802e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	785b      	ldrb	r3, [r3, #1]
 8007d84:	2b03      	cmp	r3, #3
 8007d86:	d008      	beq.n	8007d9a <USBD_StdEPReq+0x9a>
 8007d88:	2b03      	cmp	r3, #3
 8007d8a:	f300 8145 	bgt.w	8008018 <USBD_StdEPReq+0x318>
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	f000 809b 	beq.w	8007eca <USBD_StdEPReq+0x1ca>
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d03c      	beq.n	8007e12 <USBD_StdEPReq+0x112>
 8007d98:	e13e      	b.n	8008018 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	d002      	beq.n	8007dac <USBD_StdEPReq+0xac>
 8007da6:	2b03      	cmp	r3, #3
 8007da8:	d016      	beq.n	8007dd8 <USBD_StdEPReq+0xd8>
 8007daa:	e02c      	b.n	8007e06 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007dac:	7bbb      	ldrb	r3, [r7, #14]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00d      	beq.n	8007dce <USBD_StdEPReq+0xce>
 8007db2:	7bbb      	ldrb	r3, [r7, #14]
 8007db4:	2b80      	cmp	r3, #128	; 0x80
 8007db6:	d00a      	beq.n	8007dce <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007db8:	7bbb      	ldrb	r3, [r7, #14]
 8007dba:	4619      	mov	r1, r3
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f001 f957 	bl	8009070 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007dc2:	2180      	movs	r1, #128	; 0x80
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f001 f953 	bl	8009070 <USBD_LL_StallEP>
 8007dca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007dcc:	e020      	b.n	8007e10 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007dce:	6839      	ldr	r1, [r7, #0]
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 fc7a 	bl	80086ca <USBD_CtlError>
              break;
 8007dd6:	e01b      	b.n	8007e10 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	885b      	ldrh	r3, [r3, #2]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d10e      	bne.n	8007dfe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007de0:	7bbb      	ldrb	r3, [r7, #14]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00b      	beq.n	8007dfe <USBD_StdEPReq+0xfe>
 8007de6:	7bbb      	ldrb	r3, [r7, #14]
 8007de8:	2b80      	cmp	r3, #128	; 0x80
 8007dea:	d008      	beq.n	8007dfe <USBD_StdEPReq+0xfe>
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	88db      	ldrh	r3, [r3, #6]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d104      	bne.n	8007dfe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007df4:	7bbb      	ldrb	r3, [r7, #14]
 8007df6:	4619      	mov	r1, r3
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f001 f939 	bl	8009070 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 fd2e 	bl	8008860 <USBD_CtlSendStatus>

              break;
 8007e04:	e004      	b.n	8007e10 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007e06:	6839      	ldr	r1, [r7, #0]
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 fc5e 	bl	80086ca <USBD_CtlError>
              break;
 8007e0e:	bf00      	nop
          }
          break;
 8007e10:	e107      	b.n	8008022 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	d002      	beq.n	8007e24 <USBD_StdEPReq+0x124>
 8007e1e:	2b03      	cmp	r3, #3
 8007e20:	d016      	beq.n	8007e50 <USBD_StdEPReq+0x150>
 8007e22:	e04b      	b.n	8007ebc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e24:	7bbb      	ldrb	r3, [r7, #14]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00d      	beq.n	8007e46 <USBD_StdEPReq+0x146>
 8007e2a:	7bbb      	ldrb	r3, [r7, #14]
 8007e2c:	2b80      	cmp	r3, #128	; 0x80
 8007e2e:	d00a      	beq.n	8007e46 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e30:	7bbb      	ldrb	r3, [r7, #14]
 8007e32:	4619      	mov	r1, r3
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f001 f91b 	bl	8009070 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e3a:	2180      	movs	r1, #128	; 0x80
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f001 f917 	bl	8009070 <USBD_LL_StallEP>
 8007e42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e44:	e040      	b.n	8007ec8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007e46:	6839      	ldr	r1, [r7, #0]
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 fc3e 	bl	80086ca <USBD_CtlError>
              break;
 8007e4e:	e03b      	b.n	8007ec8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	885b      	ldrh	r3, [r3, #2]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d136      	bne.n	8007ec6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007e58:	7bbb      	ldrb	r3, [r7, #14]
 8007e5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d004      	beq.n	8007e6c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007e62:	7bbb      	ldrb	r3, [r7, #14]
 8007e64:	4619      	mov	r1, r3
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f001 f921 	bl	80090ae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 fcf7 	bl	8008860 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007e72:	7bbb      	ldrb	r3, [r7, #14]
 8007e74:	4619      	mov	r1, r3
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f7ff fde2 	bl	8007a40 <USBD_CoreFindEP>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e80:	7b7b      	ldrb	r3, [r7, #13]
 8007e82:	2bff      	cmp	r3, #255	; 0xff
 8007e84:	d01f      	beq.n	8007ec6 <USBD_StdEPReq+0x1c6>
 8007e86:	7b7b      	ldrb	r3, [r7, #13]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d11c      	bne.n	8007ec6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007e8c:	7b7a      	ldrb	r2, [r7, #13]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007e94:	7b7a      	ldrb	r2, [r7, #13]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	32ae      	adds	r2, #174	; 0xae
 8007e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d010      	beq.n	8007ec6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007ea4:	7b7a      	ldrb	r2, [r7, #13]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	32ae      	adds	r2, #174	; 0xae
 8007eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	6839      	ldr	r1, [r7, #0]
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	4798      	blx	r3
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007eba:	e004      	b.n	8007ec6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007ebc:	6839      	ldr	r1, [r7, #0]
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 fc03 	bl	80086ca <USBD_CtlError>
              break;
 8007ec4:	e000      	b.n	8007ec8 <USBD_StdEPReq+0x1c8>
              break;
 8007ec6:	bf00      	nop
          }
          break;
 8007ec8:	e0ab      	b.n	8008022 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	d002      	beq.n	8007edc <USBD_StdEPReq+0x1dc>
 8007ed6:	2b03      	cmp	r3, #3
 8007ed8:	d032      	beq.n	8007f40 <USBD_StdEPReq+0x240>
 8007eda:	e097      	b.n	800800c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007edc:	7bbb      	ldrb	r3, [r7, #14]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d007      	beq.n	8007ef2 <USBD_StdEPReq+0x1f2>
 8007ee2:	7bbb      	ldrb	r3, [r7, #14]
 8007ee4:	2b80      	cmp	r3, #128	; 0x80
 8007ee6:	d004      	beq.n	8007ef2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007ee8:	6839      	ldr	r1, [r7, #0]
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fbed 	bl	80086ca <USBD_CtlError>
                break;
 8007ef0:	e091      	b.n	8008016 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ef2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	da0b      	bge.n	8007f12 <USBD_StdEPReq+0x212>
 8007efa:	7bbb      	ldrb	r3, [r7, #14]
 8007efc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f00:	4613      	mov	r3, r2
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	4413      	add	r3, r2
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	3310      	adds	r3, #16
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	3304      	adds	r3, #4
 8007f10:	e00b      	b.n	8007f2a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f12:	7bbb      	ldrb	r3, [r7, #14]
 8007f14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f18:	4613      	mov	r3, r2
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	4413      	add	r3, r2
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	4413      	add	r3, r2
 8007f28:	3304      	adds	r3, #4
 8007f2a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	2202      	movs	r2, #2
 8007f36:	4619      	mov	r1, r3
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 fc37 	bl	80087ac <USBD_CtlSendData>
              break;
 8007f3e:	e06a      	b.n	8008016 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007f40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	da11      	bge.n	8007f6c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007f48:	7bbb      	ldrb	r3, [r7, #14]
 8007f4a:	f003 020f 	and.w	r2, r3, #15
 8007f4e:	6879      	ldr	r1, [r7, #4]
 8007f50:	4613      	mov	r3, r2
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	4413      	add	r3, r2
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	440b      	add	r3, r1
 8007f5a:	3324      	adds	r3, #36	; 0x24
 8007f5c:	881b      	ldrh	r3, [r3, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d117      	bne.n	8007f92 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007f62:	6839      	ldr	r1, [r7, #0]
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 fbb0 	bl	80086ca <USBD_CtlError>
                  break;
 8007f6a:	e054      	b.n	8008016 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007f6c:	7bbb      	ldrb	r3, [r7, #14]
 8007f6e:	f003 020f 	and.w	r2, r3, #15
 8007f72:	6879      	ldr	r1, [r7, #4]
 8007f74:	4613      	mov	r3, r2
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	4413      	add	r3, r2
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	440b      	add	r3, r1
 8007f7e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007f82:	881b      	ldrh	r3, [r3, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d104      	bne.n	8007f92 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007f88:	6839      	ldr	r1, [r7, #0]
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 fb9d 	bl	80086ca <USBD_CtlError>
                  break;
 8007f90:	e041      	b.n	8008016 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	da0b      	bge.n	8007fb2 <USBD_StdEPReq+0x2b2>
 8007f9a:	7bbb      	ldrb	r3, [r7, #14]
 8007f9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	4413      	add	r3, r2
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	3310      	adds	r3, #16
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	4413      	add	r3, r2
 8007fae:	3304      	adds	r3, #4
 8007fb0:	e00b      	b.n	8007fca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007fb2:	7bbb      	ldrb	r3, [r7, #14]
 8007fb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fb8:	4613      	mov	r3, r2
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	4413      	add	r3, r2
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	3304      	adds	r3, #4
 8007fca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007fcc:	7bbb      	ldrb	r3, [r7, #14]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d002      	beq.n	8007fd8 <USBD_StdEPReq+0x2d8>
 8007fd2:	7bbb      	ldrb	r3, [r7, #14]
 8007fd4:	2b80      	cmp	r3, #128	; 0x80
 8007fd6:	d103      	bne.n	8007fe0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	601a      	str	r2, [r3, #0]
 8007fde:	e00e      	b.n	8007ffe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007fe0:	7bbb      	ldrb	r3, [r7, #14]
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f001 f881 	bl	80090ec <USBD_LL_IsStallEP>
 8007fea:	4603      	mov	r3, r0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d003      	beq.n	8007ff8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	601a      	str	r2, [r3, #0]
 8007ff6:	e002      	b.n	8007ffe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	2202      	movs	r2, #2
 8008002:	4619      	mov	r1, r3
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 fbd1 	bl	80087ac <USBD_CtlSendData>
              break;
 800800a:	e004      	b.n	8008016 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800800c:	6839      	ldr	r1, [r7, #0]
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 fb5b 	bl	80086ca <USBD_CtlError>
              break;
 8008014:	bf00      	nop
          }
          break;
 8008016:	e004      	b.n	8008022 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008018:	6839      	ldr	r1, [r7, #0]
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 fb55 	bl	80086ca <USBD_CtlError>
          break;
 8008020:	bf00      	nop
      }
      break;
 8008022:	e005      	b.n	8008030 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008024:	6839      	ldr	r1, [r7, #0]
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 fb4f 	bl	80086ca <USBD_CtlError>
      break;
 800802c:	e000      	b.n	8008030 <USBD_StdEPReq+0x330>
      break;
 800802e:	bf00      	nop
  }

  return ret;
 8008030:	7bfb      	ldrb	r3, [r7, #15]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
	...

0800803c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008046:	2300      	movs	r3, #0
 8008048:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800804a:	2300      	movs	r3, #0
 800804c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800804e:	2300      	movs	r3, #0
 8008050:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	885b      	ldrh	r3, [r3, #2]
 8008056:	0a1b      	lsrs	r3, r3, #8
 8008058:	b29b      	uxth	r3, r3
 800805a:	3b01      	subs	r3, #1
 800805c:	2b06      	cmp	r3, #6
 800805e:	f200 8128 	bhi.w	80082b2 <USBD_GetDescriptor+0x276>
 8008062:	a201      	add	r2, pc, #4	; (adr r2, 8008068 <USBD_GetDescriptor+0x2c>)
 8008064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008068:	08008085 	.word	0x08008085
 800806c:	0800809d 	.word	0x0800809d
 8008070:	080080dd 	.word	0x080080dd
 8008074:	080082b3 	.word	0x080082b3
 8008078:	080082b3 	.word	0x080082b3
 800807c:	08008253 	.word	0x08008253
 8008080:	0800827f 	.word	0x0800827f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	7c12      	ldrb	r2, [r2, #16]
 8008090:	f107 0108 	add.w	r1, r7, #8
 8008094:	4610      	mov	r0, r2
 8008096:	4798      	blx	r3
 8008098:	60f8      	str	r0, [r7, #12]
      break;
 800809a:	e112      	b.n	80082c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	7c1b      	ldrb	r3, [r3, #16]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d10d      	bne.n	80080c0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ac:	f107 0208 	add.w	r2, r7, #8
 80080b0:	4610      	mov	r0, r2
 80080b2:	4798      	blx	r3
 80080b4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	3301      	adds	r3, #1
 80080ba:	2202      	movs	r2, #2
 80080bc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80080be:	e100      	b.n	80082c2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c8:	f107 0208 	add.w	r2, r7, #8
 80080cc:	4610      	mov	r0, r2
 80080ce:	4798      	blx	r3
 80080d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	3301      	adds	r3, #1
 80080d6:	2202      	movs	r2, #2
 80080d8:	701a      	strb	r2, [r3, #0]
      break;
 80080da:	e0f2      	b.n	80082c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	885b      	ldrh	r3, [r3, #2]
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	2b05      	cmp	r3, #5
 80080e4:	f200 80ac 	bhi.w	8008240 <USBD_GetDescriptor+0x204>
 80080e8:	a201      	add	r2, pc, #4	; (adr r2, 80080f0 <USBD_GetDescriptor+0xb4>)
 80080ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ee:	bf00      	nop
 80080f0:	08008109 	.word	0x08008109
 80080f4:	0800813d 	.word	0x0800813d
 80080f8:	08008171 	.word	0x08008171
 80080fc:	080081a5 	.word	0x080081a5
 8008100:	080081d9 	.word	0x080081d9
 8008104:	0800820d 	.word	0x0800820d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d00b      	beq.n	800812c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	7c12      	ldrb	r2, [r2, #16]
 8008120:	f107 0108 	add.w	r1, r7, #8
 8008124:	4610      	mov	r0, r2
 8008126:	4798      	blx	r3
 8008128:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800812a:	e091      	b.n	8008250 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800812c:	6839      	ldr	r1, [r7, #0]
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 facb 	bl	80086ca <USBD_CtlError>
            err++;
 8008134:	7afb      	ldrb	r3, [r7, #11]
 8008136:	3301      	adds	r3, #1
 8008138:	72fb      	strb	r3, [r7, #11]
          break;
 800813a:	e089      	b.n	8008250 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d00b      	beq.n	8008160 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	7c12      	ldrb	r2, [r2, #16]
 8008154:	f107 0108 	add.w	r1, r7, #8
 8008158:	4610      	mov	r0, r2
 800815a:	4798      	blx	r3
 800815c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800815e:	e077      	b.n	8008250 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008160:	6839      	ldr	r1, [r7, #0]
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fab1 	bl	80086ca <USBD_CtlError>
            err++;
 8008168:	7afb      	ldrb	r3, [r7, #11]
 800816a:	3301      	adds	r3, #1
 800816c:	72fb      	strb	r3, [r7, #11]
          break;
 800816e:	e06f      	b.n	8008250 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00b      	beq.n	8008194 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	7c12      	ldrb	r2, [r2, #16]
 8008188:	f107 0108 	add.w	r1, r7, #8
 800818c:	4610      	mov	r0, r2
 800818e:	4798      	blx	r3
 8008190:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008192:	e05d      	b.n	8008250 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008194:	6839      	ldr	r1, [r7, #0]
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 fa97 	bl	80086ca <USBD_CtlError>
            err++;
 800819c:	7afb      	ldrb	r3, [r7, #11]
 800819e:	3301      	adds	r3, #1
 80081a0:	72fb      	strb	r3, [r7, #11]
          break;
 80081a2:	e055      	b.n	8008250 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081aa:	691b      	ldr	r3, [r3, #16]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00b      	beq.n	80081c8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081b6:	691b      	ldr	r3, [r3, #16]
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	7c12      	ldrb	r2, [r2, #16]
 80081bc:	f107 0108 	add.w	r1, r7, #8
 80081c0:	4610      	mov	r0, r2
 80081c2:	4798      	blx	r3
 80081c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081c6:	e043      	b.n	8008250 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081c8:	6839      	ldr	r1, [r7, #0]
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fa7d 	bl	80086ca <USBD_CtlError>
            err++;
 80081d0:	7afb      	ldrb	r3, [r7, #11]
 80081d2:	3301      	adds	r3, #1
 80081d4:	72fb      	strb	r3, [r7, #11]
          break;
 80081d6:	e03b      	b.n	8008250 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081de:	695b      	ldr	r3, [r3, #20]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00b      	beq.n	80081fc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081ea:	695b      	ldr	r3, [r3, #20]
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	7c12      	ldrb	r2, [r2, #16]
 80081f0:	f107 0108 	add.w	r1, r7, #8
 80081f4:	4610      	mov	r0, r2
 80081f6:	4798      	blx	r3
 80081f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081fa:	e029      	b.n	8008250 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081fc:	6839      	ldr	r1, [r7, #0]
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 fa63 	bl	80086ca <USBD_CtlError>
            err++;
 8008204:	7afb      	ldrb	r3, [r7, #11]
 8008206:	3301      	adds	r3, #1
 8008208:	72fb      	strb	r3, [r7, #11]
          break;
 800820a:	e021      	b.n	8008250 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008212:	699b      	ldr	r3, [r3, #24]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d00b      	beq.n	8008230 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800821e:	699b      	ldr	r3, [r3, #24]
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	7c12      	ldrb	r2, [r2, #16]
 8008224:	f107 0108 	add.w	r1, r7, #8
 8008228:	4610      	mov	r0, r2
 800822a:	4798      	blx	r3
 800822c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800822e:	e00f      	b.n	8008250 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008230:	6839      	ldr	r1, [r7, #0]
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 fa49 	bl	80086ca <USBD_CtlError>
            err++;
 8008238:	7afb      	ldrb	r3, [r7, #11]
 800823a:	3301      	adds	r3, #1
 800823c:	72fb      	strb	r3, [r7, #11]
          break;
 800823e:	e007      	b.n	8008250 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008240:	6839      	ldr	r1, [r7, #0]
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 fa41 	bl	80086ca <USBD_CtlError>
          err++;
 8008248:	7afb      	ldrb	r3, [r7, #11]
 800824a:	3301      	adds	r3, #1
 800824c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800824e:	bf00      	nop
      }
      break;
 8008250:	e037      	b.n	80082c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	7c1b      	ldrb	r3, [r3, #16]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d109      	bne.n	800826e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008262:	f107 0208 	add.w	r2, r7, #8
 8008266:	4610      	mov	r0, r2
 8008268:	4798      	blx	r3
 800826a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800826c:	e029      	b.n	80082c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800826e:	6839      	ldr	r1, [r7, #0]
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 fa2a 	bl	80086ca <USBD_CtlError>
        err++;
 8008276:	7afb      	ldrb	r3, [r7, #11]
 8008278:	3301      	adds	r3, #1
 800827a:	72fb      	strb	r3, [r7, #11]
      break;
 800827c:	e021      	b.n	80082c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	7c1b      	ldrb	r3, [r3, #16]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d10d      	bne.n	80082a2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800828c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800828e:	f107 0208 	add.w	r2, r7, #8
 8008292:	4610      	mov	r0, r2
 8008294:	4798      	blx	r3
 8008296:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	3301      	adds	r3, #1
 800829c:	2207      	movs	r2, #7
 800829e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082a0:	e00f      	b.n	80082c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80082a2:	6839      	ldr	r1, [r7, #0]
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 fa10 	bl	80086ca <USBD_CtlError>
        err++;
 80082aa:	7afb      	ldrb	r3, [r7, #11]
 80082ac:	3301      	adds	r3, #1
 80082ae:	72fb      	strb	r3, [r7, #11]
      break;
 80082b0:	e007      	b.n	80082c2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80082b2:	6839      	ldr	r1, [r7, #0]
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 fa08 	bl	80086ca <USBD_CtlError>
      err++;
 80082ba:	7afb      	ldrb	r3, [r7, #11]
 80082bc:	3301      	adds	r3, #1
 80082be:	72fb      	strb	r3, [r7, #11]
      break;
 80082c0:	bf00      	nop
  }

  if (err != 0U)
 80082c2:	7afb      	ldrb	r3, [r7, #11]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d11e      	bne.n	8008306 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	88db      	ldrh	r3, [r3, #6]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d016      	beq.n	80082fe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80082d0:	893b      	ldrh	r3, [r7, #8]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00e      	beq.n	80082f4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	88da      	ldrh	r2, [r3, #6]
 80082da:	893b      	ldrh	r3, [r7, #8]
 80082dc:	4293      	cmp	r3, r2
 80082de:	bf28      	it	cs
 80082e0:	4613      	movcs	r3, r2
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80082e6:	893b      	ldrh	r3, [r7, #8]
 80082e8:	461a      	mov	r2, r3
 80082ea:	68f9      	ldr	r1, [r7, #12]
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 fa5d 	bl	80087ac <USBD_CtlSendData>
 80082f2:	e009      	b.n	8008308 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80082f4:	6839      	ldr	r1, [r7, #0]
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 f9e7 	bl	80086ca <USBD_CtlError>
 80082fc:	e004      	b.n	8008308 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 faae 	bl	8008860 <USBD_CtlSendStatus>
 8008304:	e000      	b.n	8008308 <USBD_GetDescriptor+0x2cc>
    return;
 8008306:	bf00      	nop
  }
}
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop

08008310 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	889b      	ldrh	r3, [r3, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d131      	bne.n	8008386 <USBD_SetAddress+0x76>
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	88db      	ldrh	r3, [r3, #6]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d12d      	bne.n	8008386 <USBD_SetAddress+0x76>
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	885b      	ldrh	r3, [r3, #2]
 800832e:	2b7f      	cmp	r3, #127	; 0x7f
 8008330:	d829      	bhi.n	8008386 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	885b      	ldrh	r3, [r3, #2]
 8008336:	b2db      	uxtb	r3, r3
 8008338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800833c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008344:	b2db      	uxtb	r3, r3
 8008346:	2b03      	cmp	r3, #3
 8008348:	d104      	bne.n	8008354 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800834a:	6839      	ldr	r1, [r7, #0]
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 f9bc 	bl	80086ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008352:	e01d      	b.n	8008390 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	7bfa      	ldrb	r2, [r7, #15]
 8008358:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800835c:	7bfb      	ldrb	r3, [r7, #15]
 800835e:	4619      	mov	r1, r3
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 feef 	bl	8009144 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fa7a 	bl	8008860 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800836c:	7bfb      	ldrb	r3, [r7, #15]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d004      	beq.n	800837c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2202      	movs	r2, #2
 8008376:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800837a:	e009      	b.n	8008390 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008384:	e004      	b.n	8008390 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008386:	6839      	ldr	r1, [r7, #0]
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 f99e 	bl	80086ca <USBD_CtlError>
  }
}
 800838e:	bf00      	nop
 8008390:	bf00      	nop
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083a2:	2300      	movs	r3, #0
 80083a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	885b      	ldrh	r3, [r3, #2]
 80083aa:	b2da      	uxtb	r2, r3
 80083ac:	4b4e      	ldr	r3, [pc, #312]	; (80084e8 <USBD_SetConfig+0x150>)
 80083ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80083b0:	4b4d      	ldr	r3, [pc, #308]	; (80084e8 <USBD_SetConfig+0x150>)
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d905      	bls.n	80083c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80083b8:	6839      	ldr	r1, [r7, #0]
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 f985 	bl	80086ca <USBD_CtlError>
    return USBD_FAIL;
 80083c0:	2303      	movs	r3, #3
 80083c2:	e08c      	b.n	80084de <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	d002      	beq.n	80083d6 <USBD_SetConfig+0x3e>
 80083d0:	2b03      	cmp	r3, #3
 80083d2:	d029      	beq.n	8008428 <USBD_SetConfig+0x90>
 80083d4:	e075      	b.n	80084c2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80083d6:	4b44      	ldr	r3, [pc, #272]	; (80084e8 <USBD_SetConfig+0x150>)
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d020      	beq.n	8008420 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80083de:	4b42      	ldr	r3, [pc, #264]	; (80084e8 <USBD_SetConfig+0x150>)
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	461a      	mov	r2, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80083e8:	4b3f      	ldr	r3, [pc, #252]	; (80084e8 <USBD_SetConfig+0x150>)
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	4619      	mov	r1, r3
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f7fe ffe1 	bl	80073b6 <USBD_SetClassConfig>
 80083f4:	4603      	mov	r3, r0
 80083f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80083f8:	7bfb      	ldrb	r3, [r7, #15]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d008      	beq.n	8008410 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80083fe:	6839      	ldr	r1, [r7, #0]
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 f962 	bl	80086ca <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2202      	movs	r2, #2
 800840a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800840e:	e065      	b.n	80084dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 fa25 	bl	8008860 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2203      	movs	r2, #3
 800841a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800841e:	e05d      	b.n	80084dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 fa1d 	bl	8008860 <USBD_CtlSendStatus>
      break;
 8008426:	e059      	b.n	80084dc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008428:	4b2f      	ldr	r3, [pc, #188]	; (80084e8 <USBD_SetConfig+0x150>)
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d112      	bne.n	8008456 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2202      	movs	r2, #2
 8008434:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008438:	4b2b      	ldr	r3, [pc, #172]	; (80084e8 <USBD_SetConfig+0x150>)
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	461a      	mov	r2, r3
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008442:	4b29      	ldr	r3, [pc, #164]	; (80084e8 <USBD_SetConfig+0x150>)
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	4619      	mov	r1, r3
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f7fe ffd0 	bl	80073ee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 fa06 	bl	8008860 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008454:	e042      	b.n	80084dc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008456:	4b24      	ldr	r3, [pc, #144]	; (80084e8 <USBD_SetConfig+0x150>)
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	461a      	mov	r2, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	429a      	cmp	r2, r3
 8008462:	d02a      	beq.n	80084ba <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	b2db      	uxtb	r3, r3
 800846a:	4619      	mov	r1, r3
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f7fe ffbe 	bl	80073ee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008472:	4b1d      	ldr	r3, [pc, #116]	; (80084e8 <USBD_SetConfig+0x150>)
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	461a      	mov	r2, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800847c:	4b1a      	ldr	r3, [pc, #104]	; (80084e8 <USBD_SetConfig+0x150>)
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	4619      	mov	r1, r3
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f7fe ff97 	bl	80073b6 <USBD_SetClassConfig>
 8008488:	4603      	mov	r3, r0
 800848a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800848c:	7bfb      	ldrb	r3, [r7, #15]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d00f      	beq.n	80084b2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008492:	6839      	ldr	r1, [r7, #0]
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 f918 	bl	80086ca <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	4619      	mov	r1, r3
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f7fe ffa3 	bl	80073ee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2202      	movs	r2, #2
 80084ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80084b0:	e014      	b.n	80084dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 f9d4 	bl	8008860 <USBD_CtlSendStatus>
      break;
 80084b8:	e010      	b.n	80084dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 f9d0 	bl	8008860 <USBD_CtlSendStatus>
      break;
 80084c0:	e00c      	b.n	80084dc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80084c2:	6839      	ldr	r1, [r7, #0]
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 f900 	bl	80086ca <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80084ca:	4b07      	ldr	r3, [pc, #28]	; (80084e8 <USBD_SetConfig+0x150>)
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	4619      	mov	r1, r3
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f7fe ff8c 	bl	80073ee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80084d6:	2303      	movs	r3, #3
 80084d8:	73fb      	strb	r3, [r7, #15]
      break;
 80084da:	bf00      	nop
  }

  return ret;
 80084dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	200003e4 	.word	0x200003e4

080084ec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	88db      	ldrh	r3, [r3, #6]
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d004      	beq.n	8008508 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 f8e2 	bl	80086ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008506:	e023      	b.n	8008550 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800850e:	b2db      	uxtb	r3, r3
 8008510:	2b02      	cmp	r3, #2
 8008512:	dc02      	bgt.n	800851a <USBD_GetConfig+0x2e>
 8008514:	2b00      	cmp	r3, #0
 8008516:	dc03      	bgt.n	8008520 <USBD_GetConfig+0x34>
 8008518:	e015      	b.n	8008546 <USBD_GetConfig+0x5a>
 800851a:	2b03      	cmp	r3, #3
 800851c:	d00b      	beq.n	8008536 <USBD_GetConfig+0x4a>
 800851e:	e012      	b.n	8008546 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	3308      	adds	r3, #8
 800852a:	2201      	movs	r2, #1
 800852c:	4619      	mov	r1, r3
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 f93c 	bl	80087ac <USBD_CtlSendData>
        break;
 8008534:	e00c      	b.n	8008550 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	3304      	adds	r3, #4
 800853a:	2201      	movs	r2, #1
 800853c:	4619      	mov	r1, r3
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 f934 	bl	80087ac <USBD_CtlSendData>
        break;
 8008544:	e004      	b.n	8008550 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008546:	6839      	ldr	r1, [r7, #0]
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 f8be 	bl	80086ca <USBD_CtlError>
        break;
 800854e:	bf00      	nop
}
 8008550:	bf00      	nop
 8008552:	3708      	adds	r7, #8
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008568:	b2db      	uxtb	r3, r3
 800856a:	3b01      	subs	r3, #1
 800856c:	2b02      	cmp	r3, #2
 800856e:	d81e      	bhi.n	80085ae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	88db      	ldrh	r3, [r3, #6]
 8008574:	2b02      	cmp	r3, #2
 8008576:	d004      	beq.n	8008582 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008578:	6839      	ldr	r1, [r7, #0]
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f8a5 	bl	80086ca <USBD_CtlError>
        break;
 8008580:	e01a      	b.n	80085b8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2201      	movs	r2, #1
 8008586:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800858e:	2b00      	cmp	r3, #0
 8008590:	d005      	beq.n	800859e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	f043 0202 	orr.w	r2, r3, #2
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	330c      	adds	r3, #12
 80085a2:	2202      	movs	r2, #2
 80085a4:	4619      	mov	r1, r3
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 f900 	bl	80087ac <USBD_CtlSendData>
      break;
 80085ac:	e004      	b.n	80085b8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80085ae:	6839      	ldr	r1, [r7, #0]
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 f88a 	bl	80086ca <USBD_CtlError>
      break;
 80085b6:	bf00      	nop
  }
}
 80085b8:	bf00      	nop
 80085ba:	3708      	adds	r7, #8
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	885b      	ldrh	r3, [r3, #2]
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d107      	bne.n	80085e2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2201      	movs	r2, #1
 80085d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f940 	bl	8008860 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80085e0:	e013      	b.n	800860a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	885b      	ldrh	r3, [r3, #2]
 80085e6:	2b02      	cmp	r3, #2
 80085e8:	d10b      	bne.n	8008602 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	889b      	ldrh	r3, [r3, #4]
 80085ee:	0a1b      	lsrs	r3, r3, #8
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	b2da      	uxtb	r2, r3
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 f930 	bl	8008860 <USBD_CtlSendStatus>
}
 8008600:	e003      	b.n	800860a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008602:	6839      	ldr	r1, [r7, #0]
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 f860 	bl	80086ca <USBD_CtlError>
}
 800860a:	bf00      	nop
 800860c:	3708      	adds	r7, #8
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b082      	sub	sp, #8
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
 800861a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008622:	b2db      	uxtb	r3, r3
 8008624:	3b01      	subs	r3, #1
 8008626:	2b02      	cmp	r3, #2
 8008628:	d80b      	bhi.n	8008642 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	885b      	ldrh	r3, [r3, #2]
 800862e:	2b01      	cmp	r3, #1
 8008630:	d10c      	bne.n	800864c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 f910 	bl	8008860 <USBD_CtlSendStatus>
      }
      break;
 8008640:	e004      	b.n	800864c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008642:	6839      	ldr	r1, [r7, #0]
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 f840 	bl	80086ca <USBD_CtlError>
      break;
 800864a:	e000      	b.n	800864e <USBD_ClrFeature+0x3c>
      break;
 800864c:	bf00      	nop
  }
}
 800864e:	bf00      	nop
 8008650:	3708      	adds	r7, #8
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}

08008656 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008656:	b580      	push	{r7, lr}
 8008658:	b084      	sub	sp, #16
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
 800865e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	781a      	ldrb	r2, [r3, #0]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	3301      	adds	r3, #1
 8008670:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	781a      	ldrb	r2, [r3, #0]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	3301      	adds	r3, #1
 800867e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008680:	68f8      	ldr	r0, [r7, #12]
 8008682:	f7ff fa41 	bl	8007b08 <SWAPBYTE>
 8008686:	4603      	mov	r3, r0
 8008688:	461a      	mov	r2, r3
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	3301      	adds	r3, #1
 8008692:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	3301      	adds	r3, #1
 8008698:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800869a:	68f8      	ldr	r0, [r7, #12]
 800869c:	f7ff fa34 	bl	8007b08 <SWAPBYTE>
 80086a0:	4603      	mov	r3, r0
 80086a2:	461a      	mov	r2, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	3301      	adds	r3, #1
 80086ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	3301      	adds	r3, #1
 80086b2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80086b4:	68f8      	ldr	r0, [r7, #12]
 80086b6:	f7ff fa27 	bl	8007b08 <SWAPBYTE>
 80086ba:	4603      	mov	r3, r0
 80086bc:	461a      	mov	r2, r3
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	80da      	strh	r2, [r3, #6]
}
 80086c2:	bf00      	nop
 80086c4:	3710      	adds	r7, #16
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}

080086ca <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b082      	sub	sp, #8
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
 80086d2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80086d4:	2180      	movs	r1, #128	; 0x80
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 fcca 	bl	8009070 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80086dc:	2100      	movs	r1, #0
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 fcc6 	bl	8009070 <USBD_LL_StallEP>
}
 80086e4:	bf00      	nop
 80086e6:	3708      	adds	r7, #8
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b086      	sub	sp, #24
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80086f8:	2300      	movs	r3, #0
 80086fa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d036      	beq.n	8008770 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008706:	6938      	ldr	r0, [r7, #16]
 8008708:	f000 f836 	bl	8008778 <USBD_GetLen>
 800870c:	4603      	mov	r3, r0
 800870e:	3301      	adds	r3, #1
 8008710:	b29b      	uxth	r3, r3
 8008712:	005b      	lsls	r3, r3, #1
 8008714:	b29a      	uxth	r2, r3
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800871a:	7dfb      	ldrb	r3, [r7, #23]
 800871c:	68ba      	ldr	r2, [r7, #8]
 800871e:	4413      	add	r3, r2
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	7812      	ldrb	r2, [r2, #0]
 8008724:	701a      	strb	r2, [r3, #0]
  idx++;
 8008726:	7dfb      	ldrb	r3, [r7, #23]
 8008728:	3301      	adds	r3, #1
 800872a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800872c:	7dfb      	ldrb	r3, [r7, #23]
 800872e:	68ba      	ldr	r2, [r7, #8]
 8008730:	4413      	add	r3, r2
 8008732:	2203      	movs	r2, #3
 8008734:	701a      	strb	r2, [r3, #0]
  idx++;
 8008736:	7dfb      	ldrb	r3, [r7, #23]
 8008738:	3301      	adds	r3, #1
 800873a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800873c:	e013      	b.n	8008766 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800873e:	7dfb      	ldrb	r3, [r7, #23]
 8008740:	68ba      	ldr	r2, [r7, #8]
 8008742:	4413      	add	r3, r2
 8008744:	693a      	ldr	r2, [r7, #16]
 8008746:	7812      	ldrb	r2, [r2, #0]
 8008748:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	3301      	adds	r3, #1
 800874e:	613b      	str	r3, [r7, #16]
    idx++;
 8008750:	7dfb      	ldrb	r3, [r7, #23]
 8008752:	3301      	adds	r3, #1
 8008754:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008756:	7dfb      	ldrb	r3, [r7, #23]
 8008758:	68ba      	ldr	r2, [r7, #8]
 800875a:	4413      	add	r3, r2
 800875c:	2200      	movs	r2, #0
 800875e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008760:	7dfb      	ldrb	r3, [r7, #23]
 8008762:	3301      	adds	r3, #1
 8008764:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d1e7      	bne.n	800873e <USBD_GetString+0x52>
 800876e:	e000      	b.n	8008772 <USBD_GetString+0x86>
    return;
 8008770:	bf00      	nop
  }
}
 8008772:	3718      	adds	r7, #24
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008778:	b480      	push	{r7}
 800877a:	b085      	sub	sp, #20
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008780:	2300      	movs	r3, #0
 8008782:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008788:	e005      	b.n	8008796 <USBD_GetLen+0x1e>
  {
    len++;
 800878a:	7bfb      	ldrb	r3, [r7, #15]
 800878c:	3301      	adds	r3, #1
 800878e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	3301      	adds	r3, #1
 8008794:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d1f5      	bne.n	800878a <USBD_GetLen+0x12>
  }

  return len;
 800879e:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3714      	adds	r7, #20
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2202      	movs	r2, #2
 80087bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	68ba      	ldr	r2, [r7, #8]
 80087d0:	2100      	movs	r1, #0
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	f000 fcd5 	bl	8009182 <USBD_LL_Transmit>

  return USBD_OK;
 80087d8:	2300      	movs	r3, #0
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3710      	adds	r7, #16
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b084      	sub	sp, #16
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	60f8      	str	r0, [r7, #12]
 80087ea:	60b9      	str	r1, [r7, #8]
 80087ec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	68ba      	ldr	r2, [r7, #8]
 80087f2:	2100      	movs	r1, #0
 80087f4:	68f8      	ldr	r0, [r7, #12]
 80087f6:	f000 fcc4 	bl	8009182 <USBD_LL_Transmit>

  return USBD_OK;
 80087fa:	2300      	movs	r3, #0
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2203      	movs	r2, #3
 8008814:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	68ba      	ldr	r2, [r7, #8]
 800882c:	2100      	movs	r1, #0
 800882e:	68f8      	ldr	r0, [r7, #12]
 8008830:	f000 fcc8 	bl	80091c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b084      	sub	sp, #16
 8008842:	af00      	add	r7, sp, #0
 8008844:	60f8      	str	r0, [r7, #12]
 8008846:	60b9      	str	r1, [r7, #8]
 8008848:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	68ba      	ldr	r2, [r7, #8]
 800884e:	2100      	movs	r1, #0
 8008850:	68f8      	ldr	r0, [r7, #12]
 8008852:	f000 fcb7 	bl	80091c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	3710      	adds	r7, #16
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2204      	movs	r2, #4
 800886c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008870:	2300      	movs	r3, #0
 8008872:	2200      	movs	r2, #0
 8008874:	2100      	movs	r1, #0
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 fc83 	bl	8009182 <USBD_LL_Transmit>

  return USBD_OK;
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3708      	adds	r7, #8
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b082      	sub	sp, #8
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2205      	movs	r2, #5
 8008892:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008896:	2300      	movs	r3, #0
 8008898:	2200      	movs	r2, #0
 800889a:	2100      	movs	r1, #0
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 fc91 	bl	80091c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3708      	adds	r7, #8
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80088b0:	2200      	movs	r2, #0
 80088b2:	4912      	ldr	r1, [pc, #72]	; (80088fc <MX_USB_DEVICE_Init+0x50>)
 80088b4:	4812      	ldr	r0, [pc, #72]	; (8008900 <MX_USB_DEVICE_Init+0x54>)
 80088b6:	f7fe fd01 	bl	80072bc <USBD_Init>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d001      	beq.n	80088c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80088c0:	f7f8 f874 	bl	80009ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80088c4:	490f      	ldr	r1, [pc, #60]	; (8008904 <MX_USB_DEVICE_Init+0x58>)
 80088c6:	480e      	ldr	r0, [pc, #56]	; (8008900 <MX_USB_DEVICE_Init+0x54>)
 80088c8:	f7fe fd28 	bl	800731c <USBD_RegisterClass>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d001      	beq.n	80088d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80088d2:	f7f8 f86b 	bl	80009ac <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80088d6:	490c      	ldr	r1, [pc, #48]	; (8008908 <MX_USB_DEVICE_Init+0x5c>)
 80088d8:	4809      	ldr	r0, [pc, #36]	; (8008900 <MX_USB_DEVICE_Init+0x54>)
 80088da:	f7fe fcd5 	bl	8007288 <USBD_CUSTOM_HID_RegisterInterface>
 80088de:	4603      	mov	r3, r0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d001      	beq.n	80088e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80088e4:	f7f8 f862 	bl	80009ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80088e8:	4805      	ldr	r0, [pc, #20]	; (8008900 <MX_USB_DEVICE_Init+0x54>)
 80088ea:	f7fe fd4d 	bl	8007388 <USBD_Start>
 80088ee:	4603      	mov	r3, r0
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d001      	beq.n	80088f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80088f4:	f7f8 f85a 	bl	80009ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80088f8:	bf00      	nop
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	20000184 	.word	0x20000184
 8008900:	200003e8 	.word	0x200003e8
 8008904:	2000000c 	.word	0x2000000c
 8008908:	20000174 	.word	0x20000174

0800890c <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800890c:	b480      	push	{r7}
 800890e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008910:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008912:	4618      	mov	r0, r3
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800891c:	b480      	push	{r7}
 800891e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8008920:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008922:	4618      	mov	r0, r3
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t* buff)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 6 */
	// If buff[0] is 0, then this is a rumble packet
	if(buff[0] == 0) {
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d17b      	bne.n	8008a34 <CUSTOM_HID_OutEvent_FS+0x108>
		uint8_t weak_mag = buff[4];
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	791b      	ldrb	r3, [r3, #4]
 8008940:	73fb      	strb	r3, [r7, #15]
		uint8_t strong_mag = buff[3];
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	78db      	ldrb	r3, [r3, #3]
 8008946:	73bb      	strb	r3, [r7, #14]

		//First check the weak mag for the type of note to play
		if (weak_mag > 12 && weak_mag < 35) {
 8008948:	7bfb      	ldrb	r3, [r7, #15]
 800894a:	2b0c      	cmp	r3, #12
 800894c:	d909      	bls.n	8008962 <CUSTOM_HID_OutEvent_FS+0x36>
 800894e:	7bfb      	ldrb	r3, [r7, #15]
 8008950:	2b22      	cmp	r3, #34	; 0x22
 8008952:	d806      	bhi.n	8008962 <CUSTOM_HID_OutEvent_FS+0x36>
			HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)(good_low), 16024);
 8008954:	f643 6298 	movw	r2, #16024	; 0x3e98
 8008958:	493d      	ldr	r1, [pc, #244]	; (8008a50 <CUSTOM_HID_OutEvent_FS+0x124>)
 800895a:	483e      	ldr	r0, [pc, #248]	; (8008a54 <CUSTOM_HID_OutEvent_FS+0x128>)
 800895c:	f7f9 fe60 	bl	8002620 <HAL_I2S_Transmit_DMA>
 8008960:	e068      	b.n	8008a34 <CUSTOM_HID_OutEvent_FS+0x108>
		} else if (weak_mag > 38 && weak_mag < 61) {
 8008962:	7bfb      	ldrb	r3, [r7, #15]
 8008964:	2b26      	cmp	r3, #38	; 0x26
 8008966:	d909      	bls.n	800897c <CUSTOM_HID_OutEvent_FS+0x50>
 8008968:	7bfb      	ldrb	r3, [r7, #15]
 800896a:	2b3c      	cmp	r3, #60	; 0x3c
 800896c:	d806      	bhi.n	800897c <CUSTOM_HID_OutEvent_FS+0x50>
			HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)(good_mid), 16302);
 800896e:	f643 72ae 	movw	r2, #16302	; 0x3fae
 8008972:	4939      	ldr	r1, [pc, #228]	; (8008a58 <CUSTOM_HID_OutEvent_FS+0x12c>)
 8008974:	4837      	ldr	r0, [pc, #220]	; (8008a54 <CUSTOM_HID_OutEvent_FS+0x128>)
 8008976:	f7f9 fe53 	bl	8002620 <HAL_I2S_Transmit_DMA>
 800897a:	e05b      	b.n	8008a34 <CUSTOM_HID_OutEvent_FS+0x108>
		} else if (weak_mag > 63 && weak_mag < 87) {
 800897c:	7bfb      	ldrb	r3, [r7, #15]
 800897e:	2b3f      	cmp	r3, #63	; 0x3f
 8008980:	d909      	bls.n	8008996 <CUSTOM_HID_OutEvent_FS+0x6a>
 8008982:	7bfb      	ldrb	r3, [r7, #15]
 8008984:	2b56      	cmp	r3, #86	; 0x56
 8008986:	d806      	bhi.n	8008996 <CUSTOM_HID_OutEvent_FS+0x6a>
			HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)(good_high), 16036);
 8008988:	f643 62a4 	movw	r2, #16036	; 0x3ea4
 800898c:	4933      	ldr	r1, [pc, #204]	; (8008a5c <CUSTOM_HID_OutEvent_FS+0x130>)
 800898e:	4831      	ldr	r0, [pc, #196]	; (8008a54 <CUSTOM_HID_OutEvent_FS+0x128>)
 8008990:	f7f9 fe46 	bl	8002620 <HAL_I2S_Transmit_DMA>
 8008994:	e04e      	b.n	8008a34 <CUSTOM_HID_OutEvent_FS+0x108>
		} else if (weak_mag > 89 && weak_mag < 112) {
 8008996:	7bfb      	ldrb	r3, [r7, #15]
 8008998:	2b59      	cmp	r3, #89	; 0x59
 800899a:	d909      	bls.n	80089b0 <CUSTOM_HID_OutEvent_FS+0x84>
 800899c:	7bfb      	ldrb	r3, [r7, #15]
 800899e:	2b6f      	cmp	r3, #111	; 0x6f
 80089a0:	d806      	bhi.n	80089b0 <CUSTOM_HID_OutEvent_FS+0x84>
			HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)(bad_low), 24424);
 80089a2:	f645 7268 	movw	r2, #24424	; 0x5f68
 80089a6:	492e      	ldr	r1, [pc, #184]	; (8008a60 <CUSTOM_HID_OutEvent_FS+0x134>)
 80089a8:	482a      	ldr	r0, [pc, #168]	; (8008a54 <CUSTOM_HID_OutEvent_FS+0x128>)
 80089aa:	f7f9 fe39 	bl	8002620 <HAL_I2S_Transmit_DMA>
 80089ae:	e041      	b.n	8008a34 <CUSTOM_HID_OutEvent_FS+0x108>
		} else if (weak_mag > 115 && weak_mag < 138) {
 80089b0:	7bfb      	ldrb	r3, [r7, #15]
 80089b2:	2b73      	cmp	r3, #115	; 0x73
 80089b4:	d909      	bls.n	80089ca <CUSTOM_HID_OutEvent_FS+0x9e>
 80089b6:	7bfb      	ldrb	r3, [r7, #15]
 80089b8:	2b89      	cmp	r3, #137	; 0x89
 80089ba:	d806      	bhi.n	80089ca <CUSTOM_HID_OutEvent_FS+0x9e>
			HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)(bad_mid), 24424);
 80089bc:	f645 7268 	movw	r2, #24424	; 0x5f68
 80089c0:	4928      	ldr	r1, [pc, #160]	; (8008a64 <CUSTOM_HID_OutEvent_FS+0x138>)
 80089c2:	4824      	ldr	r0, [pc, #144]	; (8008a54 <CUSTOM_HID_OutEvent_FS+0x128>)
 80089c4:	f7f9 fe2c 	bl	8002620 <HAL_I2S_Transmit_DMA>
 80089c8:	e034      	b.n	8008a34 <CUSTOM_HID_OutEvent_FS+0x108>
		} else if (weak_mag > 140 && weak_mag < 163) {
 80089ca:	7bfb      	ldrb	r3, [r7, #15]
 80089cc:	2b8c      	cmp	r3, #140	; 0x8c
 80089ce:	d909      	bls.n	80089e4 <CUSTOM_HID_OutEvent_FS+0xb8>
 80089d0:	7bfb      	ldrb	r3, [r7, #15]
 80089d2:	2ba2      	cmp	r3, #162	; 0xa2
 80089d4:	d806      	bhi.n	80089e4 <CUSTOM_HID_OutEvent_FS+0xb8>
			HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)(bad_high), 24424);
 80089d6:	f645 7268 	movw	r2, #24424	; 0x5f68
 80089da:	4923      	ldr	r1, [pc, #140]	; (8008a68 <CUSTOM_HID_OutEvent_FS+0x13c>)
 80089dc:	481d      	ldr	r0, [pc, #116]	; (8008a54 <CUSTOM_HID_OutEvent_FS+0x128>)
 80089de:	f7f9 fe1f 	bl	8002620 <HAL_I2S_Transmit_DMA>
 80089e2:	e027      	b.n	8008a34 <CUSTOM_HID_OutEvent_FS+0x108>
		} else if (weak_mag > 166) {
 80089e4:	7bfb      	ldrb	r3, [r7, #15]
 80089e6:	2ba6      	cmp	r3, #166	; 0xa6
 80089e8:	d924      	bls.n	8008a34 <CUSTOM_HID_OutEvent_FS+0x108>
			//Any value greater than 166 says that one of the random sounds should be played
			//We select the random sound based on the number given in the strong mag, each
			//value gets an equal range
			if (strong_mag < 64) {
 80089ea:	7bbb      	ldrb	r3, [r7, #14]
 80089ec:	2b3f      	cmp	r3, #63	; 0x3f
 80089ee:	d806      	bhi.n	80089fe <CUSTOM_HID_OutEvent_FS+0xd2>
				HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)(noise_scream), 40246);
 80089f0:	f649 5236 	movw	r2, #40246	; 0x9d36
 80089f4:	491d      	ldr	r1, [pc, #116]	; (8008a6c <CUSTOM_HID_OutEvent_FS+0x140>)
 80089f6:	4817      	ldr	r0, [pc, #92]	; (8008a54 <CUSTOM_HID_OutEvent_FS+0x128>)
 80089f8:	f7f9 fe12 	bl	8002620 <HAL_I2S_Transmit_DMA>
 80089fc:	e01a      	b.n	8008a34 <CUSTOM_HID_OutEvent_FS+0x108>
			} else if (strong_mag < 128) {
 80089fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	db06      	blt.n	8008a14 <CUSTOM_HID_OutEvent_FS+0xe8>
				HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)(mario_oof), 14612);
 8008a06:	f643 1214 	movw	r2, #14612	; 0x3914
 8008a0a:	4919      	ldr	r1, [pc, #100]	; (8008a70 <CUSTOM_HID_OutEvent_FS+0x144>)
 8008a0c:	4811      	ldr	r0, [pc, #68]	; (8008a54 <CUSTOM_HID_OutEvent_FS+0x128>)
 8008a0e:	f7f9 fe07 	bl	8002620 <HAL_I2S_Transmit_DMA>
 8008a12:	e00f      	b.n	8008a34 <CUSTOM_HID_OutEvent_FS+0x108>
			} else if (strong_mag < 192) {
 8008a14:	7bbb      	ldrb	r3, [r7, #14]
 8008a16:	2bbf      	cmp	r3, #191	; 0xbf
 8008a18:	d806      	bhi.n	8008a28 <CUSTOM_HID_OutEvent_FS+0xfc>
				HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)(metal_pipe), 38118);
 8008a1a:	f249 42e6 	movw	r2, #38118	; 0x94e6
 8008a1e:	4915      	ldr	r1, [pc, #84]	; (8008a74 <CUSTOM_HID_OutEvent_FS+0x148>)
 8008a20:	480c      	ldr	r0, [pc, #48]	; (8008a54 <CUSTOM_HID_OutEvent_FS+0x128>)
 8008a22:	f7f9 fdfd 	bl	8002620 <HAL_I2S_Transmit_DMA>
 8008a26:	e005      	b.n	8008a34 <CUSTOM_HID_OutEvent_FS+0x108>
			} else if (strong_mag < 256) {
				HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)(mario_party_miss), 22074);
 8008a28:	f245 623a 	movw	r2, #22074	; 0x563a
 8008a2c:	4912      	ldr	r1, [pc, #72]	; (8008a78 <CUSTOM_HID_OutEvent_FS+0x14c>)
 8008a2e:	4809      	ldr	r0, [pc, #36]	; (8008a54 <CUSTOM_HID_OutEvent_FS+0x128>)
 8008a30:	f7f9 fdf6 	bl	8002620 <HAL_I2S_Transmit_DMA>
		}
	}


  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 8008a34:	4811      	ldr	r0, [pc, #68]	; (8008a7c <CUSTOM_HID_OutEvent_FS+0x150>)
 8008a36:	f7fe fbc7 	bl	80071c8 <USBD_CUSTOM_HID_ReceivePacket>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d002      	beq.n	8008a46 <CUSTOM_HID_OutEvent_FS+0x11a>
  {
    return -1;
 8008a40:	f04f 33ff 	mov.w	r3, #4294967295
 8008a44:	e000      	b.n	8008a48 <CUSTOM_HID_OutEvent_FS+0x11c>
  }

  return (USBD_OK);
 8008a46:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3710      	adds	r7, #16
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	0801901c 	.word	0x0801901c
 8008a54:	20000298 	.word	0x20000298
 8008a58:	080110c0 	.word	0x080110c0
 8008a5c:	08009378 	.word	0x08009378
 8008a60:	08038b44 	.word	0x08038b44
 8008a64:	0802cc48 	.word	0x0802cc48
 8008a68:	08020d4c 	.word	0x08020d4c
 8008a6c:	0805e68c 	.word	0x0805e68c
 8008a70:	08057438 	.word	0x08057438
 8008a74:	08044a40 	.word	0x08044a40
 8008a78:	08072124 	.word	0x08072124
 8008a7c:	200003e8 	.word	0x200003e8

08008a80 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	4603      	mov	r3, r0
 8008a88:	6039      	str	r1, [r7, #0]
 8008a8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	2212      	movs	r2, #18
 8008a90:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008a92:	4b03      	ldr	r3, [pc, #12]	; (8008aa0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr
 8008aa0:	200001a0 	.word	0x200001a0

08008aa4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	4603      	mov	r3, r0
 8008aac:	6039      	str	r1, [r7, #0]
 8008aae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	2204      	movs	r2, #4
 8008ab4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008ab6:	4b03      	ldr	r3, [pc, #12]	; (8008ac4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr
 8008ac4:	200001b4 	.word	0x200001b4

08008ac8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	4603      	mov	r3, r0
 8008ad0:	6039      	str	r1, [r7, #0]
 8008ad2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ad4:	79fb      	ldrb	r3, [r7, #7]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d105      	bne.n	8008ae6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ada:	683a      	ldr	r2, [r7, #0]
 8008adc:	4907      	ldr	r1, [pc, #28]	; (8008afc <USBD_FS_ProductStrDescriptor+0x34>)
 8008ade:	4808      	ldr	r0, [pc, #32]	; (8008b00 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ae0:	f7ff fe04 	bl	80086ec <USBD_GetString>
 8008ae4:	e004      	b.n	8008af0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ae6:	683a      	ldr	r2, [r7, #0]
 8008ae8:	4904      	ldr	r1, [pc, #16]	; (8008afc <USBD_FS_ProductStrDescriptor+0x34>)
 8008aea:	4805      	ldr	r0, [pc, #20]	; (8008b00 <USBD_FS_ProductStrDescriptor+0x38>)
 8008aec:	f7ff fdfe 	bl	80086ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8008af0:	4b02      	ldr	r3, [pc, #8]	; (8008afc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3708      	adds	r7, #8
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop
 8008afc:	200006c4 	.word	0x200006c4
 8008b00:	08009300 	.word	0x08009300

08008b04 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	6039      	str	r1, [r7, #0]
 8008b0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008b10:	683a      	ldr	r2, [r7, #0]
 8008b12:	4904      	ldr	r1, [pc, #16]	; (8008b24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008b14:	4804      	ldr	r0, [pc, #16]	; (8008b28 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008b16:	f7ff fde9 	bl	80086ec <USBD_GetString>
  return USBD_StrDesc;
 8008b1a:	4b02      	ldr	r3, [pc, #8]	; (8008b24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3708      	adds	r7, #8
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	200006c4 	.word	0x200006c4
 8008b28:	08009320 	.word	0x08009320

08008b2c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	4603      	mov	r3, r0
 8008b34:	6039      	str	r1, [r7, #0]
 8008b36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	221a      	movs	r2, #26
 8008b3c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008b3e:	f000 f843 	bl	8008bc8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008b42:	4b02      	ldr	r3, [pc, #8]	; (8008b4c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3708      	adds	r7, #8
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	200001b8 	.word	0x200001b8

08008b50 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	4603      	mov	r3, r0
 8008b58:	6039      	str	r1, [r7, #0]
 8008b5a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008b5c:	79fb      	ldrb	r3, [r7, #7]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d105      	bne.n	8008b6e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b62:	683a      	ldr	r2, [r7, #0]
 8008b64:	4907      	ldr	r1, [pc, #28]	; (8008b84 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b66:	4808      	ldr	r0, [pc, #32]	; (8008b88 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b68:	f7ff fdc0 	bl	80086ec <USBD_GetString>
 8008b6c:	e004      	b.n	8008b78 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b6e:	683a      	ldr	r2, [r7, #0]
 8008b70:	4904      	ldr	r1, [pc, #16]	; (8008b84 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b72:	4805      	ldr	r0, [pc, #20]	; (8008b88 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b74:	f7ff fdba 	bl	80086ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b78:	4b02      	ldr	r3, [pc, #8]	; (8008b84 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3708      	adds	r7, #8
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	200006c4 	.word	0x200006c4
 8008b88:	0800932c 	.word	0x0800932c

08008b8c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	4603      	mov	r3, r0
 8008b94:	6039      	str	r1, [r7, #0]
 8008b96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b98:	79fb      	ldrb	r3, [r7, #7]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d105      	bne.n	8008baa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b9e:	683a      	ldr	r2, [r7, #0]
 8008ba0:	4907      	ldr	r1, [pc, #28]	; (8008bc0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008ba2:	4808      	ldr	r0, [pc, #32]	; (8008bc4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ba4:	f7ff fda2 	bl	80086ec <USBD_GetString>
 8008ba8:	e004      	b.n	8008bb4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008baa:	683a      	ldr	r2, [r7, #0]
 8008bac:	4904      	ldr	r1, [pc, #16]	; (8008bc0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008bae:	4805      	ldr	r0, [pc, #20]	; (8008bc4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008bb0:	f7ff fd9c 	bl	80086ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8008bb4:	4b02      	ldr	r3, [pc, #8]	; (8008bc0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3708      	adds	r7, #8
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	200006c4 	.word	0x200006c4
 8008bc4:	08009340 	.word	0x08009340

08008bc8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008bce:	4b0f      	ldr	r3, [pc, #60]	; (8008c0c <Get_SerialNum+0x44>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008bd4:	4b0e      	ldr	r3, [pc, #56]	; (8008c10 <Get_SerialNum+0x48>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008bda:	4b0e      	ldr	r3, [pc, #56]	; (8008c14 <Get_SerialNum+0x4c>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008be0:	68fa      	ldr	r2, [r7, #12]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4413      	add	r3, r2
 8008be6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d009      	beq.n	8008c02 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008bee:	2208      	movs	r2, #8
 8008bf0:	4909      	ldr	r1, [pc, #36]	; (8008c18 <Get_SerialNum+0x50>)
 8008bf2:	68f8      	ldr	r0, [r7, #12]
 8008bf4:	f000 f814 	bl	8008c20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008bf8:	2204      	movs	r2, #4
 8008bfa:	4908      	ldr	r1, [pc, #32]	; (8008c1c <Get_SerialNum+0x54>)
 8008bfc:	68b8      	ldr	r0, [r7, #8]
 8008bfe:	f000 f80f 	bl	8008c20 <IntToUnicode>
  }
}
 8008c02:	bf00      	nop
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	1fff7a10 	.word	0x1fff7a10
 8008c10:	1fff7a14 	.word	0x1fff7a14
 8008c14:	1fff7a18 	.word	0x1fff7a18
 8008c18:	200001ba 	.word	0x200001ba
 8008c1c:	200001ca 	.word	0x200001ca

08008c20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b087      	sub	sp, #28
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	4613      	mov	r3, r2
 8008c2c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008c32:	2300      	movs	r3, #0
 8008c34:	75fb      	strb	r3, [r7, #23]
 8008c36:	e027      	b.n	8008c88 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	0f1b      	lsrs	r3, r3, #28
 8008c3c:	2b09      	cmp	r3, #9
 8008c3e:	d80b      	bhi.n	8008c58 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	0f1b      	lsrs	r3, r3, #28
 8008c44:	b2da      	uxtb	r2, r3
 8008c46:	7dfb      	ldrb	r3, [r7, #23]
 8008c48:	005b      	lsls	r3, r3, #1
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	440b      	add	r3, r1
 8008c50:	3230      	adds	r2, #48	; 0x30
 8008c52:	b2d2      	uxtb	r2, r2
 8008c54:	701a      	strb	r2, [r3, #0]
 8008c56:	e00a      	b.n	8008c6e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	0f1b      	lsrs	r3, r3, #28
 8008c5c:	b2da      	uxtb	r2, r3
 8008c5e:	7dfb      	ldrb	r3, [r7, #23]
 8008c60:	005b      	lsls	r3, r3, #1
 8008c62:	4619      	mov	r1, r3
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	440b      	add	r3, r1
 8008c68:	3237      	adds	r2, #55	; 0x37
 8008c6a:	b2d2      	uxtb	r2, r2
 8008c6c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	011b      	lsls	r3, r3, #4
 8008c72:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008c74:	7dfb      	ldrb	r3, [r7, #23]
 8008c76:	005b      	lsls	r3, r3, #1
 8008c78:	3301      	adds	r3, #1
 8008c7a:	68ba      	ldr	r2, [r7, #8]
 8008c7c:	4413      	add	r3, r2
 8008c7e:	2200      	movs	r2, #0
 8008c80:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008c82:	7dfb      	ldrb	r3, [r7, #23]
 8008c84:	3301      	adds	r3, #1
 8008c86:	75fb      	strb	r3, [r7, #23]
 8008c88:	7dfa      	ldrb	r2, [r7, #23]
 8008c8a:	79fb      	ldrb	r3, [r7, #7]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d3d3      	bcc.n	8008c38 <IntToUnicode+0x18>
  }
}
 8008c90:	bf00      	nop
 8008c92:	bf00      	nop
 8008c94:	371c      	adds	r7, #28
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr
	...

08008ca0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b08a      	sub	sp, #40	; 0x28
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ca8:	f107 0314 	add.w	r3, r7, #20
 8008cac:	2200      	movs	r2, #0
 8008cae:	601a      	str	r2, [r3, #0]
 8008cb0:	605a      	str	r2, [r3, #4]
 8008cb2:	609a      	str	r2, [r3, #8]
 8008cb4:	60da      	str	r2, [r3, #12]
 8008cb6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cc0:	d13a      	bne.n	8008d38 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	613b      	str	r3, [r7, #16]
 8008cc6:	4b1e      	ldr	r3, [pc, #120]	; (8008d40 <HAL_PCD_MspInit+0xa0>)
 8008cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cca:	4a1d      	ldr	r2, [pc, #116]	; (8008d40 <HAL_PCD_MspInit+0xa0>)
 8008ccc:	f043 0301 	orr.w	r3, r3, #1
 8008cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8008cd2:	4b1b      	ldr	r3, [pc, #108]	; (8008d40 <HAL_PCD_MspInit+0xa0>)
 8008cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cd6:	f003 0301 	and.w	r3, r3, #1
 8008cda:	613b      	str	r3, [r7, #16]
 8008cdc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008cde:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ce4:	2302      	movs	r3, #2
 8008ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008cec:	2303      	movs	r3, #3
 8008cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008cf0:	230a      	movs	r3, #10
 8008cf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cf4:	f107 0314 	add.w	r3, r7, #20
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	4812      	ldr	r0, [pc, #72]	; (8008d44 <HAL_PCD_MspInit+0xa4>)
 8008cfc:	f7f9 f99a 	bl	8002034 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008d00:	4b0f      	ldr	r3, [pc, #60]	; (8008d40 <HAL_PCD_MspInit+0xa0>)
 8008d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d04:	4a0e      	ldr	r2, [pc, #56]	; (8008d40 <HAL_PCD_MspInit+0xa0>)
 8008d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d0a:	6353      	str	r3, [r2, #52]	; 0x34
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	60fb      	str	r3, [r7, #12]
 8008d10:	4b0b      	ldr	r3, [pc, #44]	; (8008d40 <HAL_PCD_MspInit+0xa0>)
 8008d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d14:	4a0a      	ldr	r2, [pc, #40]	; (8008d40 <HAL_PCD_MspInit+0xa0>)
 8008d16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d1a:	6453      	str	r3, [r2, #68]	; 0x44
 8008d1c:	4b08      	ldr	r3, [pc, #32]	; (8008d40 <HAL_PCD_MspInit+0xa0>)
 8008d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d24:	60fb      	str	r3, [r7, #12]
 8008d26:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008d28:	2200      	movs	r2, #0
 8008d2a:	2100      	movs	r1, #0
 8008d2c:	2043      	movs	r0, #67	; 0x43
 8008d2e:	f7f8 fdda 	bl	80018e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008d32:	2043      	movs	r0, #67	; 0x43
 8008d34:	f7f8 fdf3 	bl	800191e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008d38:	bf00      	nop
 8008d3a:	3728      	adds	r7, #40	; 0x28
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	40023800 	.word	0x40023800
 8008d44:	40020000 	.word	0x40020000

08008d48 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	4610      	mov	r0, r2
 8008d60:	f7fe fb5f 	bl	8007422 <USBD_LL_SetupStage>
}
 8008d64:	bf00      	nop
 8008d66:	3708      	adds	r7, #8
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	460b      	mov	r3, r1
 8008d76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8008d7e:	78fa      	ldrb	r2, [r7, #3]
 8008d80:	6879      	ldr	r1, [r7, #4]
 8008d82:	4613      	mov	r3, r2
 8008d84:	00db      	lsls	r3, r3, #3
 8008d86:	4413      	add	r3, r2
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	440b      	add	r3, r1
 8008d8c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	78fb      	ldrb	r3, [r7, #3]
 8008d94:	4619      	mov	r1, r3
 8008d96:	f7fe fb99 	bl	80074cc <USBD_LL_DataOutStage>
}
 8008d9a:	bf00      	nop
 8008d9c:	3708      	adds	r7, #8
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b082      	sub	sp, #8
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
 8008daa:	460b      	mov	r3, r1
 8008dac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8008db4:	78fa      	ldrb	r2, [r7, #3]
 8008db6:	6879      	ldr	r1, [r7, #4]
 8008db8:	4613      	mov	r3, r2
 8008dba:	00db      	lsls	r3, r3, #3
 8008dbc:	4413      	add	r3, r2
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	440b      	add	r3, r1
 8008dc2:	3320      	adds	r3, #32
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	78fb      	ldrb	r3, [r7, #3]
 8008dc8:	4619      	mov	r1, r3
 8008dca:	f7fe fc32 	bl	8007632 <USBD_LL_DataInStage>
}
 8008dce:	bf00      	nop
 8008dd0:	3708      	adds	r7, #8
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b082      	sub	sp, #8
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008de4:	4618      	mov	r0, r3
 8008de6:	f7fe fd6c 	bl	80078c2 <USBD_LL_SOF>
}
 8008dea:	bf00      	nop
 8008dec:	3708      	adds	r7, #8
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b084      	sub	sp, #16
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	79db      	ldrb	r3, [r3, #7]
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d001      	beq.n	8008e0a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008e06:	f7f7 fdd1 	bl	80009ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008e10:	7bfa      	ldrb	r2, [r7, #15]
 8008e12:	4611      	mov	r1, r2
 8008e14:	4618      	mov	r0, r3
 8008e16:	f7fe fd10 	bl	800783a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008e20:	4618      	mov	r0, r3
 8008e22:	f7fe fcb8 	bl	8007796 <USBD_LL_Reset>
}
 8008e26:	bf00      	nop
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
	...

08008e30 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7fe fd0b 	bl	800785a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	6812      	ldr	r2, [r2, #0]
 8008e52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008e56:	f043 0301 	orr.w	r3, r3, #1
 8008e5a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	7adb      	ldrb	r3, [r3, #11]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d005      	beq.n	8008e70 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e64:	4b04      	ldr	r3, [pc, #16]	; (8008e78 <HAL_PCD_SuspendCallback+0x48>)
 8008e66:	691b      	ldr	r3, [r3, #16]
 8008e68:	4a03      	ldr	r2, [pc, #12]	; (8008e78 <HAL_PCD_SuspendCallback+0x48>)
 8008e6a:	f043 0306 	orr.w	r3, r3, #6
 8008e6e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008e70:	bf00      	nop
 8008e72:	3708      	adds	r7, #8
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	e000ed00 	.word	0xe000ed00

08008e7c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7fe fd01 	bl	8007892 <USBD_LL_Resume>
}
 8008e90:	bf00      	nop
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008eaa:	78fa      	ldrb	r2, [r7, #3]
 8008eac:	4611      	mov	r1, r2
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7fe fd59 	bl	8007966 <USBD_LL_IsoOUTIncomplete>
}
 8008eb4:	bf00      	nop
 8008eb6:	3708      	adds	r7, #8
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008ece:	78fa      	ldrb	r2, [r7, #3]
 8008ed0:	4611      	mov	r1, r2
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7fe fd15 	bl	8007902 <USBD_LL_IsoINIncomplete>
}
 8008ed8:	bf00      	nop
 8008eda:	3708      	adds	r7, #8
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7fe fd6b 	bl	80079ca <USBD_LL_DevConnected>
}
 8008ef4:	bf00      	nop
 8008ef6:	3708      	adds	r7, #8
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7fe fd68 	bl	80079e0 <USBD_LL_DevDisconnected>
}
 8008f10:	bf00      	nop
 8008f12:	3708      	adds	r7, #8
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d13c      	bne.n	8008fa2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008f28:	4a20      	ldr	r2, [pc, #128]	; (8008fac <USBD_LL_Init+0x94>)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4a1e      	ldr	r2, [pc, #120]	; (8008fac <USBD_LL_Init+0x94>)
 8008f34:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008f38:	4b1c      	ldr	r3, [pc, #112]	; (8008fac <USBD_LL_Init+0x94>)
 8008f3a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008f3e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008f40:	4b1a      	ldr	r3, [pc, #104]	; (8008fac <USBD_LL_Init+0x94>)
 8008f42:	2204      	movs	r2, #4
 8008f44:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008f46:	4b19      	ldr	r3, [pc, #100]	; (8008fac <USBD_LL_Init+0x94>)
 8008f48:	2202      	movs	r2, #2
 8008f4a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008f4c:	4b17      	ldr	r3, [pc, #92]	; (8008fac <USBD_LL_Init+0x94>)
 8008f4e:	2200      	movs	r2, #0
 8008f50:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008f52:	4b16      	ldr	r3, [pc, #88]	; (8008fac <USBD_LL_Init+0x94>)
 8008f54:	2202      	movs	r2, #2
 8008f56:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008f58:	4b14      	ldr	r3, [pc, #80]	; (8008fac <USBD_LL_Init+0x94>)
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008f5e:	4b13      	ldr	r3, [pc, #76]	; (8008fac <USBD_LL_Init+0x94>)
 8008f60:	2200      	movs	r2, #0
 8008f62:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008f64:	4b11      	ldr	r3, [pc, #68]	; (8008fac <USBD_LL_Init+0x94>)
 8008f66:	2200      	movs	r2, #0
 8008f68:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008f6a:	4b10      	ldr	r3, [pc, #64]	; (8008fac <USBD_LL_Init+0x94>)
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008f70:	4b0e      	ldr	r3, [pc, #56]	; (8008fac <USBD_LL_Init+0x94>)
 8008f72:	2200      	movs	r2, #0
 8008f74:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008f76:	480d      	ldr	r0, [pc, #52]	; (8008fac <USBD_LL_Init+0x94>)
 8008f78:	f7f9 ffb8 	bl	8002eec <HAL_PCD_Init>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d001      	beq.n	8008f86 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008f82:	f7f7 fd13 	bl	80009ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008f86:	2180      	movs	r1, #128	; 0x80
 8008f88:	4808      	ldr	r0, [pc, #32]	; (8008fac <USBD_LL_Init+0x94>)
 8008f8a:	f7fb f9ca 	bl	8004322 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008f8e:	2240      	movs	r2, #64	; 0x40
 8008f90:	2100      	movs	r1, #0
 8008f92:	4806      	ldr	r0, [pc, #24]	; (8008fac <USBD_LL_Init+0x94>)
 8008f94:	f7fb f97e 	bl	8004294 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008f98:	2280      	movs	r2, #128	; 0x80
 8008f9a:	2101      	movs	r1, #1
 8008f9c:	4803      	ldr	r0, [pc, #12]	; (8008fac <USBD_LL_Init+0x94>)
 8008f9e:	f7fb f979 	bl	8004294 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008fa2:	2300      	movs	r3, #0
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3708      	adds	r7, #8
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	200008c4 	.word	0x200008c4

08008fb0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7fa f89f 	bl	800310a <HAL_PCD_Start>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fd0:	7bfb      	ldrb	r3, [r7, #15]
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f000 f930 	bl	8009238 <USBD_Get_USB_Status>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3710      	adds	r7, #16
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}

08008fe6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b084      	sub	sp, #16
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
 8008fee:	4608      	mov	r0, r1
 8008ff0:	4611      	mov	r1, r2
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	70fb      	strb	r3, [r7, #3]
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	70bb      	strb	r3, [r7, #2]
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009000:	2300      	movs	r3, #0
 8009002:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009004:	2300      	movs	r3, #0
 8009006:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800900e:	78bb      	ldrb	r3, [r7, #2]
 8009010:	883a      	ldrh	r2, [r7, #0]
 8009012:	78f9      	ldrb	r1, [r7, #3]
 8009014:	f7fa fd73 	bl	8003afe <HAL_PCD_EP_Open>
 8009018:	4603      	mov	r3, r0
 800901a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800901c:	7bfb      	ldrb	r3, [r7, #15]
 800901e:	4618      	mov	r0, r3
 8009020:	f000 f90a 	bl	8009238 <USBD_Get_USB_Status>
 8009024:	4603      	mov	r3, r0
 8009026:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009028:	7bbb      	ldrb	r3, [r7, #14]
}
 800902a:	4618      	mov	r0, r3
 800902c:	3710      	adds	r7, #16
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}

08009032 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009032:	b580      	push	{r7, lr}
 8009034:	b084      	sub	sp, #16
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
 800903a:	460b      	mov	r3, r1
 800903c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800903e:	2300      	movs	r3, #0
 8009040:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009042:	2300      	movs	r3, #0
 8009044:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800904c:	78fa      	ldrb	r2, [r7, #3]
 800904e:	4611      	mov	r1, r2
 8009050:	4618      	mov	r0, r3
 8009052:	f7fa fdbc 	bl	8003bce <HAL_PCD_EP_Close>
 8009056:	4603      	mov	r3, r0
 8009058:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800905a:	7bfb      	ldrb	r3, [r7, #15]
 800905c:	4618      	mov	r0, r3
 800905e:	f000 f8eb 	bl	8009238 <USBD_Get_USB_Status>
 8009062:	4603      	mov	r3, r0
 8009064:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009066:	7bbb      	ldrb	r3, [r7, #14]
}
 8009068:	4618      	mov	r0, r3
 800906a:	3710      	adds	r7, #16
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	460b      	mov	r3, r1
 800907a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800907c:	2300      	movs	r3, #0
 800907e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009080:	2300      	movs	r3, #0
 8009082:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800908a:	78fa      	ldrb	r2, [r7, #3]
 800908c:	4611      	mov	r1, r2
 800908e:	4618      	mov	r0, r3
 8009090:	f7fa fe5c 	bl	8003d4c <HAL_PCD_EP_SetStall>
 8009094:	4603      	mov	r3, r0
 8009096:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009098:	7bfb      	ldrb	r3, [r7, #15]
 800909a:	4618      	mov	r0, r3
 800909c:	f000 f8cc 	bl	8009238 <USBD_Get_USB_Status>
 80090a0:	4603      	mov	r3, r0
 80090a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3710      	adds	r7, #16
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090ae:	b580      	push	{r7, lr}
 80090b0:	b084      	sub	sp, #16
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
 80090b6:	460b      	mov	r3, r1
 80090b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090ba:	2300      	movs	r3, #0
 80090bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090be:	2300      	movs	r3, #0
 80090c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80090c8:	78fa      	ldrb	r2, [r7, #3]
 80090ca:	4611      	mov	r1, r2
 80090cc:	4618      	mov	r0, r3
 80090ce:	f7fa fea0 	bl	8003e12 <HAL_PCD_EP_ClrStall>
 80090d2:	4603      	mov	r3, r0
 80090d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090d6:	7bfb      	ldrb	r3, [r7, #15]
 80090d8:	4618      	mov	r0, r3
 80090da:	f000 f8ad 	bl	8009238 <USBD_Get_USB_Status>
 80090de:	4603      	mov	r3, r0
 80090e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3710      	adds	r7, #16
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b085      	sub	sp, #20
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	460b      	mov	r3, r1
 80090f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80090fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009100:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009104:	2b00      	cmp	r3, #0
 8009106:	da0b      	bge.n	8009120 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009108:	78fb      	ldrb	r3, [r7, #3]
 800910a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800910e:	68f9      	ldr	r1, [r7, #12]
 8009110:	4613      	mov	r3, r2
 8009112:	00db      	lsls	r3, r3, #3
 8009114:	4413      	add	r3, r2
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	440b      	add	r3, r1
 800911a:	3316      	adds	r3, #22
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	e00b      	b.n	8009138 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009120:	78fb      	ldrb	r3, [r7, #3]
 8009122:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009126:	68f9      	ldr	r1, [r7, #12]
 8009128:	4613      	mov	r3, r2
 800912a:	00db      	lsls	r3, r3, #3
 800912c:	4413      	add	r3, r2
 800912e:	009b      	lsls	r3, r3, #2
 8009130:	440b      	add	r3, r1
 8009132:	f203 2356 	addw	r3, r3, #598	; 0x256
 8009136:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009138:	4618      	mov	r0, r3
 800913a:	3714      	adds	r7, #20
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	460b      	mov	r3, r1
 800914e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009150:	2300      	movs	r3, #0
 8009152:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009154:	2300      	movs	r3, #0
 8009156:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800915e:	78fa      	ldrb	r2, [r7, #3]
 8009160:	4611      	mov	r1, r2
 8009162:	4618      	mov	r0, r3
 8009164:	f7fa fca7 	bl	8003ab6 <HAL_PCD_SetAddress>
 8009168:	4603      	mov	r3, r0
 800916a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800916c:	7bfb      	ldrb	r3, [r7, #15]
 800916e:	4618      	mov	r0, r3
 8009170:	f000 f862 	bl	8009238 <USBD_Get_USB_Status>
 8009174:	4603      	mov	r3, r0
 8009176:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009178:	7bbb      	ldrb	r3, [r7, #14]
}
 800917a:	4618      	mov	r0, r3
 800917c:	3710      	adds	r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}

08009182 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009182:	b580      	push	{r7, lr}
 8009184:	b086      	sub	sp, #24
 8009186:	af00      	add	r7, sp, #0
 8009188:	60f8      	str	r0, [r7, #12]
 800918a:	607a      	str	r2, [r7, #4]
 800918c:	603b      	str	r3, [r7, #0]
 800918e:	460b      	mov	r3, r1
 8009190:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009192:	2300      	movs	r3, #0
 8009194:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009196:	2300      	movs	r3, #0
 8009198:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80091a0:	7af9      	ldrb	r1, [r7, #11]
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	f7fa fd97 	bl	8003cd8 <HAL_PCD_EP_Transmit>
 80091aa:	4603      	mov	r3, r0
 80091ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091ae:	7dfb      	ldrb	r3, [r7, #23]
 80091b0:	4618      	mov	r0, r3
 80091b2:	f000 f841 	bl	8009238 <USBD_Get_USB_Status>
 80091b6:	4603      	mov	r3, r0
 80091b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80091ba:	7dbb      	ldrb	r3, [r7, #22]
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3718      	adds	r7, #24
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b086      	sub	sp, #24
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	607a      	str	r2, [r7, #4]
 80091ce:	603b      	str	r3, [r7, #0]
 80091d0:	460b      	mov	r3, r1
 80091d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091d4:	2300      	movs	r3, #0
 80091d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091d8:	2300      	movs	r3, #0
 80091da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80091e2:	7af9      	ldrb	r1, [r7, #11]
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	f7fa fd3b 	bl	8003c62 <HAL_PCD_EP_Receive>
 80091ec:	4603      	mov	r3, r0
 80091ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091f0:	7dfb      	ldrb	r3, [r7, #23]
 80091f2:	4618      	mov	r0, r3
 80091f4:	f000 f820 	bl	8009238 <USBD_Get_USB_Status>
 80091f8:	4603      	mov	r3, r0
 80091fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80091fc:	7dbb      	ldrb	r3, [r7, #22]
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3718      	adds	r7, #24
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
	...

08009208 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8009210:	4b03      	ldr	r3, [pc, #12]	; (8009220 <USBD_static_malloc+0x18>)
}
 8009212:	4618      	mov	r0, r3
 8009214:	370c      	adds	r7, #12
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	20000da8 	.word	0x20000da8

08009224 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]

}
 800922c:	bf00      	nop
 800922e:	370c      	adds	r7, #12
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr

08009238 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009238:	b480      	push	{r7}
 800923a:	b085      	sub	sp, #20
 800923c:	af00      	add	r7, sp, #0
 800923e:	4603      	mov	r3, r0
 8009240:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009242:	2300      	movs	r3, #0
 8009244:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009246:	79fb      	ldrb	r3, [r7, #7]
 8009248:	2b03      	cmp	r3, #3
 800924a:	d817      	bhi.n	800927c <USBD_Get_USB_Status+0x44>
 800924c:	a201      	add	r2, pc, #4	; (adr r2, 8009254 <USBD_Get_USB_Status+0x1c>)
 800924e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009252:	bf00      	nop
 8009254:	08009265 	.word	0x08009265
 8009258:	0800926b 	.word	0x0800926b
 800925c:	08009271 	.word	0x08009271
 8009260:	08009277 	.word	0x08009277
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009264:	2300      	movs	r3, #0
 8009266:	73fb      	strb	r3, [r7, #15]
    break;
 8009268:	e00b      	b.n	8009282 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800926a:	2303      	movs	r3, #3
 800926c:	73fb      	strb	r3, [r7, #15]
    break;
 800926e:	e008      	b.n	8009282 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009270:	2301      	movs	r3, #1
 8009272:	73fb      	strb	r3, [r7, #15]
    break;
 8009274:	e005      	b.n	8009282 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009276:	2303      	movs	r3, #3
 8009278:	73fb      	strb	r3, [r7, #15]
    break;
 800927a:	e002      	b.n	8009282 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800927c:	2303      	movs	r3, #3
 800927e:	73fb      	strb	r3, [r7, #15]
    break;
 8009280:	bf00      	nop
  }
  return usb_status;
 8009282:	7bfb      	ldrb	r3, [r7, #15]
}
 8009284:	4618      	mov	r0, r3
 8009286:	3714      	adds	r7, #20
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <memset>:
 8009290:	4402      	add	r2, r0
 8009292:	4603      	mov	r3, r0
 8009294:	4293      	cmp	r3, r2
 8009296:	d100      	bne.n	800929a <memset+0xa>
 8009298:	4770      	bx	lr
 800929a:	f803 1b01 	strb.w	r1, [r3], #1
 800929e:	e7f9      	b.n	8009294 <memset+0x4>

080092a0 <__libc_init_array>:
 80092a0:	b570      	push	{r4, r5, r6, lr}
 80092a2:	4d0d      	ldr	r5, [pc, #52]	; (80092d8 <__libc_init_array+0x38>)
 80092a4:	4c0d      	ldr	r4, [pc, #52]	; (80092dc <__libc_init_array+0x3c>)
 80092a6:	1b64      	subs	r4, r4, r5
 80092a8:	10a4      	asrs	r4, r4, #2
 80092aa:	2600      	movs	r6, #0
 80092ac:	42a6      	cmp	r6, r4
 80092ae:	d109      	bne.n	80092c4 <__libc_init_array+0x24>
 80092b0:	4d0b      	ldr	r5, [pc, #44]	; (80092e0 <__libc_init_array+0x40>)
 80092b2:	4c0c      	ldr	r4, [pc, #48]	; (80092e4 <__libc_init_array+0x44>)
 80092b4:	f000 f818 	bl	80092e8 <_init>
 80092b8:	1b64      	subs	r4, r4, r5
 80092ba:	10a4      	asrs	r4, r4, #2
 80092bc:	2600      	movs	r6, #0
 80092be:	42a6      	cmp	r6, r4
 80092c0:	d105      	bne.n	80092ce <__libc_init_array+0x2e>
 80092c2:	bd70      	pop	{r4, r5, r6, pc}
 80092c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80092c8:	4798      	blx	r3
 80092ca:	3601      	adds	r6, #1
 80092cc:	e7ee      	b.n	80092ac <__libc_init_array+0xc>
 80092ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80092d2:	4798      	blx	r3
 80092d4:	3601      	adds	r6, #1
 80092d6:	e7f2      	b.n	80092be <__libc_init_array+0x1e>
 80092d8:	0807cdcc 	.word	0x0807cdcc
 80092dc:	0807cdcc 	.word	0x0807cdcc
 80092e0:	0807cdcc 	.word	0x0807cdcc
 80092e4:	0807cdd0 	.word	0x0807cdd0

080092e8 <_init>:
 80092e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ea:	bf00      	nop
 80092ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ee:	bc08      	pop	{r3}
 80092f0:	469e      	mov	lr, r3
 80092f2:	4770      	bx	lr

080092f4 <_fini>:
 80092f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092f6:	bf00      	nop
 80092f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092fa:	bc08      	pop	{r3}
 80092fc:	469e      	mov	lr, r3
 80092fe:	4770      	bx	lr
