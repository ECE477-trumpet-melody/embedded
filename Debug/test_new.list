
test_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090cc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000810c  08009264  08009264  00019264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011370  08011370  000301d4  2**0
                  CONTENTS
  4 .ARM          00000008  08011370  08011370  00021370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011378  08011378  000301d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011378  08011378  00021378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801137c  0801137c  0002137c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08011380  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bf4  200001d4  08011554  000301d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000dc8  08011554  00030dc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015b81  00000000  00000000  00030247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003add  00000000  00000000  00045dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d8  00000000  00000000  000498a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cc7  00000000  00000000  0004a980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a57c  00000000  00000000  0004b647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000181d3  00000000  00000000  00065bc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097afc  00000000  00000000  0007dd96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000044b0  00000000  00000000  00115894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00119d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001d4 	.word	0x200001d4
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800924c 	.word	0x0800924c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001d8 	.word	0x200001d8
 80001d4:	0800924c 	.word	0x0800924c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fcaf 	bl	8000e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f8a9 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 f9f3 	bl	80008cc <MX_GPIO_Init>
  MX_DMA_Init();
 80004e6:	f000 f9bb 	bl	8000860 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004ea:	f000 f98f 	bl	800080c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004ee:	f000 f90d 	bl	800070c <MX_ADC1_Init>
  MX_I2S2_Init();
 80004f2:	f000 f95d 	bl	80007b0 <MX_I2S2_Init>
  MX_USB_DEVICE_Init();
 80004f6:	f008 f9f7 	bl	80088e8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_out, 32);
 80004fa:	2220      	movs	r2, #32
 80004fc:	4947      	ldr	r1, [pc, #284]	; (800061c <main+0x148>)
 80004fe:	4848      	ldr	r0, [pc, #288]	; (8000620 <main+0x14c>)
 8000500:	f000 fd76 	bl	8000ff0 <HAL_ADC_Start_DMA>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//Configure PC10 to light up the LED0 and act as MB1
	if(HAL_GPIO_ReadPin(GPIOC, Green_Button_Pin) == GPIO_PIN_SET) {
 8000504:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000508:	4846      	ldr	r0, [pc, #280]	; (8000624 <main+0x150>)
 800050a:	f001 ff35 	bl	8002378 <HAL_GPIO_ReadPin>
 800050e:	4603      	mov	r3, r0
 8000510:	2b01      	cmp	r3, #1
 8000512:	d10c      	bne.n	800052e <main+0x5a>
		HAL_GPIO_WritePin(GPIOC, LED0_Pin, GPIO_PIN_SET);
 8000514:	2201      	movs	r2, #1
 8000516:	2101      	movs	r1, #1
 8000518:	4842      	ldr	r0, [pc, #264]	; (8000624 <main+0x150>)
 800051a:	f001 ff45 	bl	80023a8 <HAL_GPIO_WritePin>

		//This button is going to be MB1, so it goes in the 0th location in the first byte of the
		//buffer
		input_buff[3] |= 0x10;
 800051e:	4b42      	ldr	r3, [pc, #264]	; (8000628 <main+0x154>)
 8000520:	78db      	ldrb	r3, [r3, #3]
 8000522:	f043 0310 	orr.w	r3, r3, #16
 8000526:	b2da      	uxtb	r2, r3
 8000528:	4b3f      	ldr	r3, [pc, #252]	; (8000628 <main+0x154>)
 800052a:	70da      	strb	r2, [r3, #3]
 800052c:	e00b      	b.n	8000546 <main+0x72>
	} else {
		HAL_GPIO_WritePin(GPIOC, LED0_Pin, GPIO_PIN_RESET);
 800052e:	2200      	movs	r2, #0
 8000530:	2101      	movs	r1, #1
 8000532:	483c      	ldr	r0, [pc, #240]	; (8000624 <main+0x150>)
 8000534:	f001 ff38 	bl	80023a8 <HAL_GPIO_WritePin>

		//Clear the value in the first position
		input_buff[3] &= ~(0x10);
 8000538:	4b3b      	ldr	r3, [pc, #236]	; (8000628 <main+0x154>)
 800053a:	78db      	ldrb	r3, [r3, #3]
 800053c:	f023 0310 	bic.w	r3, r3, #16
 8000540:	b2da      	uxtb	r2, r3
 8000542:	4b39      	ldr	r3, [pc, #228]	; (8000628 <main+0x154>)
 8000544:	70da      	strb	r2, [r3, #3]
	}

	//Configure PC11 to light up the LED1 and act as MB2
	if(HAL_GPIO_ReadPin(GPIOC, Red_Button_Pin) == GPIO_PIN_SET) {
 8000546:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800054a:	4836      	ldr	r0, [pc, #216]	; (8000624 <main+0x150>)
 800054c:	f001 ff14 	bl	8002378 <HAL_GPIO_ReadPin>
 8000550:	4603      	mov	r3, r0
 8000552:	2b01      	cmp	r3, #1
 8000554:	d10c      	bne.n	8000570 <main+0x9c>
		HAL_GPIO_WritePin(GPIOC, LED1_Pin, GPIO_PIN_SET);
 8000556:	2201      	movs	r2, #1
 8000558:	2102      	movs	r1, #2
 800055a:	4832      	ldr	r0, [pc, #200]	; (8000624 <main+0x150>)
 800055c:	f001 ff24 	bl	80023a8 <HAL_GPIO_WritePin>

		input_buff[3] |= 0x20;
 8000560:	4b31      	ldr	r3, [pc, #196]	; (8000628 <main+0x154>)
 8000562:	78db      	ldrb	r3, [r3, #3]
 8000564:	f043 0320 	orr.w	r3, r3, #32
 8000568:	b2da      	uxtb	r2, r3
 800056a:	4b2f      	ldr	r3, [pc, #188]	; (8000628 <main+0x154>)
 800056c:	70da      	strb	r2, [r3, #3]
 800056e:	e00b      	b.n	8000588 <main+0xb4>
	} else {
		HAL_GPIO_WritePin(GPIOC, LED1_Pin, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	2102      	movs	r1, #2
 8000574:	482b      	ldr	r0, [pc, #172]	; (8000624 <main+0x150>)
 8000576:	f001 ff17 	bl	80023a8 <HAL_GPIO_WritePin>

		input_buff[3] &= ~(0x20);
 800057a:	4b2b      	ldr	r3, [pc, #172]	; (8000628 <main+0x154>)
 800057c:	78db      	ldrb	r3, [r3, #3]
 800057e:	f023 0320 	bic.w	r3, r3, #32
 8000582:	b2da      	uxtb	r2, r3
 8000584:	4b28      	ldr	r3, [pc, #160]	; (8000628 <main+0x154>)
 8000586:	70da      	strb	r2, [r3, #3]
	}

	//Configure PC12 to light up the LED2, act as MB3, and play a sound
	if(HAL_GPIO_ReadPin(GPIOC, Yellow_Button_Pin) == GPIO_PIN_SET) {
 8000588:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800058c:	4825      	ldr	r0, [pc, #148]	; (8000624 <main+0x150>)
 800058e:	f001 fef3 	bl	8002378 <HAL_GPIO_ReadPin>
 8000592:	4603      	mov	r3, r0
 8000594:	2b01      	cmp	r3, #1
 8000596:	d10c      	bne.n	80005b2 <main+0xde>
		HAL_GPIO_WritePin(GPIOC, LED2_Pin, GPIO_PIN_SET);
 8000598:	2201      	movs	r2, #1
 800059a:	2104      	movs	r1, #4
 800059c:	4821      	ldr	r0, [pc, #132]	; (8000624 <main+0x150>)
 800059e:	f001 ff03 	bl	80023a8 <HAL_GPIO_WritePin>

		input_buff[3] |= 0x40;
 80005a2:	4b21      	ldr	r3, [pc, #132]	; (8000628 <main+0x154>)
 80005a4:	78db      	ldrb	r3, [r3, #3]
 80005a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	4b1e      	ldr	r3, [pc, #120]	; (8000628 <main+0x154>)
 80005ae:	70da      	strb	r2, [r3, #3]
 80005b0:	e00b      	b.n	80005ca <main+0xf6>

		//Also play the trumpet sound
		//HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)(brass2 + 44), 16384);
	} else {
		HAL_GPIO_WritePin(GPIOC, LED2_Pin, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2104      	movs	r1, #4
 80005b6:	481b      	ldr	r0, [pc, #108]	; (8000624 <main+0x150>)
 80005b8:	f001 fef6 	bl	80023a8 <HAL_GPIO_WritePin>

		input_buff[3] &= ~(0x40);
 80005bc:	4b1a      	ldr	r3, [pc, #104]	; (8000628 <main+0x154>)
 80005be:	78db      	ldrb	r3, [r3, #3]
 80005c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	4b18      	ldr	r3, [pc, #96]	; (8000628 <main+0x154>)
 80005c8:	70da      	strb	r2, [r3, #3]
	}

	// Average the array of adc_out values
	uint32_t adc_sum = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < 32; i++) {
 80005ce:	2300      	movs	r3, #0
 80005d0:	603b      	str	r3, [r7, #0]
 80005d2:	e00a      	b.n	80005ea <main+0x116>
		adc_sum += adc_out[i];
 80005d4:	4a11      	ldr	r2, [pc, #68]	; (800061c <main+0x148>)
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005dc:	461a      	mov	r2, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4413      	add	r3, r2
 80005e2:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < 32; i++) {
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	3301      	adds	r3, #1
 80005e8:	603b      	str	r3, [r7, #0]
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	2b1f      	cmp	r3, #31
 80005ee:	ddf1      	ble.n	80005d4 <main+0x100>
	}
	adc_avg = adc_sum >> 5;  //This divides by 32
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	095b      	lsrs	r3, r3, #5
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	4b0d      	ldr	r3, [pc, #52]	; (800062c <main+0x158>)
 80005f8:	801a      	strh	r2, [r3, #0]

	input_buff[5] = adc_avg >> 4;	//This divides by 16 to get a 12-bit value to an 8-bit value
 80005fa:	4b0c      	ldr	r3, [pc, #48]	; (800062c <main+0x158>)
 80005fc:	881b      	ldrh	r3, [r3, #0]
 80005fe:	091b      	lsrs	r3, r3, #4
 8000600:	b29b      	uxth	r3, r3
 8000602:	b2da      	uxtb	r2, r3
 8000604:	4b08      	ldr	r3, [pc, #32]	; (8000628 <main+0x154>)
 8000606:	715a      	strb	r2, [r3, #5]

	//Send the current buffer to the computer
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, input_buff, 20);
 8000608:	2214      	movs	r2, #20
 800060a:	4907      	ldr	r1, [pc, #28]	; (8000628 <main+0x154>)
 800060c:	4808      	ldr	r0, [pc, #32]	; (8000630 <main+0x15c>)
 800060e:	f006 fcf1 	bl	8006ff4 <USBD_CUSTOM_HID_SendReport>

	//Add a short delay
	HAL_Delay (10);
 8000612:	200a      	movs	r0, #10
 8000614:	f000 fc84 	bl	8000f20 <HAL_Delay>
  {
 8000618:	e774      	b.n	8000504 <main+0x30>
 800061a:	bf00      	nop
 800061c:	20000388 	.word	0x20000388
 8000620:	200001f0 	.word	0x200001f0
 8000624:	40020800 	.word	0x40020800
 8000628:	200003cc 	.word	0x200003cc
 800062c:	200003c8 	.word	0x200003c8
 8000630:	200003e8 	.word	0x200003e8

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	; 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	2230      	movs	r2, #48	; 0x30
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f008 fdd6 	bl	80091f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	4b29      	ldr	r3, [pc, #164]	; (8000704 <SystemClock_Config+0xd0>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	4a28      	ldr	r2, [pc, #160]	; (8000704 <SystemClock_Config+0xd0>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	; 0x40
 8000668:	4b26      	ldr	r3, [pc, #152]	; (8000704 <SystemClock_Config+0xd0>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4b23      	ldr	r3, [pc, #140]	; (8000708 <SystemClock_Config+0xd4>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a22      	ldr	r2, [pc, #136]	; (8000708 <SystemClock_Config+0xd4>)
 800067e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	4b20      	ldr	r3, [pc, #128]	; (8000708 <SystemClock_Config+0xd4>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000690:	2303      	movs	r3, #3
 8000692:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000694:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069a:	2301      	movs	r3, #1
 800069c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069e:	2310      	movs	r3, #16
 80006a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006ac:	2304      	movs	r3, #4
 80006ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006b0:	2348      	movs	r3, #72	; 0x48
 80006b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006b4:	2304      	movs	r3, #4
 80006b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006b8:	2303      	movs	r3, #3
 80006ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006bc:	f107 0320 	add.w	r3, r7, #32
 80006c0:	4618      	mov	r0, r3
 80006c2:	f003 fe69 	bl	8004398 <HAL_RCC_OscConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006cc:	f000 f98c 	bl	80009e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d0:	230f      	movs	r3, #15
 80006d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d4:	2300      	movs	r3, #0
 80006d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	2100      	movs	r1, #0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f004 f8cb 	bl	8004888 <HAL_RCC_ClockConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80006f8:	f000 f976 	bl	80009e8 <Error_Handler>
  }
}
 80006fc:	bf00      	nop
 80006fe:	3750      	adds	r7, #80	; 0x50
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000712:	463b      	mov	r3, r7
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800071e:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <MX_ADC1_Init+0x98>)
 8000720:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <MX_ADC1_Init+0x9c>)
 8000722:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <MX_ADC1_Init+0x98>)
 8000726:	2200      	movs	r2, #0
 8000728:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800072a:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <MX_ADC1_Init+0x98>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000730:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <MX_ADC1_Init+0x98>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000736:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <MX_ADC1_Init+0x98>)
 8000738:	2201      	movs	r2, #1
 800073a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800073c:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <MX_ADC1_Init+0x98>)
 800073e:	2200      	movs	r2, #0
 8000740:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000744:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <MX_ADC1_Init+0x98>)
 8000746:	2200      	movs	r2, #0
 8000748:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_ADC1_Init+0x98>)
 800074c:	4a17      	ldr	r2, [pc, #92]	; (80007ac <MX_ADC1_Init+0xa0>)
 800074e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000750:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MX_ADC1_Init+0x98>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <MX_ADC1_Init+0x98>)
 8000758:	2201      	movs	r2, #1
 800075a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_ADC1_Init+0x98>)
 800075e:	2201      	movs	r2, #1
 8000760:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_ADC1_Init+0x98>)
 8000766:	2201      	movs	r2, #1
 8000768:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800076a:	480e      	ldr	r0, [pc, #56]	; (80007a4 <MX_ADC1_Init+0x98>)
 800076c:	f000 fbfc 	bl	8000f68 <HAL_ADC_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000776:	f000 f937 	bl	80009e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800077a:	2300      	movs	r3, #0
 800077c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800077e:	2301      	movs	r3, #1
 8000780:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000786:	463b      	mov	r3, r7
 8000788:	4619      	mov	r1, r3
 800078a:	4806      	ldr	r0, [pc, #24]	; (80007a4 <MX_ADC1_Init+0x98>)
 800078c:	f000 fd3e 	bl	800120c <HAL_ADC_ConfigChannel>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000796:	f000 f927 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200001f0 	.word	0x200001f0
 80007a8:	40012000 	.word	0x40012000
 80007ac:	0f000001 	.word	0x0f000001

080007b0 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80007b4:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_I2S2_Init+0x54>)
 80007b6:	4a14      	ldr	r2, [pc, #80]	; (8000808 <MX_I2S2_Init+0x58>)
 80007b8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80007ba:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_I2S2_Init+0x54>)
 80007bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <MX_I2S2_Init+0x54>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007c8:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_I2S2_Init+0x54>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80007ce:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <MX_I2S2_Init+0x54>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80007d4:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <MX_I2S2_Init+0x54>)
 80007d6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80007da:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_I2S2_Init+0x54>)
 80007de:	2200      	movs	r2, #0
 80007e0:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MX_I2S2_Init+0x54>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_I2S2_Init+0x54>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_I2S2_Init+0x54>)
 80007f0:	f001 fdf4 	bl	80023dc <HAL_I2S_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80007fa:	f000 f8f5 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000298 	.word	0x20000298
 8000808:	40003800 	.word	0x40003800

0800080c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000812:	4a12      	ldr	r2, [pc, #72]	; (800085c <MX_USART2_UART_Init+0x50>)
 8000814:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800081c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000844:	f004 fb92 	bl	8004f6c <HAL_UART_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800084e:	f000 f8cb 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000340 	.word	0x20000340
 800085c:	40004400 	.word	0x40004400

08000860 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <MX_DMA_Init+0x68>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a16      	ldr	r2, [pc, #88]	; (80008c8 <MX_DMA_Init+0x68>)
 8000870:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_DMA_Init+0x68>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	603b      	str	r3, [r7, #0]
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <MX_DMA_Init+0x68>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <MX_DMA_Init+0x68>)
 800088c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <MX_DMA_Init+0x68>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2100      	movs	r1, #0
 80008a2:	200f      	movs	r0, #15
 80008a4:	f001 f83d 	bl	8001922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80008a8:	200f      	movs	r0, #15
 80008aa:	f001 f856 	bl	800195a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2100      	movs	r1, #0
 80008b2:	2038      	movs	r0, #56	; 0x38
 80008b4:	f001 f835 	bl	8001922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008b8:	2038      	movs	r0, #56	; 0x38
 80008ba:	f001 f84e 	bl	800195a <HAL_NVIC_EnableIRQ>

}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800

080008cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	; 0x28
 80008d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	4b3d      	ldr	r3, [pc, #244]	; (80009dc <MX_GPIO_Init+0x110>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a3c      	ldr	r2, [pc, #240]	; (80009dc <MX_GPIO_Init+0x110>)
 80008ec:	f043 0304 	orr.w	r3, r3, #4
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b3a      	ldr	r3, [pc, #232]	; (80009dc <MX_GPIO_Init+0x110>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0304 	and.w	r3, r3, #4
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b36      	ldr	r3, [pc, #216]	; (80009dc <MX_GPIO_Init+0x110>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a35      	ldr	r2, [pc, #212]	; (80009dc <MX_GPIO_Init+0x110>)
 8000908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b33      	ldr	r3, [pc, #204]	; (80009dc <MX_GPIO_Init+0x110>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	4b2f      	ldr	r3, [pc, #188]	; (80009dc <MX_GPIO_Init+0x110>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a2e      	ldr	r2, [pc, #184]	; (80009dc <MX_GPIO_Init+0x110>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b2c      	ldr	r3, [pc, #176]	; (80009dc <MX_GPIO_Init+0x110>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b28      	ldr	r3, [pc, #160]	; (80009dc <MX_GPIO_Init+0x110>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a27      	ldr	r2, [pc, #156]	; (80009dc <MX_GPIO_Init+0x110>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b25      	ldr	r3, [pc, #148]	; (80009dc <MX_GPIO_Init+0x110>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED0_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	2107      	movs	r1, #7
 8000956:	4822      	ldr	r0, [pc, #136]	; (80009e0 <MX_GPIO_Init+0x114>)
 8000958:	f001 fd26 	bl	80023a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	2120      	movs	r1, #32
 8000960:	4820      	ldr	r0, [pc, #128]	; (80009e4 <MX_GPIO_Init+0x118>)
 8000962:	f001 fd21 	bl	80023a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000966:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800096a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800096c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000970:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	4619      	mov	r1, r3
 800097c:	4818      	ldr	r0, [pc, #96]	; (80009e0 <MX_GPIO_Init+0x114>)
 800097e:	f001 fb77 	bl	8002070 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin;
 8000982:	2307      	movs	r3, #7
 8000984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	4619      	mov	r1, r3
 8000998:	4811      	ldr	r0, [pc, #68]	; (80009e0 <MX_GPIO_Init+0x114>)
 800099a:	f001 fb69 	bl	8002070 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800099e:	2320      	movs	r3, #32
 80009a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4619      	mov	r1, r3
 80009b4:	480b      	ldr	r0, [pc, #44]	; (80009e4 <MX_GPIO_Init+0x118>)
 80009b6:	f001 fb5b 	bl	8002070 <HAL_GPIO_Init>

  /*Configure GPIO pins : Green_Button_Pin Red_Button_Pin Yellow_Button_Pin */
  GPIO_InitStruct.Pin = Green_Button_Pin|Red_Button_Pin|Yellow_Button_Pin;
 80009ba:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4619      	mov	r1, r3
 80009ce:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_GPIO_Init+0x114>)
 80009d0:	f001 fb4e 	bl	8002070 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009d4:	bf00      	nop
 80009d6:	3728      	adds	r7, #40	; 0x28
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40020800 	.word	0x40020800
 80009e4:	40020000 	.word	0x40020000

080009e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ec:	b672      	cpsid	i
}
 80009ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <Error_Handler+0x8>
	...

080009f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	4a0f      	ldr	r2, [pc, #60]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a08:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0a:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	603b      	str	r3, [r7, #0]
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	4a08      	ldr	r2, [pc, #32]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a24:	6413      	str	r3, [r2, #64]	; 0x40
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a32:	2007      	movs	r0, #7
 8000a34:	f000 ff6a 	bl	800190c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40023800 	.word	0x40023800

08000a44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	; 0x28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a2f      	ldr	r2, [pc, #188]	; (8000b20 <HAL_ADC_MspInit+0xdc>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d157      	bne.n	8000b16 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	4b2e      	ldr	r3, [pc, #184]	; (8000b24 <HAL_ADC_MspInit+0xe0>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <HAL_ADC_MspInit+0xe0>)
 8000a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a74:	6453      	str	r3, [r2, #68]	; 0x44
 8000a76:	4b2b      	ldr	r3, [pc, #172]	; (8000b24 <HAL_ADC_MspInit+0xe0>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	4b27      	ldr	r3, [pc, #156]	; (8000b24 <HAL_ADC_MspInit+0xe0>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a26      	ldr	r2, [pc, #152]	; (8000b24 <HAL_ADC_MspInit+0xe0>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b24      	ldr	r3, [pc, #144]	; (8000b24 <HAL_ADC_MspInit+0xe0>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	4619      	mov	r1, r3
 8000ab0:	481d      	ldr	r0, [pc, #116]	; (8000b28 <HAL_ADC_MspInit+0xe4>)
 8000ab2:	f001 fadd 	bl	8002070 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000ab6:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <HAL_ADC_MspInit+0xe8>)
 8000ab8:	4a1d      	ldr	r2, [pc, #116]	; (8000b30 <HAL_ADC_MspInit+0xec>)
 8000aba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000abc:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <HAL_ADC_MspInit+0xe8>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ac2:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <HAL_ADC_MspInit+0xe8>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ac8:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <HAL_ADC_MspInit+0xe8>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ace:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <HAL_ADC_MspInit+0xe8>)
 8000ad0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ad4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <HAL_ADC_MspInit+0xe8>)
 8000ad8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000adc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ade:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <HAL_ADC_MspInit+0xe8>)
 8000ae0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ae4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <HAL_ADC_MspInit+0xe8>)
 8000ae8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aec:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000aee:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <HAL_ADC_MspInit+0xe8>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000af4:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <HAL_ADC_MspInit+0xe8>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000afa:	480c      	ldr	r0, [pc, #48]	; (8000b2c <HAL_ADC_MspInit+0xe8>)
 8000afc:	f000 ff48 	bl	8001990 <HAL_DMA_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000b06:	f7ff ff6f 	bl	80009e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a07      	ldr	r2, [pc, #28]	; (8000b2c <HAL_ADC_MspInit+0xe8>)
 8000b0e:	639a      	str	r2, [r3, #56]	; 0x38
 8000b10:	4a06      	ldr	r2, [pc, #24]	; (8000b2c <HAL_ADC_MspInit+0xe8>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b16:	bf00      	nop
 8000b18:	3728      	adds	r7, #40	; 0x28
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40012000 	.word	0x40012000
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40020000 	.word	0x40020000
 8000b2c:	20000238 	.word	0x20000238
 8000b30:	40026410 	.word	0x40026410

08000b34 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b090      	sub	sp, #64	; 0x40
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
 8000b5c:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI2)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a4a      	ldr	r2, [pc, #296]	; (8000c8c <HAL_I2S_MspInit+0x158>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	f040 808c 	bne.w	8000c82 <HAL_I2S_MspInit+0x14e>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000b6e:	23c8      	movs	r3, #200	; 0xc8
 8000b70:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 4;
 8000b72:	2304      	movs	r3, #4
 8000b74:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 4;
 8000b76:	2304      	movs	r3, #4
 8000b78:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f004 f8a2 	bl	8004cc8 <HAL_RCCEx_PeriphCLKConfig>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <HAL_I2S_MspInit+0x5a>
    {
      Error_Handler();
 8000b8a:	f7ff ff2d 	bl	80009e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	4b3f      	ldr	r3, [pc, #252]	; (8000c90 <HAL_I2S_MspInit+0x15c>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	4a3e      	ldr	r2, [pc, #248]	; (8000c90 <HAL_I2S_MspInit+0x15c>)
 8000b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9e:	4b3c      	ldr	r3, [pc, #240]	; (8000c90 <HAL_I2S_MspInit+0x15c>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	4b38      	ldr	r3, [pc, #224]	; (8000c90 <HAL_I2S_MspInit+0x15c>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a37      	ldr	r2, [pc, #220]	; (8000c90 <HAL_I2S_MspInit+0x15c>)
 8000bb4:	f043 0304 	orr.w	r3, r3, #4
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b35      	ldr	r3, [pc, #212]	; (8000c90 <HAL_I2S_MspInit+0x15c>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0304 	and.w	r3, r3, #4
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	4b31      	ldr	r3, [pc, #196]	; (8000c90 <HAL_I2S_MspInit+0x15c>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a30      	ldr	r2, [pc, #192]	; (8000c90 <HAL_I2S_MspInit+0x15c>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b2e      	ldr	r3, [pc, #184]	; (8000c90 <HAL_I2S_MspInit+0x15c>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000be2:	2308      	movs	r3, #8
 8000be4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bf2:	2305      	movs	r3, #5
 8000bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4825      	ldr	r0, [pc, #148]	; (8000c94 <HAL_I2S_MspInit+0x160>)
 8000bfe:	f001 fa37 	bl	8002070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000c02:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c14:	2305      	movs	r3, #5
 8000c16:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	481e      	ldr	r0, [pc, #120]	; (8000c98 <HAL_I2S_MspInit+0x164>)
 8000c20:	f001 fa26 	bl	8002070 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000c24:	4b1d      	ldr	r3, [pc, #116]	; (8000c9c <HAL_I2S_MspInit+0x168>)
 8000c26:	4a1e      	ldr	r2, [pc, #120]	; (8000ca0 <HAL_I2S_MspInit+0x16c>)
 8000c28:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000c2a:	4b1c      	ldr	r3, [pc, #112]	; (8000c9c <HAL_I2S_MspInit+0x168>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c30:	4b1a      	ldr	r3, [pc, #104]	; (8000c9c <HAL_I2S_MspInit+0x168>)
 8000c32:	2240      	movs	r2, #64	; 0x40
 8000c34:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c36:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <HAL_I2S_MspInit+0x168>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c3c:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <HAL_I2S_MspInit+0x168>)
 8000c3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c42:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c44:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <HAL_I2S_MspInit+0x168>)
 8000c46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c4a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c4c:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <HAL_I2S_MspInit+0x168>)
 8000c4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c52:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <HAL_I2S_MspInit+0x168>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <HAL_I2S_MspInit+0x168>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c60:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <HAL_I2S_MspInit+0x168>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000c66:	480d      	ldr	r0, [pc, #52]	; (8000c9c <HAL_I2S_MspInit+0x168>)
 8000c68:	f000 fe92 	bl	8001990 <HAL_DMA_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <HAL_I2S_MspInit+0x142>
    {
      Error_Handler();
 8000c72:	f7ff feb9 	bl	80009e8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a08      	ldr	r2, [pc, #32]	; (8000c9c <HAL_I2S_MspInit+0x168>)
 8000c7a:	639a      	str	r2, [r3, #56]	; 0x38
 8000c7c:	4a07      	ldr	r2, [pc, #28]	; (8000c9c <HAL_I2S_MspInit+0x168>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000c82:	bf00      	nop
 8000c84:	3740      	adds	r7, #64	; 0x40
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40003800 	.word	0x40003800
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020800 	.word	0x40020800
 8000c98:	40020400 	.word	0x40020400
 8000c9c:	200002e0 	.word	0x200002e0
 8000ca0:	40026070 	.word	0x40026070

08000ca4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	; 0x28
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a19      	ldr	r2, [pc, #100]	; (8000d28 <HAL_UART_MspInit+0x84>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d12b      	bne.n	8000d1e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <HAL_UART_MspInit+0x88>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	4a17      	ldr	r2, [pc, #92]	; (8000d2c <HAL_UART_MspInit+0x88>)
 8000cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <HAL_UART_MspInit+0x88>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <HAL_UART_MspInit+0x88>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a10      	ldr	r2, [pc, #64]	; (8000d2c <HAL_UART_MspInit+0x88>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <HAL_UART_MspInit+0x88>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cfe:	230c      	movs	r3, #12
 8000d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d0e:	2307      	movs	r3, #7
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	4619      	mov	r1, r3
 8000d18:	4805      	ldr	r0, [pc, #20]	; (8000d30 <HAL_UART_MspInit+0x8c>)
 8000d1a:	f001 f9a9 	bl	8002070 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d1e:	bf00      	nop
 8000d20:	3728      	adds	r7, #40	; 0x28
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40004400 	.word	0x40004400
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020000 	.word	0x40020000

08000d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d38:	e7fe      	b.n	8000d38 <NMI_Handler+0x4>

08000d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <HardFault_Handler+0x4>

08000d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <MemManage_Handler+0x4>

08000d46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <BusFault_Handler+0x4>

08000d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <UsageFault_Handler+0x4>

08000d52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d80:	f000 f8ae 	bl	8000ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000d8c:	4802      	ldr	r0, [pc, #8]	; (8000d98 <DMA1_Stream4_IRQHandler+0x10>)
 8000d8e:	f000 ff05 	bl	8001b9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200002e0 	.word	0x200002e0

08000d9c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <DMA2_Stream0_IRQHandler+0x10>)
 8000da2:	f000 fefb 	bl	8001b9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000238 	.word	0x20000238

08000db0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000db4:	4802      	ldr	r0, [pc, #8]	; (8000dc0 <OTG_FS_IRQHandler+0x10>)
 8000db6:	f002 f9fb 	bl	80031b0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	200008c4 	.word	0x200008c4

08000dc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <SystemInit+0x20>)
 8000dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dce:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <SystemInit+0x20>)
 8000dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e20 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dec:	f7ff ffea 	bl	8000dc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000df0:	480c      	ldr	r0, [pc, #48]	; (8000e24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000df2:	490d      	ldr	r1, [pc, #52]	; (8000e28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000df4:	4a0d      	ldr	r2, [pc, #52]	; (8000e2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df8:	e002      	b.n	8000e00 <LoopCopyDataInit>

08000dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfe:	3304      	adds	r3, #4

08000e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e04:	d3f9      	bcc.n	8000dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e06:	4a0a      	ldr	r2, [pc, #40]	; (8000e30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e08:	4c0a      	ldr	r4, [pc, #40]	; (8000e34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e0c:	e001      	b.n	8000e12 <LoopFillZerobss>

08000e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e10:	3204      	adds	r2, #4

08000e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e14:	d3fb      	bcc.n	8000e0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e16:	f008 f9f5 	bl	8009204 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1a:	f7ff fb5b 	bl	80004d4 <main>
  bx  lr    
 8000e1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e28:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8000e2c:	08011380 	.word	0x08011380
  ldr r2, =_sbss
 8000e30:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8000e34:	20000dc8 	.word	0x20000dc8

08000e38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e38:	e7fe      	b.n	8000e38 <ADC_IRQHandler>
	...

08000e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e40:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <HAL_Init+0x40>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0d      	ldr	r2, [pc, #52]	; (8000e7c <HAL_Init+0x40>)
 8000e46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e4c:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <HAL_Init+0x40>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <HAL_Init+0x40>)
 8000e52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <HAL_Init+0x40>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a07      	ldr	r2, [pc, #28]	; (8000e7c <HAL_Init+0x40>)
 8000e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e64:	2003      	movs	r0, #3
 8000e66:	f000 fd51 	bl	800190c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f000 f808 	bl	8000e80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e70:	f7ff fdc0 	bl	80009f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40023c00 	.word	0x40023c00

08000e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <HAL_InitTick+0x54>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_InitTick+0x58>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 fd69 	bl	8001976 <HAL_SYSTICK_Config>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e00e      	b.n	8000ecc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b0f      	cmp	r3, #15
 8000eb2:	d80a      	bhi.n	8000eca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebc:	f000 fd31 	bl	8001922 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec0:	4a06      	ldr	r2, [pc, #24]	; (8000edc <HAL_InitTick+0x5c>)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e000      	b.n	8000ecc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	20000004 	.word	0x20000004

08000ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <HAL_IncTick+0x20>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_IncTick+0x24>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4413      	add	r3, r2
 8000ef0:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <HAL_IncTick+0x24>)
 8000ef2:	6013      	str	r3, [r2, #0]
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000008 	.word	0x20000008
 8000f04:	200003e0 	.word	0x200003e0

08000f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <HAL_GetTick+0x14>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	200003e0 	.word	0x200003e0

08000f20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f28:	f7ff ffee 	bl	8000f08 <HAL_GetTick>
 8000f2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f38:	d005      	beq.n	8000f46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <HAL_Delay+0x44>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4413      	add	r3, r2
 8000f44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f46:	bf00      	nop
 8000f48:	f7ff ffde 	bl	8000f08 <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d8f7      	bhi.n	8000f48 <HAL_Delay+0x28>
  {
  }
}
 8000f58:	bf00      	nop
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000008 	.word	0x20000008

08000f68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f70:	2300      	movs	r3, #0
 8000f72:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d101      	bne.n	8000f7e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e033      	b.n	8000fe6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d109      	bne.n	8000f9a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff fd5c 	bl	8000a44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	f003 0310 	and.w	r3, r3, #16
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d118      	bne.n	8000fd8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fae:	f023 0302 	bic.w	r3, r3, #2
 8000fb2:	f043 0202 	orr.w	r2, r3, #2
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f000 fa58 	bl	8001470 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	f023 0303 	bic.w	r3, r3, #3
 8000fce:	f043 0201 	orr.w	r2, r3, #1
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	641a      	str	r2, [r3, #64]	; 0x40
 8000fd6:	e001      	b.n	8000fdc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001006:	2b01      	cmp	r3, #1
 8001008:	d101      	bne.n	800100e <HAL_ADC_Start_DMA+0x1e>
 800100a:	2302      	movs	r3, #2
 800100c:	e0ce      	b.n	80011ac <HAL_ADC_Start_DMA+0x1bc>
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	2201      	movs	r2, #1
 8001012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	f003 0301 	and.w	r3, r3, #1
 8001020:	2b01      	cmp	r3, #1
 8001022:	d018      	beq.n	8001056 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	689a      	ldr	r2, [r3, #8]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f042 0201 	orr.w	r2, r2, #1
 8001032:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001034:	4b5f      	ldr	r3, [pc, #380]	; (80011b4 <HAL_ADC_Start_DMA+0x1c4>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a5f      	ldr	r2, [pc, #380]	; (80011b8 <HAL_ADC_Start_DMA+0x1c8>)
 800103a:	fba2 2303 	umull	r2, r3, r2, r3
 800103e:	0c9a      	lsrs	r2, r3, #18
 8001040:	4613      	mov	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4413      	add	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001048:	e002      	b.n	8001050 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	3b01      	subs	r3, #1
 800104e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d1f9      	bne.n	800104a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001060:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001064:	d107      	bne.n	8001076 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	689a      	ldr	r2, [r3, #8]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001074:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	2b01      	cmp	r3, #1
 8001082:	f040 8086 	bne.w	8001192 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800108e:	f023 0301 	bic.w	r3, r3, #1
 8001092:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d007      	beq.n	80010b8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010c4:	d106      	bne.n	80010d4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	f023 0206 	bic.w	r2, r3, #6
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	645a      	str	r2, [r3, #68]	; 0x44
 80010d2:	e002      	b.n	80010da <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2200      	movs	r2, #0
 80010d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	2200      	movs	r2, #0
 80010de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010e2:	4b36      	ldr	r3, [pc, #216]	; (80011bc <HAL_ADC_Start_DMA+0x1cc>)
 80010e4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ea:	4a35      	ldr	r2, [pc, #212]	; (80011c0 <HAL_ADC_Start_DMA+0x1d0>)
 80010ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010f2:	4a34      	ldr	r2, [pc, #208]	; (80011c4 <HAL_ADC_Start_DMA+0x1d4>)
 80010f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010fa:	4a33      	ldr	r2, [pc, #204]	; (80011c8 <HAL_ADC_Start_DMA+0x1d8>)
 80010fc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001106:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	685a      	ldr	r2, [r3, #4]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001116:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001126:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	334c      	adds	r3, #76	; 0x4c
 8001132:	4619      	mov	r1, r3
 8001134:	68ba      	ldr	r2, [r7, #8]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f000 fcd8 	bl	8001aec <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 031f 	and.w	r3, r3, #31
 8001144:	2b00      	cmp	r3, #0
 8001146:	d10f      	bne.n	8001168 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d129      	bne.n	80011aa <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	e020      	b.n	80011aa <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a17      	ldr	r2, [pc, #92]	; (80011cc <HAL_ADC_Start_DMA+0x1dc>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d11b      	bne.n	80011aa <HAL_ADC_Start_DMA+0x1ba>
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d114      	bne.n	80011aa <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	e00b      	b.n	80011aa <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	f043 0210 	orr.w	r2, r3, #16
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	f043 0201 	orr.w	r2, r3, #1
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000000 	.word	0x20000000
 80011b8:	431bde83 	.word	0x431bde83
 80011bc:	40012300 	.word	0x40012300
 80011c0:	08001669 	.word	0x08001669
 80011c4:	08001723 	.word	0x08001723
 80011c8:	0800173f 	.word	0x0800173f
 80011cc:	40012000 	.word	0x40012000

080011d0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001216:	2300      	movs	r3, #0
 8001218:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001220:	2b01      	cmp	r3, #1
 8001222:	d101      	bne.n	8001228 <HAL_ADC_ConfigChannel+0x1c>
 8001224:	2302      	movs	r3, #2
 8001226:	e113      	b.n	8001450 <HAL_ADC_ConfigChannel+0x244>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2201      	movs	r2, #1
 800122c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b09      	cmp	r3, #9
 8001236:	d925      	bls.n	8001284 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	68d9      	ldr	r1, [r3, #12]
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	b29b      	uxth	r3, r3
 8001244:	461a      	mov	r2, r3
 8001246:	4613      	mov	r3, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	4413      	add	r3, r2
 800124c:	3b1e      	subs	r3, #30
 800124e:	2207      	movs	r2, #7
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43da      	mvns	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	400a      	ands	r2, r1
 800125c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68d9      	ldr	r1, [r3, #12]
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	b29b      	uxth	r3, r3
 800126e:	4618      	mov	r0, r3
 8001270:	4603      	mov	r3, r0
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	4403      	add	r3, r0
 8001276:	3b1e      	subs	r3, #30
 8001278:	409a      	lsls	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	430a      	orrs	r2, r1
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	e022      	b.n	80012ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6919      	ldr	r1, [r3, #16]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	b29b      	uxth	r3, r3
 8001290:	461a      	mov	r2, r3
 8001292:	4613      	mov	r3, r2
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	4413      	add	r3, r2
 8001298:	2207      	movs	r2, #7
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43da      	mvns	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	400a      	ands	r2, r1
 80012a6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6919      	ldr	r1, [r3, #16]
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	4618      	mov	r0, r3
 80012ba:	4603      	mov	r3, r0
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4403      	add	r3, r0
 80012c0:	409a      	lsls	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	430a      	orrs	r2, r1
 80012c8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	2b06      	cmp	r3, #6
 80012d0:	d824      	bhi.n	800131c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	4613      	mov	r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4413      	add	r3, r2
 80012e2:	3b05      	subs	r3, #5
 80012e4:	221f      	movs	r2, #31
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43da      	mvns	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	400a      	ands	r2, r1
 80012f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	4618      	mov	r0, r3
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	4613      	mov	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	3b05      	subs	r3, #5
 800130e:	fa00 f203 	lsl.w	r2, r0, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	430a      	orrs	r2, r1
 8001318:	635a      	str	r2, [r3, #52]	; 0x34
 800131a:	e04c      	b.n	80013b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b0c      	cmp	r3, #12
 8001322:	d824      	bhi.n	800136e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685a      	ldr	r2, [r3, #4]
 800132e:	4613      	mov	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4413      	add	r3, r2
 8001334:	3b23      	subs	r3, #35	; 0x23
 8001336:	221f      	movs	r2, #31
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43da      	mvns	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	400a      	ands	r2, r1
 8001344:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	b29b      	uxth	r3, r3
 8001352:	4618      	mov	r0, r3
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	4613      	mov	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	3b23      	subs	r3, #35	; 0x23
 8001360:	fa00 f203 	lsl.w	r2, r0, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	430a      	orrs	r2, r1
 800136a:	631a      	str	r2, [r3, #48]	; 0x30
 800136c:	e023      	b.n	80013b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	4613      	mov	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	3b41      	subs	r3, #65	; 0x41
 8001380:	221f      	movs	r2, #31
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43da      	mvns	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	400a      	ands	r2, r1
 800138e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	b29b      	uxth	r3, r3
 800139c:	4618      	mov	r0, r3
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	4613      	mov	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4413      	add	r3, r2
 80013a8:	3b41      	subs	r3, #65	; 0x41
 80013aa:	fa00 f203 	lsl.w	r2, r0, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013b6:	4b29      	ldr	r3, [pc, #164]	; (800145c <HAL_ADC_ConfigChannel+0x250>)
 80013b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a28      	ldr	r2, [pc, #160]	; (8001460 <HAL_ADC_ConfigChannel+0x254>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d10f      	bne.n	80013e4 <HAL_ADC_ConfigChannel+0x1d8>
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b12      	cmp	r3, #18
 80013ca:	d10b      	bne.n	80013e4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a1d      	ldr	r2, [pc, #116]	; (8001460 <HAL_ADC_ConfigChannel+0x254>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d12b      	bne.n	8001446 <HAL_ADC_ConfigChannel+0x23a>
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a1c      	ldr	r2, [pc, #112]	; (8001464 <HAL_ADC_ConfigChannel+0x258>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d003      	beq.n	8001400 <HAL_ADC_ConfigChannel+0x1f4>
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b11      	cmp	r3, #17
 80013fe:	d122      	bne.n	8001446 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a11      	ldr	r2, [pc, #68]	; (8001464 <HAL_ADC_ConfigChannel+0x258>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d111      	bne.n	8001446 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <HAL_ADC_ConfigChannel+0x25c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a11      	ldr	r2, [pc, #68]	; (800146c <HAL_ADC_ConfigChannel+0x260>)
 8001428:	fba2 2303 	umull	r2, r3, r2, r3
 800142c:	0c9a      	lsrs	r2, r3, #18
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001438:	e002      	b.n	8001440 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	3b01      	subs	r3, #1
 800143e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f9      	bne.n	800143a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	40012300 	.word	0x40012300
 8001460:	40012000 	.word	0x40012000
 8001464:	10000012 	.word	0x10000012
 8001468:	20000000 	.word	0x20000000
 800146c:	431bde83 	.word	0x431bde83

08001470 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001478:	4b79      	ldr	r3, [pc, #484]	; (8001660 <ADC_Init+0x1f0>)
 800147a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	431a      	orrs	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6859      	ldr	r1, [r3, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	021a      	lsls	r2, r3, #8
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80014c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6859      	ldr	r1, [r3, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	430a      	orrs	r2, r1
 80014da:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	689a      	ldr	r2, [r3, #8]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6899      	ldr	r1, [r3, #8]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	68da      	ldr	r2, [r3, #12]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001502:	4a58      	ldr	r2, [pc, #352]	; (8001664 <ADC_Init+0x1f4>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d022      	beq.n	800154e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	689a      	ldr	r2, [r3, #8]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001516:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6899      	ldr	r1, [r3, #8]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	430a      	orrs	r2, r1
 8001528:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001538:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	6899      	ldr	r1, [r3, #8]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	430a      	orrs	r2, r1
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	e00f      	b.n	800156e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800155c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800156c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 0202 	bic.w	r2, r2, #2
 800157c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6899      	ldr	r1, [r3, #8]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	7e1b      	ldrb	r3, [r3, #24]
 8001588:	005a      	lsls	r2, r3, #1
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	430a      	orrs	r2, r1
 8001590:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d01b      	beq.n	80015d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015aa:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80015ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6859      	ldr	r1, [r3, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c6:	3b01      	subs	r3, #1
 80015c8:	035a      	lsls	r2, r3, #13
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	430a      	orrs	r2, r1
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	e007      	b.n	80015e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015e2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80015f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	3b01      	subs	r3, #1
 8001600:	051a      	lsls	r2, r3, #20
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	430a      	orrs	r2, r1
 8001608:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001618:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6899      	ldr	r1, [r3, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001626:	025a      	lsls	r2, r3, #9
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	430a      	orrs	r2, r1
 800162e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	689a      	ldr	r2, [r3, #8]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800163e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6899      	ldr	r1, [r3, #8]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	029a      	lsls	r2, r3, #10
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	430a      	orrs	r2, r1
 8001652:	609a      	str	r2, [r3, #8]
}
 8001654:	bf00      	nop
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	40012300 	.word	0x40012300
 8001664:	0f000001 	.word	0x0f000001

08001668 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001674:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800167e:	2b00      	cmp	r3, #0
 8001680:	d13c      	bne.n	80016fc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d12b      	bne.n	80016f4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d127      	bne.n	80016f4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016aa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d006      	beq.n	80016c0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d119      	bne.n	80016f4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0220 	bic.w	r2, r2, #32
 80016ce:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d105      	bne.n	80016f4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ec:	f043 0201 	orr.w	r2, r3, #1
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	f7ff fd6b 	bl	80011d0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80016fa:	e00e      	b.n	800171a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	f003 0310 	and.w	r3, r3, #16
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f7ff fd75 	bl	80011f8 <HAL_ADC_ErrorCallback>
}
 800170e:	e004      	b.n	800171a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	4798      	blx	r3
}
 800171a:	bf00      	nop
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b084      	sub	sp, #16
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800172e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	f7ff fd57 	bl	80011e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001736:	bf00      	nop
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b084      	sub	sp, #16
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800174a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2240      	movs	r2, #64	; 0x40
 8001750:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	f043 0204 	orr.w	r2, r3, #4
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800175e:	68f8      	ldr	r0, [r7, #12]
 8001760:	f7ff fd4a 	bl	80011f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001764:	bf00      	nop
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <__NVIC_SetPriorityGrouping+0x44>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001788:	4013      	ands	r3, r2
 800178a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001794:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800179c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179e:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <__NVIC_SetPriorityGrouping+0x44>)
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	60d3      	str	r3, [r2, #12]
}
 80017a4:	bf00      	nop
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b8:	4b04      	ldr	r3, [pc, #16]	; (80017cc <__NVIC_GetPriorityGrouping+0x18>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	0a1b      	lsrs	r3, r3, #8
 80017be:	f003 0307 	and.w	r3, r3, #7
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	db0b      	blt.n	80017fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	f003 021f 	and.w	r2, r3, #31
 80017e8:	4907      	ldr	r1, [pc, #28]	; (8001808 <__NVIC_EnableIRQ+0x38>)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	095b      	lsrs	r3, r3, #5
 80017f0:	2001      	movs	r0, #1
 80017f2:	fa00 f202 	lsl.w	r2, r0, r2
 80017f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	e000e100 	.word	0xe000e100

0800180c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	6039      	str	r1, [r7, #0]
 8001816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181c:	2b00      	cmp	r3, #0
 800181e:	db0a      	blt.n	8001836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	b2da      	uxtb	r2, r3
 8001824:	490c      	ldr	r1, [pc, #48]	; (8001858 <__NVIC_SetPriority+0x4c>)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	0112      	lsls	r2, r2, #4
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	440b      	add	r3, r1
 8001830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001834:	e00a      	b.n	800184c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	b2da      	uxtb	r2, r3
 800183a:	4908      	ldr	r1, [pc, #32]	; (800185c <__NVIC_SetPriority+0x50>)
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	3b04      	subs	r3, #4
 8001844:	0112      	lsls	r2, r2, #4
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	440b      	add	r3, r1
 800184a:	761a      	strb	r2, [r3, #24]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000e100 	.word	0xe000e100
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001860:	b480      	push	{r7}
 8001862:	b089      	sub	sp, #36	; 0x24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f1c3 0307 	rsb	r3, r3, #7
 800187a:	2b04      	cmp	r3, #4
 800187c:	bf28      	it	cs
 800187e:	2304      	movcs	r3, #4
 8001880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3304      	adds	r3, #4
 8001886:	2b06      	cmp	r3, #6
 8001888:	d902      	bls.n	8001890 <NVIC_EncodePriority+0x30>
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3b03      	subs	r3, #3
 800188e:	e000      	b.n	8001892 <NVIC_EncodePriority+0x32>
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001894:	f04f 32ff 	mov.w	r2, #4294967295
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43da      	mvns	r2, r3
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	401a      	ands	r2, r3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	fa01 f303 	lsl.w	r3, r1, r3
 80018b2:	43d9      	mvns	r1, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	4313      	orrs	r3, r2
         );
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3724      	adds	r7, #36	; 0x24
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018d8:	d301      	bcc.n	80018de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018da:	2301      	movs	r3, #1
 80018dc:	e00f      	b.n	80018fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018de:	4a0a      	ldr	r2, [pc, #40]	; (8001908 <SysTick_Config+0x40>)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018e6:	210f      	movs	r1, #15
 80018e8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ec:	f7ff ff8e 	bl	800180c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <SysTick_Config+0x40>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018f6:	4b04      	ldr	r3, [pc, #16]	; (8001908 <SysTick_Config+0x40>)
 80018f8:	2207      	movs	r2, #7
 80018fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	e000e010 	.word	0xe000e010

0800190c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff ff29 	bl	800176c <__NVIC_SetPriorityGrouping>
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001922:	b580      	push	{r7, lr}
 8001924:	b086      	sub	sp, #24
 8001926:	af00      	add	r7, sp, #0
 8001928:	4603      	mov	r3, r0
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
 800192e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001934:	f7ff ff3e 	bl	80017b4 <__NVIC_GetPriorityGrouping>
 8001938:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	68b9      	ldr	r1, [r7, #8]
 800193e:	6978      	ldr	r0, [r7, #20]
 8001940:	f7ff ff8e 	bl	8001860 <NVIC_EncodePriority>
 8001944:	4602      	mov	r2, r0
 8001946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194a:	4611      	mov	r1, r2
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff5d 	bl	800180c <__NVIC_SetPriority>
}
 8001952:	bf00      	nop
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	4603      	mov	r3, r0
 8001962:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff ff31 	bl	80017d0 <__NVIC_EnableIRQ>
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff ffa2 	bl	80018c8 <SysTick_Config>
 8001984:	4603      	mov	r3, r0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800199c:	f7ff fab4 	bl	8000f08 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e099      	b.n	8001ae0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2202      	movs	r2, #2
 80019b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 0201 	bic.w	r2, r2, #1
 80019ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019cc:	e00f      	b.n	80019ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019ce:	f7ff fa9b 	bl	8000f08 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b05      	cmp	r3, #5
 80019da:	d908      	bls.n	80019ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2220      	movs	r2, #32
 80019e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2203      	movs	r2, #3
 80019e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e078      	b.n	8001ae0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1e8      	bne.n	80019ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a04:	697a      	ldr	r2, [r7, #20]
 8001a06:	4b38      	ldr	r3, [pc, #224]	; (8001ae8 <HAL_DMA_Init+0x158>)
 8001a08:	4013      	ands	r3, r2
 8001a0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	d107      	bne.n	8001a58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a50:	4313      	orrs	r3, r2
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	f023 0307 	bic.w	r3, r3, #7
 8001a6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	d117      	bne.n	8001ab2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d00e      	beq.n	8001ab2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 fa6f 	bl	8001f78 <DMA_CheckFifoParam>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d008      	beq.n	8001ab2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2240      	movs	r2, #64	; 0x40
 8001aa4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e016      	b.n	8001ae0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 fa26 	bl	8001f0c <DMA_CalcBaseAndBitshift>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac8:	223f      	movs	r2, #63	; 0x3f
 8001aca:	409a      	lsls	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	f010803f 	.word	0xf010803f

08001aec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
 8001af8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001afa:	2300      	movs	r3, #0
 8001afc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b02:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d101      	bne.n	8001b12 <HAL_DMA_Start_IT+0x26>
 8001b0e:	2302      	movs	r3, #2
 8001b10:	e040      	b.n	8001b94 <HAL_DMA_Start_IT+0xa8>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d12f      	bne.n	8001b86 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2202      	movs	r2, #2
 8001b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2200      	movs	r2, #0
 8001b32:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	68b9      	ldr	r1, [r7, #8]
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f000 f9b8 	bl	8001eb0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b44:	223f      	movs	r2, #63	; 0x3f
 8001b46:	409a      	lsls	r2, r3
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f042 0216 	orr.w	r2, r2, #22
 8001b5a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d007      	beq.n	8001b74 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0208 	orr.w	r2, r2, #8
 8001b72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0201 	orr.w	r2, r2, #1
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	e005      	b.n	8001b92 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ba8:	4b8e      	ldr	r3, [pc, #568]	; (8001de4 <HAL_DMA_IRQHandler+0x248>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a8e      	ldr	r2, [pc, #568]	; (8001de8 <HAL_DMA_IRQHandler+0x24c>)
 8001bae:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb2:	0a9b      	lsrs	r3, r3, #10
 8001bb4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc6:	2208      	movs	r2, #8
 8001bc8:	409a      	lsls	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d01a      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d013      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 0204 	bic.w	r2, r2, #4
 8001bee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf4:	2208      	movs	r2, #8
 8001bf6:	409a      	lsls	r2, r3
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c00:	f043 0201 	orr.w	r2, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	409a      	lsls	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d012      	beq.n	8001c3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00b      	beq.n	8001c3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	409a      	lsls	r2, r3
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c36:	f043 0202 	orr.w	r2, r3, #2
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c42:	2204      	movs	r2, #4
 8001c44:	409a      	lsls	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d012      	beq.n	8001c74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d00b      	beq.n	8001c74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c60:	2204      	movs	r2, #4
 8001c62:	409a      	lsls	r2, r3
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6c:	f043 0204 	orr.w	r2, r3, #4
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c78:	2210      	movs	r2, #16
 8001c7a:	409a      	lsls	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d043      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d03c      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c96:	2210      	movs	r2, #16
 8001c98:	409a      	lsls	r2, r3
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d018      	beq.n	8001cde <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d108      	bne.n	8001ccc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d024      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	4798      	blx	r3
 8001cca:	e01f      	b.n	8001d0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d01b      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	4798      	blx	r3
 8001cdc:	e016      	b.n	8001d0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d107      	bne.n	8001cfc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0208 	bic.w	r2, r2, #8
 8001cfa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d10:	2220      	movs	r2, #32
 8001d12:	409a      	lsls	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4013      	ands	r3, r2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 808f 	beq.w	8001e3c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0310 	and.w	r3, r3, #16
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 8087 	beq.w	8001e3c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d32:	2220      	movs	r2, #32
 8001d34:	409a      	lsls	r2, r3
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b05      	cmp	r3, #5
 8001d44:	d136      	bne.n	8001db4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 0216 	bic.w	r2, r2, #22
 8001d54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	695a      	ldr	r2, [r3, #20]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d103      	bne.n	8001d76 <HAL_DMA_IRQHandler+0x1da>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d007      	beq.n	8001d86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 0208 	bic.w	r2, r2, #8
 8001d84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8a:	223f      	movs	r2, #63	; 0x3f
 8001d8c:	409a      	lsls	r2, r3
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d07e      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	4798      	blx	r3
        }
        return;
 8001db2:	e079      	b.n	8001ea8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d01d      	beq.n	8001dfe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d10d      	bne.n	8001dec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d031      	beq.n	8001e3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	4798      	blx	r3
 8001de0:	e02c      	b.n	8001e3c <HAL_DMA_IRQHandler+0x2a0>
 8001de2:	bf00      	nop
 8001de4:	20000000 	.word	0x20000000
 8001de8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d023      	beq.n	8001e3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	4798      	blx	r3
 8001dfc:	e01e      	b.n	8001e3c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d10f      	bne.n	8001e2c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0210 	bic.w	r2, r2, #16
 8001e1a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d032      	beq.n	8001eaa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d022      	beq.n	8001e96 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2205      	movs	r2, #5
 8001e54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 0201 	bic.w	r2, r2, #1
 8001e66:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d307      	bcc.n	8001e84 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f2      	bne.n	8001e68 <HAL_DMA_IRQHandler+0x2cc>
 8001e82:	e000      	b.n	8001e86 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e84:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d005      	beq.n	8001eaa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	4798      	blx	r3
 8001ea6:	e000      	b.n	8001eaa <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ea8:	bf00      	nop
    }
  }
}
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ecc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	2b40      	cmp	r3, #64	; 0x40
 8001edc:	d108      	bne.n	8001ef0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001eee:	e007      	b.n	8001f00 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68ba      	ldr	r2, [r7, #8]
 8001ef6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	60da      	str	r2, [r3, #12]
}
 8001f00:	bf00      	nop
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	3b10      	subs	r3, #16
 8001f1c:	4a14      	ldr	r2, [pc, #80]	; (8001f70 <DMA_CalcBaseAndBitshift+0x64>)
 8001f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f22:	091b      	lsrs	r3, r3, #4
 8001f24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f26:	4a13      	ldr	r2, [pc, #76]	; (8001f74 <DMA_CalcBaseAndBitshift+0x68>)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2b03      	cmp	r3, #3
 8001f38:	d909      	bls.n	8001f4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f42:	f023 0303 	bic.w	r3, r3, #3
 8001f46:	1d1a      	adds	r2, r3, #4
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	659a      	str	r2, [r3, #88]	; 0x58
 8001f4c:	e007      	b.n	8001f5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f56:	f023 0303 	bic.w	r3, r3, #3
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	aaaaaaab 	.word	0xaaaaaaab
 8001f74:	080092d4 	.word	0x080092d4

08001f78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d11f      	bne.n	8001fd2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	2b03      	cmp	r3, #3
 8001f96:	d856      	bhi.n	8002046 <DMA_CheckFifoParam+0xce>
 8001f98:	a201      	add	r2, pc, #4	; (adr r2, 8001fa0 <DMA_CheckFifoParam+0x28>)
 8001f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9e:	bf00      	nop
 8001fa0:	08001fb1 	.word	0x08001fb1
 8001fa4:	08001fc3 	.word	0x08001fc3
 8001fa8:	08001fb1 	.word	0x08001fb1
 8001fac:	08002047 	.word	0x08002047
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d046      	beq.n	800204a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fc0:	e043      	b.n	800204a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001fca:	d140      	bne.n	800204e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fd0:	e03d      	b.n	800204e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fda:	d121      	bne.n	8002020 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2b03      	cmp	r3, #3
 8001fe0:	d837      	bhi.n	8002052 <DMA_CheckFifoParam+0xda>
 8001fe2:	a201      	add	r2, pc, #4	; (adr r2, 8001fe8 <DMA_CheckFifoParam+0x70>)
 8001fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe8:	08001ff9 	.word	0x08001ff9
 8001fec:	08001fff 	.word	0x08001fff
 8001ff0:	08001ff9 	.word	0x08001ff9
 8001ff4:	08002011 	.word	0x08002011
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8001ffc:	e030      	b.n	8002060 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002002:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d025      	beq.n	8002056 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800200e:	e022      	b.n	8002056 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002014:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002018:	d11f      	bne.n	800205a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800201e:	e01c      	b.n	800205a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d903      	bls.n	800202e <DMA_CheckFifoParam+0xb6>
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	2b03      	cmp	r3, #3
 800202a:	d003      	beq.n	8002034 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800202c:	e018      	b.n	8002060 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	73fb      	strb	r3, [r7, #15]
      break;
 8002032:	e015      	b.n	8002060 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00e      	beq.n	800205e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	73fb      	strb	r3, [r7, #15]
      break;
 8002044:	e00b      	b.n	800205e <DMA_CheckFifoParam+0xe6>
      break;
 8002046:	bf00      	nop
 8002048:	e00a      	b.n	8002060 <DMA_CheckFifoParam+0xe8>
      break;
 800204a:	bf00      	nop
 800204c:	e008      	b.n	8002060 <DMA_CheckFifoParam+0xe8>
      break;
 800204e:	bf00      	nop
 8002050:	e006      	b.n	8002060 <DMA_CheckFifoParam+0xe8>
      break;
 8002052:	bf00      	nop
 8002054:	e004      	b.n	8002060 <DMA_CheckFifoParam+0xe8>
      break;
 8002056:	bf00      	nop
 8002058:	e002      	b.n	8002060 <DMA_CheckFifoParam+0xe8>
      break;   
 800205a:	bf00      	nop
 800205c:	e000      	b.n	8002060 <DMA_CheckFifoParam+0xe8>
      break;
 800205e:	bf00      	nop
    }
  } 
  
  return status; 
 8002060:	7bfb      	ldrb	r3, [r7, #15]
}
 8002062:	4618      	mov	r0, r3
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop

08002070 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002070:	b480      	push	{r7}
 8002072:	b089      	sub	sp, #36	; 0x24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800207e:	2300      	movs	r3, #0
 8002080:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002082:	2300      	movs	r3, #0
 8002084:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
 800208a:	e159      	b.n	8002340 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800208c:	2201      	movs	r2, #1
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	4013      	ands	r3, r2
 800209e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	f040 8148 	bne.w	800233a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f003 0303 	and.w	r3, r3, #3
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d005      	beq.n	80020c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d130      	bne.n	8002124 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	2203      	movs	r2, #3
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43db      	mvns	r3, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4013      	ands	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	68da      	ldr	r2, [r3, #12]
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020f8:	2201      	movs	r2, #1
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	091b      	lsrs	r3, r3, #4
 800210e:	f003 0201 	and.w	r2, r3, #1
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	2b03      	cmp	r3, #3
 800212e:	d017      	beq.n	8002160 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	2203      	movs	r2, #3
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4313      	orrs	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 0303 	and.w	r3, r3, #3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d123      	bne.n	80021b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	08da      	lsrs	r2, r3, #3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3208      	adds	r2, #8
 8002174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002178:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	220f      	movs	r2, #15
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	691a      	ldr	r2, [r3, #16]
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	08da      	lsrs	r2, r3, #3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3208      	adds	r2, #8
 80021ae:	69b9      	ldr	r1, [r7, #24]
 80021b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	2203      	movs	r2, #3
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 0203 	and.w	r2, r3, #3
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4313      	orrs	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 80a2 	beq.w	800233a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	4b57      	ldr	r3, [pc, #348]	; (8002358 <HAL_GPIO_Init+0x2e8>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	4a56      	ldr	r2, [pc, #344]	; (8002358 <HAL_GPIO_Init+0x2e8>)
 8002200:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002204:	6453      	str	r3, [r2, #68]	; 0x44
 8002206:	4b54      	ldr	r3, [pc, #336]	; (8002358 <HAL_GPIO_Init+0x2e8>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002212:	4a52      	ldr	r2, [pc, #328]	; (800235c <HAL_GPIO_Init+0x2ec>)
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	089b      	lsrs	r3, r3, #2
 8002218:	3302      	adds	r3, #2
 800221a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800221e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f003 0303 	and.w	r3, r3, #3
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	220f      	movs	r2, #15
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43db      	mvns	r3, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4013      	ands	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a49      	ldr	r2, [pc, #292]	; (8002360 <HAL_GPIO_Init+0x2f0>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d019      	beq.n	8002272 <HAL_GPIO_Init+0x202>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a48      	ldr	r2, [pc, #288]	; (8002364 <HAL_GPIO_Init+0x2f4>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d013      	beq.n	800226e <HAL_GPIO_Init+0x1fe>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a47      	ldr	r2, [pc, #284]	; (8002368 <HAL_GPIO_Init+0x2f8>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d00d      	beq.n	800226a <HAL_GPIO_Init+0x1fa>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a46      	ldr	r2, [pc, #280]	; (800236c <HAL_GPIO_Init+0x2fc>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d007      	beq.n	8002266 <HAL_GPIO_Init+0x1f6>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a45      	ldr	r2, [pc, #276]	; (8002370 <HAL_GPIO_Init+0x300>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d101      	bne.n	8002262 <HAL_GPIO_Init+0x1f2>
 800225e:	2304      	movs	r3, #4
 8002260:	e008      	b.n	8002274 <HAL_GPIO_Init+0x204>
 8002262:	2307      	movs	r3, #7
 8002264:	e006      	b.n	8002274 <HAL_GPIO_Init+0x204>
 8002266:	2303      	movs	r3, #3
 8002268:	e004      	b.n	8002274 <HAL_GPIO_Init+0x204>
 800226a:	2302      	movs	r3, #2
 800226c:	e002      	b.n	8002274 <HAL_GPIO_Init+0x204>
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <HAL_GPIO_Init+0x204>
 8002272:	2300      	movs	r3, #0
 8002274:	69fa      	ldr	r2, [r7, #28]
 8002276:	f002 0203 	and.w	r2, r2, #3
 800227a:	0092      	lsls	r2, r2, #2
 800227c:	4093      	lsls	r3, r2
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002284:	4935      	ldr	r1, [pc, #212]	; (800235c <HAL_GPIO_Init+0x2ec>)
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	089b      	lsrs	r3, r3, #2
 800228a:	3302      	adds	r3, #2
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002292:	4b38      	ldr	r3, [pc, #224]	; (8002374 <HAL_GPIO_Init+0x304>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	43db      	mvns	r3, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4013      	ands	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022b6:	4a2f      	ldr	r2, [pc, #188]	; (8002374 <HAL_GPIO_Init+0x304>)
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022bc:	4b2d      	ldr	r3, [pc, #180]	; (8002374 <HAL_GPIO_Init+0x304>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022e0:	4a24      	ldr	r2, [pc, #144]	; (8002374 <HAL_GPIO_Init+0x304>)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022e6:	4b23      	ldr	r3, [pc, #140]	; (8002374 <HAL_GPIO_Init+0x304>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	43db      	mvns	r3, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4013      	ands	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800230a:	4a1a      	ldr	r2, [pc, #104]	; (8002374 <HAL_GPIO_Init+0x304>)
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002310:	4b18      	ldr	r3, [pc, #96]	; (8002374 <HAL_GPIO_Init+0x304>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002334:	4a0f      	ldr	r2, [pc, #60]	; (8002374 <HAL_GPIO_Init+0x304>)
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	3301      	adds	r3, #1
 800233e:	61fb      	str	r3, [r7, #28]
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	2b0f      	cmp	r3, #15
 8002344:	f67f aea2 	bls.w	800208c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002348:	bf00      	nop
 800234a:	bf00      	nop
 800234c:	3724      	adds	r7, #36	; 0x24
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	40023800 	.word	0x40023800
 800235c:	40013800 	.word	0x40013800
 8002360:	40020000 	.word	0x40020000
 8002364:	40020400 	.word	0x40020400
 8002368:	40020800 	.word	0x40020800
 800236c:	40020c00 	.word	0x40020c00
 8002370:	40021000 	.word	0x40021000
 8002374:	40013c00 	.word	0x40013c00

08002378 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691a      	ldr	r2, [r3, #16]
 8002388:	887b      	ldrh	r3, [r7, #2]
 800238a:	4013      	ands	r3, r2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d002      	beq.n	8002396 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002390:	2301      	movs	r3, #1
 8002392:	73fb      	strb	r3, [r7, #15]
 8002394:	e001      	b.n	800239a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002396:	2300      	movs	r3, #0
 8002398:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800239a:	7bfb      	ldrb	r3, [r7, #15]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	807b      	strh	r3, [r7, #2]
 80023b4:	4613      	mov	r3, r2
 80023b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023b8:	787b      	ldrb	r3, [r7, #1]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023be:	887a      	ldrh	r2, [r7, #2]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023c4:	e003      	b.n	80023ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023c6:	887b      	ldrh	r3, [r7, #2]
 80023c8:	041a      	lsls	r2, r3, #16
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	619a      	str	r2, [r3, #24]
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
	...

080023dc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e128      	b.n	8002640 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d109      	bne.n	800240e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a90      	ldr	r2, [pc, #576]	; (8002648 <HAL_I2S_Init+0x26c>)
 8002406:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7fe fb93 	bl	8000b34 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2202      	movs	r2, #2
 8002412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6812      	ldr	r2, [r2, #0]
 8002420:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002424:	f023 030f 	bic.w	r3, r3, #15
 8002428:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2202      	movs	r2, #2
 8002430:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d060      	beq.n	80024fc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d102      	bne.n	8002448 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002442:	2310      	movs	r3, #16
 8002444:	617b      	str	r3, [r7, #20]
 8002446:	e001      	b.n	800244c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002448:	2320      	movs	r3, #32
 800244a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	2b20      	cmp	r3, #32
 8002452:	d802      	bhi.n	800245a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800245a:	2001      	movs	r0, #1
 800245c:	f002 fd24 	bl	8004ea8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002460:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800246a:	d125      	bne.n	80024b8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d010      	beq.n	8002496 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	fbb2 f2f3 	udiv	r2, r2, r3
 800247e:	4613      	mov	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	461a      	mov	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002490:	3305      	adds	r3, #5
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	e01f      	b.n	80024d6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	fbb2 f2f3 	udiv	r2, r2, r3
 80024a0:	4613      	mov	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	461a      	mov	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b2:	3305      	adds	r3, #5
 80024b4:	613b      	str	r3, [r7, #16]
 80024b6:	e00e      	b.n	80024d6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80024c0:	4613      	mov	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	461a      	mov	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d2:	3305      	adds	r3, #5
 80024d4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	4a5c      	ldr	r2, [pc, #368]	; (800264c <HAL_I2S_Init+0x270>)
 80024da:	fba2 2303 	umull	r2, r3, r2, r3
 80024de:	08db      	lsrs	r3, r3, #3
 80024e0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	085b      	lsrs	r3, r3, #1
 80024f2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	021b      	lsls	r3, r3, #8
 80024f8:	61bb      	str	r3, [r7, #24]
 80024fa:	e003      	b.n	8002504 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80024fc:	2302      	movs	r3, #2
 80024fe:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002500:	2300      	movs	r3, #0
 8002502:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d902      	bls.n	8002510 <HAL_I2S_Init+0x134>
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	2bff      	cmp	r3, #255	; 0xff
 800250e:	d907      	bls.n	8002520 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002514:	f043 0210 	orr.w	r2, r3, #16
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e08f      	b.n	8002640 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	691a      	ldr	r2, [r3, #16]
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	ea42 0103 	orr.w	r1, r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	69fa      	ldr	r2, [r7, #28]
 8002530:	430a      	orrs	r2, r1
 8002532:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800253e:	f023 030f 	bic.w	r3, r3, #15
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6851      	ldr	r1, [r2, #4]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6892      	ldr	r2, [r2, #8]
 800254a:	4311      	orrs	r1, r2
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	68d2      	ldr	r2, [r2, #12]
 8002550:	4311      	orrs	r1, r2
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6992      	ldr	r2, [r2, #24]
 8002556:	430a      	orrs	r2, r1
 8002558:	431a      	orrs	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002562:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d161      	bne.n	8002630 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a38      	ldr	r2, [pc, #224]	; (8002650 <HAL_I2S_Init+0x274>)
 8002570:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a37      	ldr	r2, [pc, #220]	; (8002654 <HAL_I2S_Init+0x278>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d101      	bne.n	8002580 <HAL_I2S_Init+0x1a4>
 800257c:	4b36      	ldr	r3, [pc, #216]	; (8002658 <HAL_I2S_Init+0x27c>)
 800257e:	e001      	b.n	8002584 <HAL_I2S_Init+0x1a8>
 8002580:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6812      	ldr	r2, [r2, #0]
 800258a:	4932      	ldr	r1, [pc, #200]	; (8002654 <HAL_I2S_Init+0x278>)
 800258c:	428a      	cmp	r2, r1
 800258e:	d101      	bne.n	8002594 <HAL_I2S_Init+0x1b8>
 8002590:	4a31      	ldr	r2, [pc, #196]	; (8002658 <HAL_I2S_Init+0x27c>)
 8002592:	e001      	b.n	8002598 <HAL_I2S_Init+0x1bc>
 8002594:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002598:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800259c:	f023 030f 	bic.w	r3, r3, #15
 80025a0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a2b      	ldr	r2, [pc, #172]	; (8002654 <HAL_I2S_Init+0x278>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d101      	bne.n	80025b0 <HAL_I2S_Init+0x1d4>
 80025ac:	4b2a      	ldr	r3, [pc, #168]	; (8002658 <HAL_I2S_Init+0x27c>)
 80025ae:	e001      	b.n	80025b4 <HAL_I2S_Init+0x1d8>
 80025b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025b4:	2202      	movs	r2, #2
 80025b6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a25      	ldr	r2, [pc, #148]	; (8002654 <HAL_I2S_Init+0x278>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d101      	bne.n	80025c6 <HAL_I2S_Init+0x1ea>
 80025c2:	4b25      	ldr	r3, [pc, #148]	; (8002658 <HAL_I2S_Init+0x27c>)
 80025c4:	e001      	b.n	80025ca <HAL_I2S_Init+0x1ee>
 80025c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025d6:	d003      	beq.n	80025e0 <HAL_I2S_Init+0x204>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d103      	bne.n	80025e8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80025e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	e001      	b.n	80025ec <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80025e8:	2300      	movs	r3, #0
 80025ea:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80025f6:	4313      	orrs	r3, r2
 80025f8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002600:	4313      	orrs	r3, r2
 8002602:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800260a:	4313      	orrs	r3, r2
 800260c:	b29a      	uxth	r2, r3
 800260e:	897b      	ldrh	r3, [r7, #10]
 8002610:	4313      	orrs	r3, r2
 8002612:	b29b      	uxth	r3, r3
 8002614:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002618:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a0d      	ldr	r2, [pc, #52]	; (8002654 <HAL_I2S_Init+0x278>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d101      	bne.n	8002628 <HAL_I2S_Init+0x24c>
 8002624:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <HAL_I2S_Init+0x27c>)
 8002626:	e001      	b.n	800262c <HAL_I2S_Init+0x250>
 8002628:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800262c:	897a      	ldrh	r2, [r7, #10]
 800262e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3720      	adds	r7, #32
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	08002961 	.word	0x08002961
 800264c:	cccccccd 	.word	0xcccccccd
 8002650:	08002a75 	.word	0x08002a75
 8002654:	40003800 	.word	0x40003800
 8002658:	40003400 	.word	0x40003400

0800265c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	4613      	mov	r3, r2
 8002668:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d002      	beq.n	8002676 <HAL_I2S_Transmit_DMA+0x1a>
 8002670:	88fb      	ldrh	r3, [r7, #6]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e08e      	b.n	8002798 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b01      	cmp	r3, #1
 8002684:	d101      	bne.n	800268a <HAL_I2S_Transmit_DMA+0x2e>
 8002686:	2302      	movs	r3, #2
 8002688:	e086      	b.n	8002798 <HAL_I2S_Transmit_DMA+0x13c>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b01      	cmp	r3, #1
 800269c:	d005      	beq.n	80026aa <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80026a6:	2302      	movs	r3, #2
 80026a8:	e076      	b.n	8002798 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2203      	movs	r2, #3
 80026ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	d002      	beq.n	80026d6 <HAL_I2S_Transmit_DMA+0x7a>
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	2b05      	cmp	r3, #5
 80026d4:	d10a      	bne.n	80026ec <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80026d6:	88fb      	ldrh	r3, [r7, #6]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	b29a      	uxth	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80026e0:	88fb      	ldrh	r3, [r7, #6]
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026ea:	e005      	b.n	80026f8 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	88fa      	ldrh	r2, [r7, #6]
 80026f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	88fa      	ldrh	r2, [r7, #6]
 80026f6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fc:	4a28      	ldr	r2, [pc, #160]	; (80027a0 <HAL_I2S_Transmit_DMA+0x144>)
 80026fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002704:	4a27      	ldr	r2, [pc, #156]	; (80027a4 <HAL_I2S_Transmit_DMA+0x148>)
 8002706:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270c:	4a26      	ldr	r2, [pc, #152]	; (80027a8 <HAL_I2S_Transmit_DMA+0x14c>)
 800270e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002718:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002720:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002726:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002728:	f7ff f9e0 	bl	8001aec <HAL_DMA_Start_IT>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00f      	beq.n	8002752 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002736:	f043 0208 	orr.w	r2, r3, #8
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e022      	b.n	8002798 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	69db      	ldr	r3, [r3, #28]
 8002758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800275c:	2b00      	cmp	r3, #0
 800275e:	d107      	bne.n	8002770 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	69da      	ldr	r2, [r3, #28]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800276e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d107      	bne.n	800278e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f042 0202 	orr.w	r2, r2, #2
 800278c:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	0800283f 	.word	0x0800283f
 80027a4:	080027fd 	.word	0x080027fd
 80027a8:	0800285b 	.word	0x0800285b

080027ac <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002808:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10e      	bne.n	8002830 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0202 	bic.w	r2, r2, #2
 8002820:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f7ff ffc5 	bl	80027c0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002836:	bf00      	nop
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b084      	sub	sp, #16
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f7ff ffad 	bl	80027ac <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002852:	bf00      	nop
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b084      	sub	sp, #16
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002866:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0203 	bic.w	r2, r2, #3
 8002876:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002890:	f043 0208 	orr.w	r2, r3, #8
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f7ff ffa5 	bl	80027e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800289e:	bf00      	nop
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b082      	sub	sp, #8
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	881a      	ldrh	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	1c9a      	adds	r2, r3, #2
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	3b01      	subs	r3, #1
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10e      	bne.n	80028fa <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80028ea:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7ff ff63 	bl	80027c0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b082      	sub	sp, #8
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68da      	ldr	r2, [r3, #12]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002914:	b292      	uxth	r2, r2
 8002916:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291c:	1c9a      	adds	r2, r3, #2
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002926:	b29b      	uxth	r3, r3
 8002928:	3b01      	subs	r3, #1
 800292a:	b29a      	uxth	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002934:	b29b      	uxth	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10e      	bne.n	8002958 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002948:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7ff ff3e 	bl	80027d4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002958:	bf00      	nop
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b04      	cmp	r3, #4
 800297a:	d13a      	bne.n	80029f2 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b01      	cmp	r3, #1
 8002984:	d109      	bne.n	800299a <I2S_IRQHandler+0x3a>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002990:	2b40      	cmp	r3, #64	; 0x40
 8002992:	d102      	bne.n	800299a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f7ff ffb4 	bl	8002902 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a0:	2b40      	cmp	r3, #64	; 0x40
 80029a2:	d126      	bne.n	80029f2 <I2S_IRQHandler+0x92>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f003 0320 	and.w	r3, r3, #32
 80029ae:	2b20      	cmp	r3, #32
 80029b0:	d11f      	bne.n	80029f2 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029c0:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80029c2:	2300      	movs	r3, #0
 80029c4:	613b      	str	r3, [r7, #16]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	613b      	str	r3, [r7, #16]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e4:	f043 0202 	orr.w	r2, r3, #2
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7ff fefb 	bl	80027e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d136      	bne.n	8002a6c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d109      	bne.n	8002a1c <I2S_IRQHandler+0xbc>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a12:	2b80      	cmp	r3, #128	; 0x80
 8002a14:	d102      	bne.n	8002a1c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff ff45 	bl	80028a6 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b08      	cmp	r3, #8
 8002a24:	d122      	bne.n	8002a6c <I2S_IRQHandler+0x10c>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 0320 	and.w	r3, r3, #32
 8002a30:	2b20      	cmp	r3, #32
 8002a32:	d11b      	bne.n	8002a6c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a42:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002a44:	2300      	movs	r3, #0
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5e:	f043 0204 	orr.w	r2, r3, #4
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7ff febe 	bl	80027e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002a6c:	bf00      	nop
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a92      	ldr	r2, [pc, #584]	; (8002cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d101      	bne.n	8002a92 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002a8e:	4b92      	ldr	r3, [pc, #584]	; (8002cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002a90:	e001      	b.n	8002a96 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002a92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a8b      	ldr	r2, [pc, #556]	; (8002cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d101      	bne.n	8002ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002aac:	4b8a      	ldr	r3, [pc, #552]	; (8002cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002aae:	e001      	b.n	8002ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002ab0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ac0:	d004      	beq.n	8002acc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f040 8099 	bne.w	8002bfe <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d107      	bne.n	8002ae6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d002      	beq.n	8002ae6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 f925 	bl	8002d30 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d107      	bne.n	8002b00 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d002      	beq.n	8002b00 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f9c8 	bl	8002e90 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b06:	2b40      	cmp	r3, #64	; 0x40
 8002b08:	d13a      	bne.n	8002b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	f003 0320 	and.w	r3, r3, #32
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d035      	beq.n	8002b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a6e      	ldr	r2, [pc, #440]	; (8002cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d101      	bne.n	8002b22 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002b1e:	4b6e      	ldr	r3, [pc, #440]	; (8002cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b20:	e001      	b.n	8002b26 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002b22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4969      	ldr	r1, [pc, #420]	; (8002cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b2e:	428b      	cmp	r3, r1
 8002b30:	d101      	bne.n	8002b36 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002b32:	4b69      	ldr	r3, [pc, #420]	; (8002cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b34:	e001      	b.n	8002b3a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002b36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b3a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b3e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b4e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002b50:	2300      	movs	r3, #0
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b72:	f043 0202 	orr.w	r2, r3, #2
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff fe34 	bl	80027e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	f040 80c3 	bne.w	8002d12 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	f003 0320 	and.w	r3, r3, #32
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 80bd 	beq.w	8002d12 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ba6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a49      	ldr	r2, [pc, #292]	; (8002cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d101      	bne.n	8002bb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002bb2:	4b49      	ldr	r3, [pc, #292]	; (8002cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002bb4:	e001      	b.n	8002bba <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002bb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4944      	ldr	r1, [pc, #272]	; (8002cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002bc2:	428b      	cmp	r3, r1
 8002bc4:	d101      	bne.n	8002bca <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002bc6:	4b44      	ldr	r3, [pc, #272]	; (8002cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002bc8:	e001      	b.n	8002bce <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002bca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002bd2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	60bb      	str	r3, [r7, #8]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	60bb      	str	r3, [r7, #8]
 8002be0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bee:	f043 0204 	orr.w	r2, r3, #4
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7ff fdf6 	bl	80027e8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002bfc:	e089      	b.n	8002d12 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d107      	bne.n	8002c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f8be 	bl	8002d94 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d107      	bne.n	8002c32 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d002      	beq.n	8002c32 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f8fd 	bl	8002e2c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c38:	2b40      	cmp	r3, #64	; 0x40
 8002c3a:	d12f      	bne.n	8002c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	f003 0320 	and.w	r3, r3, #32
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d02a      	beq.n	8002c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c54:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a1e      	ldr	r2, [pc, #120]	; (8002cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d101      	bne.n	8002c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002c60:	4b1d      	ldr	r3, [pc, #116]	; (8002cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c62:	e001      	b.n	8002c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002c64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4919      	ldr	r1, [pc, #100]	; (8002cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c70:	428b      	cmp	r3, r1
 8002c72:	d101      	bne.n	8002c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002c74:	4b18      	ldr	r3, [pc, #96]	; (8002cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c76:	e001      	b.n	8002c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002c78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c80:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8e:	f043 0202 	orr.w	r2, r3, #2
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7ff fda6 	bl	80027e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d136      	bne.n	8002d14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	f003 0320 	and.w	r3, r3, #32
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d031      	beq.n	8002d14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a07      	ldr	r2, [pc, #28]	; (8002cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d101      	bne.n	8002cbe <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002cba:	4b07      	ldr	r3, [pc, #28]	; (8002cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002cbc:	e001      	b.n	8002cc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002cbe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4902      	ldr	r1, [pc, #8]	; (8002cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002cca:	428b      	cmp	r3, r1
 8002ccc:	d106      	bne.n	8002cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002cce:	4b02      	ldr	r3, [pc, #8]	; (8002cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002cd0:	e006      	b.n	8002ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002cd2:	bf00      	nop
 8002cd4:	40003800 	.word	0x40003800
 8002cd8:	40003400 	.word	0x40003400
 8002cdc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ce0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ce4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002cf4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d02:	f043 0204 	orr.w	r2, r3, #4
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7ff fd6c 	bl	80027e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d10:	e000      	b.n	8002d14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d12:	bf00      	nop
}
 8002d14:	bf00      	nop
 8002d16:	3720      	adds	r7, #32
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	1c99      	adds	r1, r3, #2
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6251      	str	r1, [r2, #36]	; 0x24
 8002d42:	881a      	ldrh	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d113      	bne.n	8002d8a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d70:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d106      	bne.n	8002d8a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7ff ffc9 	bl	8002d1c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
	...

08002d94 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	1c99      	adds	r1, r3, #2
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6251      	str	r1, [r2, #36]	; 0x24
 8002da6:	8819      	ldrh	r1, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a1d      	ldr	r2, [pc, #116]	; (8002e24 <I2SEx_TxISR_I2SExt+0x90>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d101      	bne.n	8002db6 <I2SEx_TxISR_I2SExt+0x22>
 8002db2:	4b1d      	ldr	r3, [pc, #116]	; (8002e28 <I2SEx_TxISR_I2SExt+0x94>)
 8002db4:	e001      	b.n	8002dba <I2SEx_TxISR_I2SExt+0x26>
 8002db6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dba:	460a      	mov	r2, r1
 8002dbc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d121      	bne.n	8002e1a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a12      	ldr	r2, [pc, #72]	; (8002e24 <I2SEx_TxISR_I2SExt+0x90>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d101      	bne.n	8002de4 <I2SEx_TxISR_I2SExt+0x50>
 8002de0:	4b11      	ldr	r3, [pc, #68]	; (8002e28 <I2SEx_TxISR_I2SExt+0x94>)
 8002de2:	e001      	b.n	8002de8 <I2SEx_TxISR_I2SExt+0x54>
 8002de4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	490d      	ldr	r1, [pc, #52]	; (8002e24 <I2SEx_TxISR_I2SExt+0x90>)
 8002df0:	428b      	cmp	r3, r1
 8002df2:	d101      	bne.n	8002df8 <I2SEx_TxISR_I2SExt+0x64>
 8002df4:	4b0c      	ldr	r3, [pc, #48]	; (8002e28 <I2SEx_TxISR_I2SExt+0x94>)
 8002df6:	e001      	b.n	8002dfc <I2SEx_TxISR_I2SExt+0x68>
 8002df8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dfc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e00:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d106      	bne.n	8002e1a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7ff ff81 	bl	8002d1c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e1a:	bf00      	nop
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40003800 	.word	0x40003800
 8002e28:	40003400 	.word	0x40003400

08002e2c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68d8      	ldr	r0, [r3, #12]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3e:	1c99      	adds	r1, r3, #2
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002e44:	b282      	uxth	r2, r0
 8002e46:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d113      	bne.n	8002e88 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e6e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d106      	bne.n	8002e88 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7ff ff4a 	bl	8002d1c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e88:	bf00      	nop
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a20      	ldr	r2, [pc, #128]	; (8002f20 <I2SEx_RxISR_I2SExt+0x90>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d101      	bne.n	8002ea6 <I2SEx_RxISR_I2SExt+0x16>
 8002ea2:	4b20      	ldr	r3, [pc, #128]	; (8002f24 <I2SEx_RxISR_I2SExt+0x94>)
 8002ea4:	e001      	b.n	8002eaa <I2SEx_RxISR_I2SExt+0x1a>
 8002ea6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002eaa:	68d8      	ldr	r0, [r3, #12]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb0:	1c99      	adds	r1, r3, #2
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002eb6:	b282      	uxth	r2, r0
 8002eb8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d121      	bne.n	8002f16 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a12      	ldr	r2, [pc, #72]	; (8002f20 <I2SEx_RxISR_I2SExt+0x90>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d101      	bne.n	8002ee0 <I2SEx_RxISR_I2SExt+0x50>
 8002edc:	4b11      	ldr	r3, [pc, #68]	; (8002f24 <I2SEx_RxISR_I2SExt+0x94>)
 8002ede:	e001      	b.n	8002ee4 <I2SEx_RxISR_I2SExt+0x54>
 8002ee0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	490d      	ldr	r1, [pc, #52]	; (8002f20 <I2SEx_RxISR_I2SExt+0x90>)
 8002eec:	428b      	cmp	r3, r1
 8002eee:	d101      	bne.n	8002ef4 <I2SEx_RxISR_I2SExt+0x64>
 8002ef0:	4b0c      	ldr	r3, [pc, #48]	; (8002f24 <I2SEx_RxISR_I2SExt+0x94>)
 8002ef2:	e001      	b.n	8002ef8 <I2SEx_RxISR_I2SExt+0x68>
 8002ef4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ef8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002efc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d106      	bne.n	8002f16 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f7ff ff03 	bl	8002d1c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f16:	bf00      	nop
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40003800 	.word	0x40003800
 8002f24:	40003400 	.word	0x40003400

08002f28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af02      	add	r7, sp, #8
 8002f2e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e101      	b.n	800313e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d106      	bne.n	8002f5a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f005 fe55 	bl	8008c04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2203      	movs	r2, #3
 8002f5e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f68:	d102      	bne.n	8002f70 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f002 fbd4 	bl	8005722 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6818      	ldr	r0, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	7c1a      	ldrb	r2, [r3, #16]
 8002f82:	f88d 2000 	strb.w	r2, [sp]
 8002f86:	3304      	adds	r3, #4
 8002f88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f8a:	f002 fab3 	bl	80054f4 <USB_CoreInit>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0ce      	b.n	800313e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f002 fbcc 	bl	8005744 <USB_SetCurrentMode>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d005      	beq.n	8002fbe <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e0bf      	b.n	800313e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	73fb      	strb	r3, [r7, #15]
 8002fc2:	e04a      	b.n	800305a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002fc4:	7bfa      	ldrb	r2, [r7, #15]
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	4413      	add	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	3315      	adds	r3, #21
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fd8:	7bfa      	ldrb	r2, [r7, #15]
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	4413      	add	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	3314      	adds	r3, #20
 8002fe8:	7bfa      	ldrb	r2, [r7, #15]
 8002fea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002fec:	7bfa      	ldrb	r2, [r7, #15]
 8002fee:	7bfb      	ldrb	r3, [r7, #15]
 8002ff0:	b298      	uxth	r0, r3
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	4413      	add	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	332e      	adds	r3, #46	; 0x2e
 8003000:	4602      	mov	r2, r0
 8003002:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003004:	7bfa      	ldrb	r2, [r7, #15]
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	4613      	mov	r3, r2
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	4413      	add	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	3318      	adds	r3, #24
 8003014:	2200      	movs	r2, #0
 8003016:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003018:	7bfa      	ldrb	r2, [r7, #15]
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	4413      	add	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	331c      	adds	r3, #28
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800302c:	7bfa      	ldrb	r2, [r7, #15]
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	4413      	add	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	3320      	adds	r3, #32
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003040:	7bfa      	ldrb	r2, [r7, #15]
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	4613      	mov	r3, r2
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	4413      	add	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	3324      	adds	r3, #36	; 0x24
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003054:	7bfb      	ldrb	r3, [r7, #15]
 8003056:	3301      	adds	r3, #1
 8003058:	73fb      	strb	r3, [r7, #15]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	791b      	ldrb	r3, [r3, #4]
 800305e:	7bfa      	ldrb	r2, [r7, #15]
 8003060:	429a      	cmp	r2, r3
 8003062:	d3af      	bcc.n	8002fc4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003064:	2300      	movs	r3, #0
 8003066:	73fb      	strb	r3, [r7, #15]
 8003068:	e044      	b.n	80030f4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800306a:	7bfa      	ldrb	r2, [r7, #15]
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	4413      	add	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	440b      	add	r3, r1
 8003078:	f203 2355 	addw	r3, r3, #597	; 0x255
 800307c:	2200      	movs	r2, #0
 800307e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003080:	7bfa      	ldrb	r2, [r7, #15]
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4413      	add	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8003092:	7bfa      	ldrb	r2, [r7, #15]
 8003094:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003096:	7bfa      	ldrb	r2, [r7, #15]
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	4413      	add	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	440b      	add	r3, r1
 80030a4:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80030a8:	2200      	movs	r2, #0
 80030aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030ac:	7bfa      	ldrb	r2, [r7, #15]
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	4413      	add	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80030be:	2200      	movs	r2, #0
 80030c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030c2:	7bfa      	ldrb	r2, [r7, #15]
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	4613      	mov	r3, r2
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	4413      	add	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	440b      	add	r3, r1
 80030d0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030d8:	7bfa      	ldrb	r2, [r7, #15]
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	4613      	mov	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	4413      	add	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
 80030f0:	3301      	adds	r3, #1
 80030f2:	73fb      	strb	r3, [r7, #15]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	791b      	ldrb	r3, [r3, #4]
 80030f8:	7bfa      	ldrb	r2, [r7, #15]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d3b5      	bcc.n	800306a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6818      	ldr	r0, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	7c1a      	ldrb	r2, [r3, #16]
 8003106:	f88d 2000 	strb.w	r2, [sp]
 800310a:	3304      	adds	r3, #4
 800310c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800310e:	f002 fb65 	bl	80057dc <USB_DevInit>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d005      	beq.n	8003124 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2202      	movs	r2, #2
 800311c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e00c      	b.n	800313e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f003 fba9 	bl	800688e <USB_DevDisconnect>

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b084      	sub	sp, #16
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <HAL_PCD_Start+0x1c>
 800315e:	2302      	movs	r3, #2
 8003160:	e022      	b.n	80031a8 <HAL_PCD_Start+0x62>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003172:	2b00      	cmp	r3, #0
 8003174:	d009      	beq.n	800318a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800317a:	2b01      	cmp	r3, #1
 800317c:	d105      	bne.n	800318a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003182:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f002 fab6 	bl	8005700 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4618      	mov	r0, r3
 800319a:	f003 fb57 	bl	800684c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80031b0:	b590      	push	{r4, r7, lr}
 80031b2:	b08d      	sub	sp, #52	; 0x34
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031be:	6a3b      	ldr	r3, [r7, #32]
 80031c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f003 fc15 	bl	80069f6 <USB_GetMode>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f040 848c 	bne.w	8003aec <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f003 fb79 	bl	80068d0 <USB_ReadInterrupts>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 8482 	beq.w	8003aea <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	0a1b      	lsrs	r3, r3, #8
 80031f0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f003 fb66 	bl	80068d0 <USB_ReadInterrupts>
 8003204:	4603      	mov	r3, r0
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b02      	cmp	r3, #2
 800320c:	d107      	bne.n	800321e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695a      	ldr	r2, [r3, #20]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f002 0202 	and.w	r2, r2, #2
 800321c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f003 fb54 	bl	80068d0 <USB_ReadInterrupts>
 8003228:	4603      	mov	r3, r0
 800322a:	f003 0310 	and.w	r3, r3, #16
 800322e:	2b10      	cmp	r3, #16
 8003230:	d161      	bne.n	80032f6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	699a      	ldr	r2, [r3, #24]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 0210 	bic.w	r2, r2, #16
 8003240:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	f003 020f 	and.w	r2, r3, #15
 800324e:	4613      	mov	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	4413      	add	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	4413      	add	r3, r2
 800325e:	3304      	adds	r3, #4
 8003260:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	0c5b      	lsrs	r3, r3, #17
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	2b02      	cmp	r3, #2
 800326c:	d124      	bne.n	80032b8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003274:	4013      	ands	r3, r2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d035      	beq.n	80032e6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003284:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003288:	b29b      	uxth	r3, r3
 800328a:	461a      	mov	r2, r3
 800328c:	6a38      	ldr	r0, [r7, #32]
 800328e:	f003 f98b 	bl	80065a8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	68da      	ldr	r2, [r3, #12]
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	091b      	lsrs	r3, r3, #4
 800329a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800329e:	441a      	add	r2, r3
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	695a      	ldr	r2, [r3, #20]
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	091b      	lsrs	r3, r3, #4
 80032ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032b0:	441a      	add	r2, r3
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	615a      	str	r2, [r3, #20]
 80032b6:	e016      	b.n	80032e6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	0c5b      	lsrs	r3, r3, #17
 80032bc:	f003 030f 	and.w	r3, r3, #15
 80032c0:	2b06      	cmp	r3, #6
 80032c2:	d110      	bne.n	80032e6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80032ca:	2208      	movs	r2, #8
 80032cc:	4619      	mov	r1, r3
 80032ce:	6a38      	ldr	r0, [r7, #32]
 80032d0:	f003 f96a 	bl	80065a8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	695a      	ldr	r2, [r3, #20]
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	091b      	lsrs	r3, r3, #4
 80032dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032e0:	441a      	add	r2, r3
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	699a      	ldr	r2, [r3, #24]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f042 0210 	orr.w	r2, r2, #16
 80032f4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f003 fae8 	bl	80068d0 <USB_ReadInterrupts>
 8003300:	4603      	mov	r3, r0
 8003302:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003306:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800330a:	f040 80a7 	bne.w	800345c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800330e:	2300      	movs	r3, #0
 8003310:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f003 faed 	bl	80068f6 <USB_ReadDevAllOutEpInterrupt>
 800331c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800331e:	e099      	b.n	8003454 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 808e 	beq.w	8003448 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	4611      	mov	r1, r2
 8003336:	4618      	mov	r0, r3
 8003338:	f003 fb11 	bl	800695e <USB_ReadDevOutEPInterrupt>
 800333c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00c      	beq.n	8003362 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	015a      	lsls	r2, r3, #5
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	4413      	add	r3, r2
 8003350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003354:	461a      	mov	r2, r3
 8003356:	2301      	movs	r3, #1
 8003358:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800335a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 fe89 	bl	8004074 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f003 0308 	and.w	r3, r3, #8
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00c      	beq.n	8003386 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	015a      	lsls	r2, r3, #5
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	4413      	add	r3, r2
 8003374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003378:	461a      	mov	r2, r3
 800337a:	2308      	movs	r3, #8
 800337c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800337e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 ff5f 	bl	8004244 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f003 0310 	and.w	r3, r3, #16
 800338c:	2b00      	cmp	r3, #0
 800338e:	d008      	beq.n	80033a2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003392:	015a      	lsls	r2, r3, #5
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	4413      	add	r3, r2
 8003398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800339c:	461a      	mov	r2, r3
 800339e:	2310      	movs	r3, #16
 80033a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d030      	beq.n	800340e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80033ac:	6a3b      	ldr	r3, [r7, #32]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b4:	2b80      	cmp	r3, #128	; 0x80
 80033b6:	d109      	bne.n	80033cc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	69fa      	ldr	r2, [r7, #28]
 80033c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033ca:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80033cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ce:	4613      	mov	r3, r2
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	4413      	add	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	4413      	add	r3, r2
 80033de:	3304      	adds	r3, #4
 80033e0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	78db      	ldrb	r3, [r3, #3]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d108      	bne.n	80033fc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	2200      	movs	r2, #0
 80033ee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	4619      	mov	r1, r3
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f005 fd00 	bl	8008dfc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80033fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fe:	015a      	lsls	r2, r3, #5
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	4413      	add	r3, r2
 8003404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003408:	461a      	mov	r2, r3
 800340a:	2302      	movs	r3, #2
 800340c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	f003 0320 	and.w	r3, r3, #32
 8003414:	2b00      	cmp	r3, #0
 8003416:	d008      	beq.n	800342a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	015a      	lsls	r2, r3, #5
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	4413      	add	r3, r2
 8003420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003424:	461a      	mov	r2, r3
 8003426:	2320      	movs	r3, #32
 8003428:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d009      	beq.n	8003448 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	015a      	lsls	r2, r3, #5
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	4413      	add	r3, r2
 800343c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003440:	461a      	mov	r2, r3
 8003442:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003446:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	3301      	adds	r3, #1
 800344c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800344e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003450:	085b      	lsrs	r3, r3, #1
 8003452:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003456:	2b00      	cmp	r3, #0
 8003458:	f47f af62 	bne.w	8003320 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4618      	mov	r0, r3
 8003462:	f003 fa35 	bl	80068d0 <USB_ReadInterrupts>
 8003466:	4603      	mov	r3, r0
 8003468:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800346c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003470:	f040 80db 	bne.w	800362a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f003 fa56 	bl	800692a <USB_ReadDevAllInEpInterrupt>
 800347e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003484:	e0cd      	b.n	8003622 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 80c2 	beq.w	8003616 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003498:	b2d2      	uxtb	r2, r2
 800349a:	4611      	mov	r1, r2
 800349c:	4618      	mov	r0, r3
 800349e:	f003 fa7c 	bl	800699a <USB_ReadDevInEPInterrupt>
 80034a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d057      	beq.n	800355e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	f003 030f 	and.w	r3, r3, #15
 80034b4:	2201      	movs	r2, #1
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	43db      	mvns	r3, r3
 80034c8:	69f9      	ldr	r1, [r7, #28]
 80034ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034ce:	4013      	ands	r3, r2
 80034d0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	015a      	lsls	r2, r3, #5
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	4413      	add	r3, r2
 80034da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034de:	461a      	mov	r2, r3
 80034e0:	2301      	movs	r3, #1
 80034e2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	799b      	ldrb	r3, [r3, #6]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d132      	bne.n	8003552 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f0:	4613      	mov	r3, r2
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	4413      	add	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	3320      	adds	r3, #32
 80034fc:	6819      	ldr	r1, [r3, #0]
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003502:	4613      	mov	r3, r2
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	4413      	add	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4403      	add	r3, r0
 800350c:	331c      	adds	r3, #28
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4419      	add	r1, r3
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003516:	4613      	mov	r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	4413      	add	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4403      	add	r3, r0
 8003520:	3320      	adds	r3, #32
 8003522:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	2b00      	cmp	r3, #0
 8003528:	d113      	bne.n	8003552 <HAL_PCD_IRQHandler+0x3a2>
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800352e:	4613      	mov	r3, r2
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	4413      	add	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	440b      	add	r3, r1
 8003538:	3324      	adds	r3, #36	; 0x24
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d108      	bne.n	8003552 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6818      	ldr	r0, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800354a:	461a      	mov	r2, r3
 800354c:	2101      	movs	r1, #1
 800354e:	f003 fa83 	bl	8006a58 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	b2db      	uxtb	r3, r3
 8003556:	4619      	mov	r1, r3
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f005 fbd4 	bl	8008d06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	2b00      	cmp	r3, #0
 8003566:	d008      	beq.n	800357a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	015a      	lsls	r2, r3, #5
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	4413      	add	r3, r2
 8003570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003574:	461a      	mov	r2, r3
 8003576:	2308      	movs	r3, #8
 8003578:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f003 0310 	and.w	r3, r3, #16
 8003580:	2b00      	cmp	r3, #0
 8003582:	d008      	beq.n	8003596 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	4413      	add	r3, r2
 800358c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003590:	461a      	mov	r2, r3
 8003592:	2310      	movs	r3, #16
 8003594:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359c:	2b00      	cmp	r3, #0
 800359e:	d008      	beq.n	80035b2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	015a      	lsls	r2, r3, #5
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	4413      	add	r3, r2
 80035a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ac:	461a      	mov	r2, r3
 80035ae:	2340      	movs	r3, #64	; 0x40
 80035b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d023      	beq.n	8003604 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80035bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035be:	6a38      	ldr	r0, [r7, #32]
 80035c0:	f002 fa70 	bl	8005aa4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80035c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c6:	4613      	mov	r3, r2
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	4413      	add	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	3310      	adds	r3, #16
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	4413      	add	r3, r2
 80035d4:	3304      	adds	r3, #4
 80035d6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	78db      	ldrb	r3, [r3, #3]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d108      	bne.n	80035f2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	2200      	movs	r2, #0
 80035e4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	4619      	mov	r1, r3
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f005 fc17 	bl	8008e20 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	015a      	lsls	r2, r3, #5
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	4413      	add	r3, r2
 80035fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035fe:	461a      	mov	r2, r3
 8003600:	2302      	movs	r3, #2
 8003602:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800360e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 fca3 	bl	8003f5c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	3301      	adds	r3, #1
 800361a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800361c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361e:	085b      	lsrs	r3, r3, #1
 8003620:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003624:	2b00      	cmp	r3, #0
 8003626:	f47f af2e 	bne.w	8003486 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f003 f94e 	bl	80068d0 <USB_ReadInterrupts>
 8003634:	4603      	mov	r3, r0
 8003636:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800363a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800363e:	d122      	bne.n	8003686 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	69fa      	ldr	r2, [r7, #28]
 800364a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800364e:	f023 0301 	bic.w	r3, r3, #1
 8003652:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 800365a:	2b01      	cmp	r3, #1
 800365c:	d108      	bne.n	8003670 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003666:	2100      	movs	r1, #0
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 fe89 	bl	8004380 <HAL_PCDEx_LPM_Callback>
 800366e:	e002      	b.n	8003676 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f005 fbb5 	bl	8008de0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695a      	ldr	r2, [r3, #20]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003684:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f003 f920 	bl	80068d0 <USB_ReadInterrupts>
 8003690:	4603      	mov	r3, r0
 8003692:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003696:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800369a:	d112      	bne.n	80036c2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d102      	bne.n	80036b2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f005 fb71 	bl	8008d94 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695a      	ldr	r2, [r3, #20]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80036c0:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f003 f902 	bl	80068d0 <USB_ReadInterrupts>
 80036cc:	4603      	mov	r3, r0
 80036ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d6:	f040 80b7 	bne.w	8003848 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	69fa      	ldr	r2, [r7, #28]
 80036e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036e8:	f023 0301 	bic.w	r3, r3, #1
 80036ec:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2110      	movs	r1, #16
 80036f4:	4618      	mov	r0, r3
 80036f6:	f002 f9d5 	bl	8005aa4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036fa:	2300      	movs	r3, #0
 80036fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036fe:	e046      	b.n	800378e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003702:	015a      	lsls	r2, r3, #5
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	4413      	add	r3, r2
 8003708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800370c:	461a      	mov	r2, r3
 800370e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003712:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003716:	015a      	lsls	r2, r3, #5
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	4413      	add	r3, r2
 800371c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003724:	0151      	lsls	r1, r2, #5
 8003726:	69fa      	ldr	r2, [r7, #28]
 8003728:	440a      	add	r2, r1
 800372a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800372e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003732:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003736:	015a      	lsls	r2, r3, #5
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	4413      	add	r3, r2
 800373c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003740:	461a      	mov	r2, r3
 8003742:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003746:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800374a:	015a      	lsls	r2, r3, #5
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	4413      	add	r3, r2
 8003750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003758:	0151      	lsls	r1, r2, #5
 800375a:	69fa      	ldr	r2, [r7, #28]
 800375c:	440a      	add	r2, r1
 800375e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003762:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003766:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	4413      	add	r3, r2
 8003770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003778:	0151      	lsls	r1, r2, #5
 800377a:	69fa      	ldr	r2, [r7, #28]
 800377c:	440a      	add	r2, r1
 800377e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003782:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003786:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378a:	3301      	adds	r3, #1
 800378c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	791b      	ldrb	r3, [r3, #4]
 8003792:	461a      	mov	r2, r3
 8003794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003796:	4293      	cmp	r3, r2
 8003798:	d3b2      	bcc.n	8003700 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	69fa      	ldr	r2, [r7, #28]
 80037a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037a8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80037ac:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	7bdb      	ldrb	r3, [r3, #15]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d016      	beq.n	80037e4 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037c0:	69fa      	ldr	r2, [r7, #28]
 80037c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037c6:	f043 030b 	orr.w	r3, r3, #11
 80037ca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d6:	69fa      	ldr	r2, [r7, #28]
 80037d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037dc:	f043 030b 	orr.w	r3, r3, #11
 80037e0:	6453      	str	r3, [r2, #68]	; 0x44
 80037e2:	e015      	b.n	8003810 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	69fa      	ldr	r2, [r7, #28]
 80037ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037f6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80037fa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	69fa      	ldr	r2, [r7, #28]
 8003806:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800380a:	f043 030b 	orr.w	r3, r3, #11
 800380e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	69fa      	ldr	r2, [r7, #28]
 800381a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800381e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003822:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6818      	ldr	r0, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003832:	461a      	mov	r2, r3
 8003834:	f003 f910 	bl	8006a58 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695a      	ldr	r2, [r3, #20]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003846:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4618      	mov	r0, r3
 800384e:	f003 f83f 	bl	80068d0 <USB_ReadInterrupts>
 8003852:	4603      	mov	r3, r0
 8003854:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003858:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800385c:	d123      	bne.n	80038a6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4618      	mov	r0, r3
 8003864:	f003 f8d5 	bl	8006a12 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f002 f992 	bl	8005b96 <USB_GetDevSpeed>
 8003872:	4603      	mov	r3, r0
 8003874:	461a      	mov	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681c      	ldr	r4, [r3, #0]
 800387e:	f001 f9ef 	bl	8004c60 <HAL_RCC_GetHCLKFreq>
 8003882:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003888:	461a      	mov	r2, r3
 800388a:	4620      	mov	r0, r4
 800388c:	f001 fe96 	bl	80055bc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f005 fa60 	bl	8008d56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	695a      	ldr	r2, [r3, #20]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80038a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f003 f810 	bl	80068d0 <USB_ReadInterrupts>
 80038b0:	4603      	mov	r3, r0
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	2b08      	cmp	r3, #8
 80038b8:	d10a      	bne.n	80038d0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f005 fa3d 	bl	8008d3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695a      	ldr	r2, [r3, #20]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f002 0208 	and.w	r2, r2, #8
 80038ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f002 fffb 	bl	80068d0 <USB_ReadInterrupts>
 80038da:	4603      	mov	r3, r0
 80038dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e0:	2b80      	cmp	r3, #128	; 0x80
 80038e2:	d123      	bne.n	800392c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038f0:	2301      	movs	r3, #1
 80038f2:	627b      	str	r3, [r7, #36]	; 0x24
 80038f4:	e014      	b.n	8003920 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038fa:	4613      	mov	r3, r2
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	4413      	add	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	440b      	add	r3, r1
 8003904:	f203 2357 	addw	r3, r3, #599	; 0x257
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d105      	bne.n	800391a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	b2db      	uxtb	r3, r3
 8003912:	4619      	mov	r1, r3
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 faf0 	bl	8003efa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	3301      	adds	r3, #1
 800391e:	627b      	str	r3, [r7, #36]	; 0x24
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	791b      	ldrb	r3, [r3, #4]
 8003924:	461a      	mov	r2, r3
 8003926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003928:	4293      	cmp	r3, r2
 800392a:	d3e4      	bcc.n	80038f6 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4618      	mov	r0, r3
 8003932:	f002 ffcd 	bl	80068d0 <USB_ReadInterrupts>
 8003936:	4603      	mov	r3, r0
 8003938:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800393c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003940:	d13c      	bne.n	80039bc <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003942:	2301      	movs	r3, #1
 8003944:	627b      	str	r3, [r7, #36]	; 0x24
 8003946:	e02b      	b.n	80039a0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394a:	015a      	lsls	r2, r3, #5
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	4413      	add	r3, r2
 8003950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800395c:	4613      	mov	r3, r2
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	4413      	add	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	3318      	adds	r3, #24
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d115      	bne.n	800399a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800396e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003970:	2b00      	cmp	r3, #0
 8003972:	da12      	bge.n	800399a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003974:	6879      	ldr	r1, [r7, #4]
 8003976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003978:	4613      	mov	r3, r2
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	4413      	add	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	440b      	add	r3, r1
 8003982:	3317      	adds	r3, #23
 8003984:	2201      	movs	r2, #1
 8003986:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	b2db      	uxtb	r3, r3
 800398c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003990:	b2db      	uxtb	r3, r3
 8003992:	4619      	mov	r1, r3
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 fab0 	bl	8003efa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	3301      	adds	r3, #1
 800399e:	627b      	str	r3, [r7, #36]	; 0x24
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	791b      	ldrb	r3, [r3, #4]
 80039a4:	461a      	mov	r2, r3
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d3cd      	bcc.n	8003948 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	695a      	ldr	r2, [r3, #20]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80039ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f002 ff85 	bl	80068d0 <USB_ReadInterrupts>
 80039c6:	4603      	mov	r3, r0
 80039c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039d0:	d156      	bne.n	8003a80 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039d2:	2301      	movs	r3, #1
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24
 80039d6:	e045      	b.n	8003a64 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	015a      	lsls	r2, r3, #5
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	4413      	add	r3, r2
 80039e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80039e8:	6879      	ldr	r1, [r7, #4]
 80039ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ec:	4613      	mov	r3, r2
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	4413      	add	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d12e      	bne.n	8003a5e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a00:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	da2b      	bge.n	8003a5e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8003a12:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d121      	bne.n	8003a5e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a1e:	4613      	mov	r3, r2
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	4413      	add	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	440b      	add	r3, r1
 8003a28:	f203 2357 	addw	r3, r3, #599	; 0x257
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003a30:	6a3b      	ldr	r3, [r7, #32]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d10a      	bne.n	8003a5e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	69fa      	ldr	r2, [r7, #28]
 8003a52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a5a:	6053      	str	r3, [r2, #4]
            break;
 8003a5c:	e008      	b.n	8003a70 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	3301      	adds	r3, #1
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	791b      	ldrb	r3, [r3, #4]
 8003a68:	461a      	mov	r2, r3
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d3b3      	bcc.n	80039d8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	695a      	ldr	r2, [r3, #20]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003a7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f002 ff23 	bl	80068d0 <USB_ReadInterrupts>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a94:	d10a      	bne.n	8003aac <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f005 f9d4 	bl	8008e44 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	695a      	ldr	r2, [r3, #20]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003aaa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f002 ff0d 	bl	80068d0 <USB_ReadInterrupts>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	d115      	bne.n	8003aec <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d002      	beq.n	8003ad8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f005 f9c4 	bl	8008e60 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6859      	ldr	r1, [r3, #4]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	605a      	str	r2, [r3, #4]
 8003ae8:	e000      	b.n	8003aec <HAL_PCD_IRQHandler+0x93c>
      return;
 8003aea:	bf00      	nop
    }
  }
}
 8003aec:	3734      	adds	r7, #52	; 0x34
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd90      	pop	{r4, r7, pc}

08003af2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b082      	sub	sp, #8
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
 8003afa:	460b      	mov	r3, r1
 8003afc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d101      	bne.n	8003b0c <HAL_PCD_SetAddress+0x1a>
 8003b08:	2302      	movs	r3, #2
 8003b0a:	e012      	b.n	8003b32 <HAL_PCD_SetAddress+0x40>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	78fa      	ldrb	r2, [r7, #3]
 8003b18:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	78fa      	ldrb	r2, [r7, #3]
 8003b20:	4611      	mov	r1, r2
 8003b22:	4618      	mov	r0, r3
 8003b24:	f002 fe6c 	bl	8006800 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b084      	sub	sp, #16
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
 8003b42:	4608      	mov	r0, r1
 8003b44:	4611      	mov	r1, r2
 8003b46:	461a      	mov	r2, r3
 8003b48:	4603      	mov	r3, r0
 8003b4a:	70fb      	strb	r3, [r7, #3]
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	803b      	strh	r3, [r7, #0]
 8003b50:	4613      	mov	r3, r2
 8003b52:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003b54:	2300      	movs	r3, #0
 8003b56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	da0f      	bge.n	8003b80 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b60:	78fb      	ldrb	r3, [r7, #3]
 8003b62:	f003 020f 	and.w	r2, r3, #15
 8003b66:	4613      	mov	r3, r2
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	4413      	add	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	3310      	adds	r3, #16
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	4413      	add	r3, r2
 8003b74:	3304      	adds	r3, #4
 8003b76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	705a      	strb	r2, [r3, #1]
 8003b7e:	e00f      	b.n	8003ba0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b80:	78fb      	ldrb	r3, [r7, #3]
 8003b82:	f003 020f 	and.w	r2, r3, #15
 8003b86:	4613      	mov	r3, r2
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	4413      	add	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	4413      	add	r3, r2
 8003b96:	3304      	adds	r3, #4
 8003b98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003ba0:	78fb      	ldrb	r3, [r7, #3]
 8003ba2:	f003 030f 	and.w	r3, r3, #15
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003bac:	883a      	ldrh	r2, [r7, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	78ba      	ldrb	r2, [r7, #2]
 8003bb6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	785b      	ldrb	r3, [r3, #1]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d004      	beq.n	8003bca <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003bca:	78bb      	ldrb	r3, [r7, #2]
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d102      	bne.n	8003bd6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d101      	bne.n	8003be4 <HAL_PCD_EP_Open+0xaa>
 8003be0:	2302      	movs	r3, #2
 8003be2:	e00e      	b.n	8003c02 <HAL_PCD_EP_Open+0xc8>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68f9      	ldr	r1, [r7, #12]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f001 fff4 	bl	8005be0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8003c00:	7afb      	ldrb	r3, [r7, #11]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b084      	sub	sp, #16
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
 8003c12:	460b      	mov	r3, r1
 8003c14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	da0f      	bge.n	8003c3e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c1e:	78fb      	ldrb	r3, [r7, #3]
 8003c20:	f003 020f 	and.w	r2, r3, #15
 8003c24:	4613      	mov	r3, r2
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	4413      	add	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	3310      	adds	r3, #16
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	4413      	add	r3, r2
 8003c32:	3304      	adds	r3, #4
 8003c34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	705a      	strb	r2, [r3, #1]
 8003c3c:	e00f      	b.n	8003c5e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c3e:	78fb      	ldrb	r3, [r7, #3]
 8003c40:	f003 020f 	and.w	r2, r3, #15
 8003c44:	4613      	mov	r3, r2
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	4413      	add	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	4413      	add	r3, r2
 8003c54:	3304      	adds	r3, #4
 8003c56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c5e:	78fb      	ldrb	r3, [r7, #3]
 8003c60:	f003 030f 	and.w	r3, r3, #15
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d101      	bne.n	8003c78 <HAL_PCD_EP_Close+0x6e>
 8003c74:	2302      	movs	r3, #2
 8003c76:	e00e      	b.n	8003c96 <HAL_PCD_EP_Close+0x8c>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68f9      	ldr	r1, [r7, #12]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f002 f832 	bl	8005cf0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b086      	sub	sp, #24
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	60f8      	str	r0, [r7, #12]
 8003ca6:	607a      	str	r2, [r7, #4]
 8003ca8:	603b      	str	r3, [r7, #0]
 8003caa:	460b      	mov	r3, r1
 8003cac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cae:	7afb      	ldrb	r3, [r7, #11]
 8003cb0:	f003 020f 	and.w	r2, r3, #15
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	4413      	add	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ce0:	7afb      	ldrb	r3, [r7, #11]
 8003ce2:	f003 030f 	and.w	r3, r3, #15
 8003ce6:	b2da      	uxtb	r2, r3
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	799b      	ldrb	r3, [r3, #6]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d102      	bne.n	8003cfa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6818      	ldr	r0, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	799b      	ldrb	r3, [r3, #6]
 8003d02:	461a      	mov	r2, r3
 8003d04:	6979      	ldr	r1, [r7, #20]
 8003d06:	f002 f8cf 	bl	8005ea8 <USB_EPStartXfer>

  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	607a      	str	r2, [r7, #4]
 8003d1e:	603b      	str	r3, [r7, #0]
 8003d20:	460b      	mov	r3, r1
 8003d22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d24:	7afb      	ldrb	r3, [r7, #11]
 8003d26:	f003 020f 	and.w	r2, r3, #15
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	4413      	add	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	3310      	adds	r3, #16
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	4413      	add	r3, r2
 8003d38:	3304      	adds	r3, #4
 8003d3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2201      	movs	r2, #1
 8003d52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d54:	7afb      	ldrb	r3, [r7, #11]
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	799b      	ldrb	r3, [r3, #6]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d102      	bne.n	8003d6e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6818      	ldr	r0, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	799b      	ldrb	r3, [r3, #6]
 8003d76:	461a      	mov	r2, r3
 8003d78:	6979      	ldr	r1, [r7, #20]
 8003d7a:	f002 f895 	bl	8005ea8 <USB_EPStartXfer>

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3718      	adds	r7, #24
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	460b      	mov	r3, r1
 8003d92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d94:	78fb      	ldrb	r3, [r7, #3]
 8003d96:	f003 030f 	and.w	r3, r3, #15
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	7912      	ldrb	r2, [r2, #4]
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d901      	bls.n	8003da6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e04f      	b.n	8003e46 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003da6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	da0f      	bge.n	8003dce <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dae:	78fb      	ldrb	r3, [r7, #3]
 8003db0:	f003 020f 	and.w	r2, r3, #15
 8003db4:	4613      	mov	r3, r2
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	4413      	add	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	3310      	adds	r3, #16
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	3304      	adds	r3, #4
 8003dc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	705a      	strb	r2, [r3, #1]
 8003dcc:	e00d      	b.n	8003dea <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003dce:	78fa      	ldrb	r2, [r7, #3]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	4413      	add	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	4413      	add	r3, r2
 8003de0:	3304      	adds	r3, #4
 8003de2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2201      	movs	r2, #1
 8003dee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003df0:	78fb      	ldrb	r3, [r7, #3]
 8003df2:	f003 030f 	and.w	r3, r3, #15
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d101      	bne.n	8003e0a <HAL_PCD_EP_SetStall+0x82>
 8003e06:	2302      	movs	r3, #2
 8003e08:	e01d      	b.n	8003e46 <HAL_PCD_EP_SetStall+0xbe>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68f9      	ldr	r1, [r7, #12]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f002 fc1d 	bl	8006658 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e1e:	78fb      	ldrb	r3, [r7, #3]
 8003e20:	f003 030f 	and.w	r3, r3, #15
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d109      	bne.n	8003e3c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6818      	ldr	r0, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	7999      	ldrb	r1, [r3, #6]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003e36:	461a      	mov	r2, r3
 8003e38:	f002 fe0e 	bl	8006a58 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b084      	sub	sp, #16
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
 8003e56:	460b      	mov	r3, r1
 8003e58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e5a:	78fb      	ldrb	r3, [r7, #3]
 8003e5c:	f003 030f 	and.w	r3, r3, #15
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	7912      	ldrb	r2, [r2, #4]
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d901      	bls.n	8003e6c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e042      	b.n	8003ef2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	da0f      	bge.n	8003e94 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e74:	78fb      	ldrb	r3, [r7, #3]
 8003e76:	f003 020f 	and.w	r2, r3, #15
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	4413      	add	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	3310      	adds	r3, #16
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	4413      	add	r3, r2
 8003e88:	3304      	adds	r3, #4
 8003e8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	705a      	strb	r2, [r3, #1]
 8003e92:	e00f      	b.n	8003eb4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	f003 020f 	and.w	r2, r3, #15
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	3304      	adds	r3, #4
 8003eac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003eba:	78fb      	ldrb	r3, [r7, #3]
 8003ebc:	f003 030f 	and.w	r3, r3, #15
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d101      	bne.n	8003ed4 <HAL_PCD_EP_ClrStall+0x86>
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	e00e      	b.n	8003ef2 <HAL_PCD_EP_ClrStall+0xa4>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68f9      	ldr	r1, [r7, #12]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f002 fc26 	bl	8006734 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b084      	sub	sp, #16
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	460b      	mov	r3, r1
 8003f04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003f06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	da0c      	bge.n	8003f28 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f0e:	78fb      	ldrb	r3, [r7, #3]
 8003f10:	f003 020f 	and.w	r2, r3, #15
 8003f14:	4613      	mov	r3, r2
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	4413      	add	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	3310      	adds	r3, #16
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	4413      	add	r3, r2
 8003f22:	3304      	adds	r3, #4
 8003f24:	60fb      	str	r3, [r7, #12]
 8003f26:	e00c      	b.n	8003f42 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f28:	78fb      	ldrb	r3, [r7, #3]
 8003f2a:	f003 020f 	and.w	r2, r3, #15
 8003f2e:	4613      	mov	r3, r2
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	4413      	add	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	3304      	adds	r3, #4
 8003f40:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68f9      	ldr	r1, [r7, #12]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f002 fa45 	bl	80063d8 <USB_EPStopXfer>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003f52:	7afb      	ldrb	r3, [r7, #11]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08a      	sub	sp, #40	; 0x28
 8003f60:	af02      	add	r7, sp, #8
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	4613      	mov	r3, r2
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	4413      	add	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	3310      	adds	r3, #16
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	4413      	add	r3, r2
 8003f80:	3304      	adds	r3, #4
 8003f82:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	695a      	ldr	r2, [r3, #20]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d901      	bls.n	8003f94 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e06b      	b.n	800406c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	691a      	ldr	r2, [r3, #16]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	69fa      	ldr	r2, [r7, #28]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d902      	bls.n	8003fb0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	3303      	adds	r3, #3
 8003fb4:	089b      	lsrs	r3, r3, #2
 8003fb6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fb8:	e02a      	b.n	8004010 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	691a      	ldr	r2, [r3, #16]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	69fa      	ldr	r2, [r7, #28]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d902      	bls.n	8003fd6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	3303      	adds	r3, #3
 8003fda:	089b      	lsrs	r3, r3, #2
 8003fdc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	68d9      	ldr	r1, [r3, #12]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	6978      	ldr	r0, [r7, #20]
 8003ff4:	f002 fa9a 	bl	800652c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	441a      	add	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	695a      	ldr	r2, [r3, #20]
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	441a      	add	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	4413      	add	r3, r2
 8004018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	429a      	cmp	r2, r3
 8004024:	d809      	bhi.n	800403a <PCD_WriteEmptyTxFifo+0xde>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	695a      	ldr	r2, [r3, #20]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800402e:	429a      	cmp	r2, r3
 8004030:	d203      	bcs.n	800403a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1bf      	bne.n	8003fba <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	691a      	ldr	r2, [r3, #16]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	429a      	cmp	r2, r3
 8004044:	d811      	bhi.n	800406a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	f003 030f 	and.w	r3, r3, #15
 800404c:	2201      	movs	r2, #1
 800404e:	fa02 f303 	lsl.w	r3, r2, r3
 8004052:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800405a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	43db      	mvns	r3, r3
 8004060:	6939      	ldr	r1, [r7, #16]
 8004062:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004066:	4013      	ands	r3, r2
 8004068:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3720      	adds	r7, #32
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b088      	sub	sp, #32
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	333c      	adds	r3, #60	; 0x3c
 800408c:	3304      	adds	r3, #4
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	015a      	lsls	r2, r3, #5
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	4413      	add	r3, r2
 800409a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	799b      	ldrb	r3, [r3, #6]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d17b      	bne.n	80041a2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	f003 0308 	and.w	r3, r3, #8
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d015      	beq.n	80040e0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	4a61      	ldr	r2, [pc, #388]	; (800423c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	f240 80b9 	bls.w	8004230 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 80b3 	beq.w	8004230 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	015a      	lsls	r2, r3, #5
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	4413      	add	r3, r2
 80040d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d6:	461a      	mov	r2, r3
 80040d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040dc:	6093      	str	r3, [r2, #8]
 80040de:	e0a7      	b.n	8004230 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	f003 0320 	and.w	r3, r3, #32
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d009      	beq.n	80040fe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	015a      	lsls	r2, r3, #5
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	4413      	add	r3, r2
 80040f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f6:	461a      	mov	r2, r3
 80040f8:	2320      	movs	r3, #32
 80040fa:	6093      	str	r3, [r2, #8]
 80040fc:	e098      	b.n	8004230 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004104:	2b00      	cmp	r3, #0
 8004106:	f040 8093 	bne.w	8004230 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	4a4b      	ldr	r2, [pc, #300]	; (800423c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d90f      	bls.n	8004132 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00a      	beq.n	8004132 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	015a      	lsls	r2, r3, #5
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	4413      	add	r3, r2
 8004124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004128:	461a      	mov	r2, r3
 800412a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800412e:	6093      	str	r3, [r2, #8]
 8004130:	e07e      	b.n	8004230 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	4613      	mov	r3, r2
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	4413      	add	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	4413      	add	r3, r2
 8004144:	3304      	adds	r3, #4
 8004146:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6a1a      	ldr	r2, [r3, #32]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	0159      	lsls	r1, r3, #5
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	440b      	add	r3, r1
 8004154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800415e:	1ad2      	subs	r2, r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d114      	bne.n	8004194 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d109      	bne.n	8004186 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6818      	ldr	r0, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800417c:	461a      	mov	r2, r3
 800417e:	2101      	movs	r1, #1
 8004180:	f002 fc6a 	bl	8006a58 <USB_EP0_OutStart>
 8004184:	e006      	b.n	8004194 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	68da      	ldr	r2, [r3, #12]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	441a      	add	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	b2db      	uxtb	r3, r3
 8004198:	4619      	mov	r1, r3
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f004 fd98 	bl	8008cd0 <HAL_PCD_DataOutStageCallback>
 80041a0:	e046      	b.n	8004230 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	4a26      	ldr	r2, [pc, #152]	; (8004240 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d124      	bne.n	80041f4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00a      	beq.n	80041ca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c0:	461a      	mov	r2, r3
 80041c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041c6:	6093      	str	r3, [r2, #8]
 80041c8:	e032      	b.n	8004230 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f003 0320 	and.w	r3, r3, #32
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d008      	beq.n	80041e6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	015a      	lsls	r2, r3, #5
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	4413      	add	r3, r2
 80041dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e0:	461a      	mov	r2, r3
 80041e2:	2320      	movs	r3, #32
 80041e4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	4619      	mov	r1, r3
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f004 fd6f 	bl	8008cd0 <HAL_PCD_DataOutStageCallback>
 80041f2:	e01d      	b.n	8004230 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d114      	bne.n	8004224 <PCD_EP_OutXfrComplete_int+0x1b0>
 80041fa:	6879      	ldr	r1, [r7, #4]
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	4613      	mov	r3, r2
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	4413      	add	r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	440b      	add	r3, r1
 8004208:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d108      	bne.n	8004224 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6818      	ldr	r0, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800421c:	461a      	mov	r2, r3
 800421e:	2100      	movs	r1, #0
 8004220:	f002 fc1a 	bl	8006a58 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	b2db      	uxtb	r3, r3
 8004228:	4619      	mov	r1, r3
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f004 fd50 	bl	8008cd0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3720      	adds	r7, #32
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	4f54300a 	.word	0x4f54300a
 8004240:	4f54310a 	.word	0x4f54310a

08004244 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	333c      	adds	r3, #60	; 0x3c
 800425c:	3304      	adds	r3, #4
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	015a      	lsls	r2, r3, #5
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	4413      	add	r3, r2
 800426a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	4a15      	ldr	r2, [pc, #84]	; (80042cc <PCD_EP_OutSetupPacket_int+0x88>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d90e      	bls.n	8004298 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004280:	2b00      	cmp	r3, #0
 8004282:	d009      	beq.n	8004298 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	015a      	lsls	r2, r3, #5
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	4413      	add	r3, r2
 800428c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004290:	461a      	mov	r2, r3
 8004292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004296:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f004 fd07 	bl	8008cac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	4a0a      	ldr	r2, [pc, #40]	; (80042cc <PCD_EP_OutSetupPacket_int+0x88>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d90c      	bls.n	80042c0 <PCD_EP_OutSetupPacket_int+0x7c>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	799b      	ldrb	r3, [r3, #6]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d108      	bne.n	80042c0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6818      	ldr	r0, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80042b8:	461a      	mov	r2, r3
 80042ba:	2101      	movs	r1, #1
 80042bc:	f002 fbcc 	bl	8006a58 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	4f54300a 	.word	0x4f54300a

080042d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	460b      	mov	r3, r1
 80042da:	70fb      	strb	r3, [r7, #3]
 80042dc:	4613      	mov	r3, r2
 80042de:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80042e8:	78fb      	ldrb	r3, [r7, #3]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d107      	bne.n	80042fe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80042ee:	883b      	ldrh	r3, [r7, #0]
 80042f0:	0419      	lsls	r1, r3, #16
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	629a      	str	r2, [r3, #40]	; 0x28
 80042fc:	e028      	b.n	8004350 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004304:	0c1b      	lsrs	r3, r3, #16
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	4413      	add	r3, r2
 800430a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800430c:	2300      	movs	r3, #0
 800430e:	73fb      	strb	r3, [r7, #15]
 8004310:	e00d      	b.n	800432e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	7bfb      	ldrb	r3, [r7, #15]
 8004318:	3340      	adds	r3, #64	; 0x40
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	0c1b      	lsrs	r3, r3, #16
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	4413      	add	r3, r2
 8004326:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004328:	7bfb      	ldrb	r3, [r7, #15]
 800432a:	3301      	adds	r3, #1
 800432c:	73fb      	strb	r3, [r7, #15]
 800432e:	7bfa      	ldrb	r2, [r7, #15]
 8004330:	78fb      	ldrb	r3, [r7, #3]
 8004332:	3b01      	subs	r3, #1
 8004334:	429a      	cmp	r2, r3
 8004336:	d3ec      	bcc.n	8004312 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004338:	883b      	ldrh	r3, [r7, #0]
 800433a:	0418      	lsls	r0, r3, #16
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6819      	ldr	r1, [r3, #0]
 8004340:	78fb      	ldrb	r3, [r7, #3]
 8004342:	3b01      	subs	r3, #1
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	4302      	orrs	r2, r0
 8004348:	3340      	adds	r3, #64	; 0x40
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	440b      	add	r3, r1
 800434e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3714      	adds	r7, #20
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
 8004366:	460b      	mov	r3, r1
 8004368:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	887a      	ldrh	r2, [r7, #2]
 8004370:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	460b      	mov	r3, r1
 800438a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e267      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d075      	beq.n	80044a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043b6:	4b88      	ldr	r3, [pc, #544]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f003 030c 	and.w	r3, r3, #12
 80043be:	2b04      	cmp	r3, #4
 80043c0:	d00c      	beq.n	80043dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043c2:	4b85      	ldr	r3, [pc, #532]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043ca:	2b08      	cmp	r3, #8
 80043cc:	d112      	bne.n	80043f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ce:	4b82      	ldr	r3, [pc, #520]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043da:	d10b      	bne.n	80043f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043dc:	4b7e      	ldr	r3, [pc, #504]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d05b      	beq.n	80044a0 <HAL_RCC_OscConfig+0x108>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d157      	bne.n	80044a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e242      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043fc:	d106      	bne.n	800440c <HAL_RCC_OscConfig+0x74>
 80043fe:	4b76      	ldr	r3, [pc, #472]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a75      	ldr	r2, [pc, #468]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 8004404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	e01d      	b.n	8004448 <HAL_RCC_OscConfig+0xb0>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004414:	d10c      	bne.n	8004430 <HAL_RCC_OscConfig+0x98>
 8004416:	4b70      	ldr	r3, [pc, #448]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a6f      	ldr	r2, [pc, #444]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 800441c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	4b6d      	ldr	r3, [pc, #436]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a6c      	ldr	r2, [pc, #432]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 8004428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800442c:	6013      	str	r3, [r2, #0]
 800442e:	e00b      	b.n	8004448 <HAL_RCC_OscConfig+0xb0>
 8004430:	4b69      	ldr	r3, [pc, #420]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a68      	ldr	r2, [pc, #416]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 8004436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800443a:	6013      	str	r3, [r2, #0]
 800443c:	4b66      	ldr	r3, [pc, #408]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a65      	ldr	r2, [pc, #404]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 8004442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d013      	beq.n	8004478 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004450:	f7fc fd5a 	bl	8000f08 <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004458:	f7fc fd56 	bl	8000f08 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b64      	cmp	r3, #100	; 0x64
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e207      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800446a:	4b5b      	ldr	r3, [pc, #364]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0f0      	beq.n	8004458 <HAL_RCC_OscConfig+0xc0>
 8004476:	e014      	b.n	80044a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004478:	f7fc fd46 	bl	8000f08 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004480:	f7fc fd42 	bl	8000f08 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b64      	cmp	r3, #100	; 0x64
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e1f3      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004492:	4b51      	ldr	r3, [pc, #324]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f0      	bne.n	8004480 <HAL_RCC_OscConfig+0xe8>
 800449e:	e000      	b.n	80044a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d063      	beq.n	8004576 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044ae:	4b4a      	ldr	r3, [pc, #296]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 030c 	and.w	r3, r3, #12
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00b      	beq.n	80044d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044ba:	4b47      	ldr	r3, [pc, #284]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044c2:	2b08      	cmp	r3, #8
 80044c4:	d11c      	bne.n	8004500 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044c6:	4b44      	ldr	r3, [pc, #272]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d116      	bne.n	8004500 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044d2:	4b41      	ldr	r3, [pc, #260]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d005      	beq.n	80044ea <HAL_RCC_OscConfig+0x152>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d001      	beq.n	80044ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e1c7      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ea:	4b3b      	ldr	r3, [pc, #236]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	4937      	ldr	r1, [pc, #220]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044fe:	e03a      	b.n	8004576 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d020      	beq.n	800454a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004508:	4b34      	ldr	r3, [pc, #208]	; (80045dc <HAL_RCC_OscConfig+0x244>)
 800450a:	2201      	movs	r2, #1
 800450c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450e:	f7fc fcfb 	bl	8000f08 <HAL_GetTick>
 8004512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004514:	e008      	b.n	8004528 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004516:	f7fc fcf7 	bl	8000f08 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e1a8      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004528:	4b2b      	ldr	r3, [pc, #172]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0f0      	beq.n	8004516 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004534:	4b28      	ldr	r3, [pc, #160]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	4925      	ldr	r1, [pc, #148]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 8004544:	4313      	orrs	r3, r2
 8004546:	600b      	str	r3, [r1, #0]
 8004548:	e015      	b.n	8004576 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800454a:	4b24      	ldr	r3, [pc, #144]	; (80045dc <HAL_RCC_OscConfig+0x244>)
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004550:	f7fc fcda 	bl	8000f08 <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004558:	f7fc fcd6 	bl	8000f08 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e187      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800456a:	4b1b      	ldr	r3, [pc, #108]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1f0      	bne.n	8004558 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0308 	and.w	r3, r3, #8
 800457e:	2b00      	cmp	r3, #0
 8004580:	d036      	beq.n	80045f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d016      	beq.n	80045b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800458a:	4b15      	ldr	r3, [pc, #84]	; (80045e0 <HAL_RCC_OscConfig+0x248>)
 800458c:	2201      	movs	r2, #1
 800458e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004590:	f7fc fcba 	bl	8000f08 <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004598:	f7fc fcb6 	bl	8000f08 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e167      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045aa:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 80045ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0f0      	beq.n	8004598 <HAL_RCC_OscConfig+0x200>
 80045b6:	e01b      	b.n	80045f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045b8:	4b09      	ldr	r3, [pc, #36]	; (80045e0 <HAL_RCC_OscConfig+0x248>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045be:	f7fc fca3 	bl	8000f08 <HAL_GetTick>
 80045c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045c4:	e00e      	b.n	80045e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045c6:	f7fc fc9f 	bl	8000f08 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d907      	bls.n	80045e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e150      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
 80045d8:	40023800 	.word	0x40023800
 80045dc:	42470000 	.word	0x42470000
 80045e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045e4:	4b88      	ldr	r3, [pc, #544]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 80045e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1ea      	bne.n	80045c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0304 	and.w	r3, r3, #4
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 8097 	beq.w	800472c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045fe:	2300      	movs	r3, #0
 8004600:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004602:	4b81      	ldr	r3, [pc, #516]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10f      	bne.n	800462e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800460e:	2300      	movs	r3, #0
 8004610:	60bb      	str	r3, [r7, #8]
 8004612:	4b7d      	ldr	r3, [pc, #500]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	4a7c      	ldr	r2, [pc, #496]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 8004618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800461c:	6413      	str	r3, [r2, #64]	; 0x40
 800461e:	4b7a      	ldr	r3, [pc, #488]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004626:	60bb      	str	r3, [r7, #8]
 8004628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800462a:	2301      	movs	r3, #1
 800462c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800462e:	4b77      	ldr	r3, [pc, #476]	; (800480c <HAL_RCC_OscConfig+0x474>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004636:	2b00      	cmp	r3, #0
 8004638:	d118      	bne.n	800466c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800463a:	4b74      	ldr	r3, [pc, #464]	; (800480c <HAL_RCC_OscConfig+0x474>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a73      	ldr	r2, [pc, #460]	; (800480c <HAL_RCC_OscConfig+0x474>)
 8004640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004646:	f7fc fc5f 	bl	8000f08 <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800464c:	e008      	b.n	8004660 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800464e:	f7fc fc5b 	bl	8000f08 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e10c      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004660:	4b6a      	ldr	r3, [pc, #424]	; (800480c <HAL_RCC_OscConfig+0x474>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0f0      	beq.n	800464e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d106      	bne.n	8004682 <HAL_RCC_OscConfig+0x2ea>
 8004674:	4b64      	ldr	r3, [pc, #400]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 8004676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004678:	4a63      	ldr	r2, [pc, #396]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 800467a:	f043 0301 	orr.w	r3, r3, #1
 800467e:	6713      	str	r3, [r2, #112]	; 0x70
 8004680:	e01c      	b.n	80046bc <HAL_RCC_OscConfig+0x324>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	2b05      	cmp	r3, #5
 8004688:	d10c      	bne.n	80046a4 <HAL_RCC_OscConfig+0x30c>
 800468a:	4b5f      	ldr	r3, [pc, #380]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 800468c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468e:	4a5e      	ldr	r2, [pc, #376]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 8004690:	f043 0304 	orr.w	r3, r3, #4
 8004694:	6713      	str	r3, [r2, #112]	; 0x70
 8004696:	4b5c      	ldr	r3, [pc, #368]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 8004698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469a:	4a5b      	ldr	r2, [pc, #364]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 800469c:	f043 0301 	orr.w	r3, r3, #1
 80046a0:	6713      	str	r3, [r2, #112]	; 0x70
 80046a2:	e00b      	b.n	80046bc <HAL_RCC_OscConfig+0x324>
 80046a4:	4b58      	ldr	r3, [pc, #352]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 80046a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a8:	4a57      	ldr	r2, [pc, #348]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 80046aa:	f023 0301 	bic.w	r3, r3, #1
 80046ae:	6713      	str	r3, [r2, #112]	; 0x70
 80046b0:	4b55      	ldr	r3, [pc, #340]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 80046b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b4:	4a54      	ldr	r2, [pc, #336]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 80046b6:	f023 0304 	bic.w	r3, r3, #4
 80046ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d015      	beq.n	80046f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c4:	f7fc fc20 	bl	8000f08 <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ca:	e00a      	b.n	80046e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046cc:	f7fc fc1c 	bl	8000f08 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046da:	4293      	cmp	r3, r2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e0cb      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e2:	4b49      	ldr	r3, [pc, #292]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 80046e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0ee      	beq.n	80046cc <HAL_RCC_OscConfig+0x334>
 80046ee:	e014      	b.n	800471a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046f0:	f7fc fc0a 	bl	8000f08 <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046f6:	e00a      	b.n	800470e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046f8:	f7fc fc06 	bl	8000f08 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	f241 3288 	movw	r2, #5000	; 0x1388
 8004706:	4293      	cmp	r3, r2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e0b5      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800470e:	4b3e      	ldr	r3, [pc, #248]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 8004710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1ee      	bne.n	80046f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800471a:	7dfb      	ldrb	r3, [r7, #23]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d105      	bne.n	800472c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004720:	4b39      	ldr	r3, [pc, #228]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 8004722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004724:	4a38      	ldr	r2, [pc, #224]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 8004726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800472a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	2b00      	cmp	r3, #0
 8004732:	f000 80a1 	beq.w	8004878 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004736:	4b34      	ldr	r3, [pc, #208]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 030c 	and.w	r3, r3, #12
 800473e:	2b08      	cmp	r3, #8
 8004740:	d05c      	beq.n	80047fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	2b02      	cmp	r3, #2
 8004748:	d141      	bne.n	80047ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800474a:	4b31      	ldr	r3, [pc, #196]	; (8004810 <HAL_RCC_OscConfig+0x478>)
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004750:	f7fc fbda 	bl	8000f08 <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004758:	f7fc fbd6 	bl	8000f08 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e087      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800476a:	4b27      	ldr	r3, [pc, #156]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1f0      	bne.n	8004758 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	69da      	ldr	r2, [r3, #28]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004784:	019b      	lsls	r3, r3, #6
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478c:	085b      	lsrs	r3, r3, #1
 800478e:	3b01      	subs	r3, #1
 8004790:	041b      	lsls	r3, r3, #16
 8004792:	431a      	orrs	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004798:	061b      	lsls	r3, r3, #24
 800479a:	491b      	ldr	r1, [pc, #108]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 800479c:	4313      	orrs	r3, r2
 800479e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047a0:	4b1b      	ldr	r3, [pc, #108]	; (8004810 <HAL_RCC_OscConfig+0x478>)
 80047a2:	2201      	movs	r2, #1
 80047a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a6:	f7fc fbaf 	bl	8000f08 <HAL_GetTick>
 80047aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ac:	e008      	b.n	80047c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ae:	f7fc fbab 	bl	8000f08 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d901      	bls.n	80047c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e05c      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047c0:	4b11      	ldr	r3, [pc, #68]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d0f0      	beq.n	80047ae <HAL_RCC_OscConfig+0x416>
 80047cc:	e054      	b.n	8004878 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ce:	4b10      	ldr	r3, [pc, #64]	; (8004810 <HAL_RCC_OscConfig+0x478>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d4:	f7fc fb98 	bl	8000f08 <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047dc:	f7fc fb94 	bl	8000f08 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e045      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ee:	4b06      	ldr	r3, [pc, #24]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f0      	bne.n	80047dc <HAL_RCC_OscConfig+0x444>
 80047fa:	e03d      	b.n	8004878 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d107      	bne.n	8004814 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e038      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
 8004808:	40023800 	.word	0x40023800
 800480c:	40007000 	.word	0x40007000
 8004810:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004814:	4b1b      	ldr	r3, [pc, #108]	; (8004884 <HAL_RCC_OscConfig+0x4ec>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d028      	beq.n	8004874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800482c:	429a      	cmp	r2, r3
 800482e:	d121      	bne.n	8004874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800483a:	429a      	cmp	r2, r3
 800483c:	d11a      	bne.n	8004874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004844:	4013      	ands	r3, r2
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800484a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800484c:	4293      	cmp	r3, r2
 800484e:	d111      	bne.n	8004874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485a:	085b      	lsrs	r3, r3, #1
 800485c:	3b01      	subs	r3, #1
 800485e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004860:	429a      	cmp	r2, r3
 8004862:	d107      	bne.n	8004874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004870:	429a      	cmp	r2, r3
 8004872:	d001      	beq.n	8004878 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e000      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3718      	adds	r7, #24
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	40023800 	.word	0x40023800

08004888 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e0cc      	b.n	8004a36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800489c:	4b68      	ldr	r3, [pc, #416]	; (8004a40 <HAL_RCC_ClockConfig+0x1b8>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0307 	and.w	r3, r3, #7
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d90c      	bls.n	80048c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048aa:	4b65      	ldr	r3, [pc, #404]	; (8004a40 <HAL_RCC_ClockConfig+0x1b8>)
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	b2d2      	uxtb	r2, r2
 80048b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b2:	4b63      	ldr	r3, [pc, #396]	; (8004a40 <HAL_RCC_ClockConfig+0x1b8>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0307 	and.w	r3, r3, #7
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d001      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e0b8      	b.n	8004a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d020      	beq.n	8004912 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d005      	beq.n	80048e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048dc:	4b59      	ldr	r3, [pc, #356]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	4a58      	ldr	r2, [pc, #352]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 80048e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0308 	and.w	r3, r3, #8
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d005      	beq.n	8004900 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048f4:	4b53      	ldr	r3, [pc, #332]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	4a52      	ldr	r2, [pc, #328]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004900:	4b50      	ldr	r3, [pc, #320]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	494d      	ldr	r1, [pc, #308]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 800490e:	4313      	orrs	r3, r2
 8004910:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	d044      	beq.n	80049a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d107      	bne.n	8004936 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004926:	4b47      	ldr	r3, [pc, #284]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d119      	bne.n	8004966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e07f      	b.n	8004a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	2b02      	cmp	r3, #2
 800493c:	d003      	beq.n	8004946 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004942:	2b03      	cmp	r3, #3
 8004944:	d107      	bne.n	8004956 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004946:	4b3f      	ldr	r3, [pc, #252]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d109      	bne.n	8004966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e06f      	b.n	8004a36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004956:	4b3b      	ldr	r3, [pc, #236]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e067      	b.n	8004a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004966:	4b37      	ldr	r3, [pc, #220]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f023 0203 	bic.w	r2, r3, #3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	4934      	ldr	r1, [pc, #208]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 8004974:	4313      	orrs	r3, r2
 8004976:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004978:	f7fc fac6 	bl	8000f08 <HAL_GetTick>
 800497c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800497e:	e00a      	b.n	8004996 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004980:	f7fc fac2 	bl	8000f08 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	f241 3288 	movw	r2, #5000	; 0x1388
 800498e:	4293      	cmp	r3, r2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e04f      	b.n	8004a36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004996:	4b2b      	ldr	r3, [pc, #172]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f003 020c 	and.w	r2, r3, #12
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d1eb      	bne.n	8004980 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049a8:	4b25      	ldr	r3, [pc, #148]	; (8004a40 <HAL_RCC_ClockConfig+0x1b8>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0307 	and.w	r3, r3, #7
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d20c      	bcs.n	80049d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049b6:	4b22      	ldr	r3, [pc, #136]	; (8004a40 <HAL_RCC_ClockConfig+0x1b8>)
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049be:	4b20      	ldr	r3, [pc, #128]	; (8004a40 <HAL_RCC_ClockConfig+0x1b8>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0307 	and.w	r3, r3, #7
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d001      	beq.n	80049d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e032      	b.n	8004a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d008      	beq.n	80049ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049dc:	4b19      	ldr	r3, [pc, #100]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	4916      	ldr	r1, [pc, #88]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0308 	and.w	r3, r3, #8
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d009      	beq.n	8004a0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049fa:	4b12      	ldr	r3, [pc, #72]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	00db      	lsls	r3, r3, #3
 8004a08:	490e      	ldr	r1, [pc, #56]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a0e:	f000 f821 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8004a12:	4602      	mov	r2, r0
 8004a14:	4b0b      	ldr	r3, [pc, #44]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	091b      	lsrs	r3, r3, #4
 8004a1a:	f003 030f 	and.w	r3, r3, #15
 8004a1e:	490a      	ldr	r1, [pc, #40]	; (8004a48 <HAL_RCC_ClockConfig+0x1c0>)
 8004a20:	5ccb      	ldrb	r3, [r1, r3]
 8004a22:	fa22 f303 	lsr.w	r3, r2, r3
 8004a26:	4a09      	ldr	r2, [pc, #36]	; (8004a4c <HAL_RCC_ClockConfig+0x1c4>)
 8004a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a2a:	4b09      	ldr	r3, [pc, #36]	; (8004a50 <HAL_RCC_ClockConfig+0x1c8>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fc fa26 	bl	8000e80 <HAL_InitTick>

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	40023c00 	.word	0x40023c00
 8004a44:	40023800 	.word	0x40023800
 8004a48:	080092bc 	.word	0x080092bc
 8004a4c:	20000000 	.word	0x20000000
 8004a50:	20000004 	.word	0x20000004

08004a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a58:	b094      	sub	sp, #80	; 0x50
 8004a5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	647b      	str	r3, [r7, #68]	; 0x44
 8004a60:	2300      	movs	r3, #0
 8004a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a64:	2300      	movs	r3, #0
 8004a66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a6c:	4b79      	ldr	r3, [pc, #484]	; (8004c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f003 030c 	and.w	r3, r3, #12
 8004a74:	2b08      	cmp	r3, #8
 8004a76:	d00d      	beq.n	8004a94 <HAL_RCC_GetSysClockFreq+0x40>
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	f200 80e1 	bhi.w	8004c40 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d002      	beq.n	8004a88 <HAL_RCC_GetSysClockFreq+0x34>
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d003      	beq.n	8004a8e <HAL_RCC_GetSysClockFreq+0x3a>
 8004a86:	e0db      	b.n	8004c40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a88:	4b73      	ldr	r3, [pc, #460]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a8a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004a8c:	e0db      	b.n	8004c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a8e:	4b73      	ldr	r3, [pc, #460]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x208>)
 8004a90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a92:	e0d8      	b.n	8004c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a94:	4b6f      	ldr	r3, [pc, #444]	; (8004c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a9c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a9e:	4b6d      	ldr	r3, [pc, #436]	; (8004c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d063      	beq.n	8004b72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aaa:	4b6a      	ldr	r3, [pc, #424]	; (8004c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	099b      	lsrs	r3, r3, #6
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ab4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004abc:	633b      	str	r3, [r7, #48]	; 0x30
 8004abe:	2300      	movs	r3, #0
 8004ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ac2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ac6:	4622      	mov	r2, r4
 8004ac8:	462b      	mov	r3, r5
 8004aca:	f04f 0000 	mov.w	r0, #0
 8004ace:	f04f 0100 	mov.w	r1, #0
 8004ad2:	0159      	lsls	r1, r3, #5
 8004ad4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ad8:	0150      	lsls	r0, r2, #5
 8004ada:	4602      	mov	r2, r0
 8004adc:	460b      	mov	r3, r1
 8004ade:	4621      	mov	r1, r4
 8004ae0:	1a51      	subs	r1, r2, r1
 8004ae2:	6139      	str	r1, [r7, #16]
 8004ae4:	4629      	mov	r1, r5
 8004ae6:	eb63 0301 	sbc.w	r3, r3, r1
 8004aea:	617b      	str	r3, [r7, #20]
 8004aec:	f04f 0200 	mov.w	r2, #0
 8004af0:	f04f 0300 	mov.w	r3, #0
 8004af4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004af8:	4659      	mov	r1, fp
 8004afa:	018b      	lsls	r3, r1, #6
 8004afc:	4651      	mov	r1, sl
 8004afe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b02:	4651      	mov	r1, sl
 8004b04:	018a      	lsls	r2, r1, #6
 8004b06:	4651      	mov	r1, sl
 8004b08:	ebb2 0801 	subs.w	r8, r2, r1
 8004b0c:	4659      	mov	r1, fp
 8004b0e:	eb63 0901 	sbc.w	r9, r3, r1
 8004b12:	f04f 0200 	mov.w	r2, #0
 8004b16:	f04f 0300 	mov.w	r3, #0
 8004b1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b26:	4690      	mov	r8, r2
 8004b28:	4699      	mov	r9, r3
 8004b2a:	4623      	mov	r3, r4
 8004b2c:	eb18 0303 	adds.w	r3, r8, r3
 8004b30:	60bb      	str	r3, [r7, #8]
 8004b32:	462b      	mov	r3, r5
 8004b34:	eb49 0303 	adc.w	r3, r9, r3
 8004b38:	60fb      	str	r3, [r7, #12]
 8004b3a:	f04f 0200 	mov.w	r2, #0
 8004b3e:	f04f 0300 	mov.w	r3, #0
 8004b42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b46:	4629      	mov	r1, r5
 8004b48:	024b      	lsls	r3, r1, #9
 8004b4a:	4621      	mov	r1, r4
 8004b4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b50:	4621      	mov	r1, r4
 8004b52:	024a      	lsls	r2, r1, #9
 8004b54:	4610      	mov	r0, r2
 8004b56:	4619      	mov	r1, r3
 8004b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b64:	f7fb fb38 	bl	80001d8 <__aeabi_uldivmod>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b70:	e058      	b.n	8004c24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b72:	4b38      	ldr	r3, [pc, #224]	; (8004c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	099b      	lsrs	r3, r3, #6
 8004b78:	2200      	movs	r2, #0
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	4611      	mov	r1, r2
 8004b7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b82:	623b      	str	r3, [r7, #32]
 8004b84:	2300      	movs	r3, #0
 8004b86:	627b      	str	r3, [r7, #36]	; 0x24
 8004b88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b8c:	4642      	mov	r2, r8
 8004b8e:	464b      	mov	r3, r9
 8004b90:	f04f 0000 	mov.w	r0, #0
 8004b94:	f04f 0100 	mov.w	r1, #0
 8004b98:	0159      	lsls	r1, r3, #5
 8004b9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b9e:	0150      	lsls	r0, r2, #5
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	4641      	mov	r1, r8
 8004ba6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004baa:	4649      	mov	r1, r9
 8004bac:	eb63 0b01 	sbc.w	fp, r3, r1
 8004bb0:	f04f 0200 	mov.w	r2, #0
 8004bb4:	f04f 0300 	mov.w	r3, #0
 8004bb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004bbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004bc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004bc4:	ebb2 040a 	subs.w	r4, r2, sl
 8004bc8:	eb63 050b 	sbc.w	r5, r3, fp
 8004bcc:	f04f 0200 	mov.w	r2, #0
 8004bd0:	f04f 0300 	mov.w	r3, #0
 8004bd4:	00eb      	lsls	r3, r5, #3
 8004bd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bda:	00e2      	lsls	r2, r4, #3
 8004bdc:	4614      	mov	r4, r2
 8004bde:	461d      	mov	r5, r3
 8004be0:	4643      	mov	r3, r8
 8004be2:	18e3      	adds	r3, r4, r3
 8004be4:	603b      	str	r3, [r7, #0]
 8004be6:	464b      	mov	r3, r9
 8004be8:	eb45 0303 	adc.w	r3, r5, r3
 8004bec:	607b      	str	r3, [r7, #4]
 8004bee:	f04f 0200 	mov.w	r2, #0
 8004bf2:	f04f 0300 	mov.w	r3, #0
 8004bf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bfa:	4629      	mov	r1, r5
 8004bfc:	028b      	lsls	r3, r1, #10
 8004bfe:	4621      	mov	r1, r4
 8004c00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c04:	4621      	mov	r1, r4
 8004c06:	028a      	lsls	r2, r1, #10
 8004c08:	4610      	mov	r0, r2
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c0e:	2200      	movs	r2, #0
 8004c10:	61bb      	str	r3, [r7, #24]
 8004c12:	61fa      	str	r2, [r7, #28]
 8004c14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c18:	f7fb fade 	bl	80001d8 <__aeabi_uldivmod>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	460b      	mov	r3, r1
 8004c20:	4613      	mov	r3, r2
 8004c22:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c24:	4b0b      	ldr	r3, [pc, #44]	; (8004c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	0c1b      	lsrs	r3, r3, #16
 8004c2a:	f003 0303 	and.w	r3, r3, #3
 8004c2e:	3301      	adds	r3, #1
 8004c30:	005b      	lsls	r3, r3, #1
 8004c32:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004c34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c3e:	e002      	b.n	8004c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c40:	4b05      	ldr	r3, [pc, #20]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3750      	adds	r7, #80	; 0x50
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c52:	bf00      	nop
 8004c54:	40023800 	.word	0x40023800
 8004c58:	00f42400 	.word	0x00f42400
 8004c5c:	007a1200 	.word	0x007a1200

08004c60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c60:	b480      	push	{r7}
 8004c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c64:	4b03      	ldr	r3, [pc, #12]	; (8004c74 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c66:	681b      	ldr	r3, [r3, #0]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	20000000 	.word	0x20000000

08004c78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c7c:	f7ff fff0 	bl	8004c60 <HAL_RCC_GetHCLKFreq>
 8004c80:	4602      	mov	r2, r0
 8004c82:	4b05      	ldr	r3, [pc, #20]	; (8004c98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	0a9b      	lsrs	r3, r3, #10
 8004c88:	f003 0307 	and.w	r3, r3, #7
 8004c8c:	4903      	ldr	r1, [pc, #12]	; (8004c9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c8e:	5ccb      	ldrb	r3, [r1, r3]
 8004c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	40023800 	.word	0x40023800
 8004c9c:	080092cc 	.word	0x080092cc

08004ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ca4:	f7ff ffdc 	bl	8004c60 <HAL_RCC_GetHCLKFreq>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	4b05      	ldr	r3, [pc, #20]	; (8004cc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	0b5b      	lsrs	r3, r3, #13
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	4903      	ldr	r1, [pc, #12]	; (8004cc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cb6:	5ccb      	ldrb	r3, [r1, r3]
 8004cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	40023800 	.word	0x40023800
 8004cc4:	080092cc 	.word	0x080092cc

08004cc8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d105      	bne.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d038      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004cf0:	4b68      	ldr	r3, [pc, #416]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cf6:	f7fc f907 	bl	8000f08 <HAL_GetTick>
 8004cfa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cfc:	e008      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004cfe:	f7fc f903 	bl	8000f08 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d901      	bls.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e0bd      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d10:	4b61      	ldr	r3, [pc, #388]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1f0      	bne.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	019b      	lsls	r3, r3, #6
 8004d26:	431a      	orrs	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	071b      	lsls	r3, r3, #28
 8004d2e:	495a      	ldr	r1, [pc, #360]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d36:	4b57      	ldr	r3, [pc, #348]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d38:	2201      	movs	r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d3c:	f7fc f8e4 	bl	8000f08 <HAL_GetTick>
 8004d40:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d42:	e008      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d44:	f7fc f8e0 	bl	8000f08 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e09a      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d56:	4b50      	ldr	r3, [pc, #320]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0f0      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f000 8083 	beq.w	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d70:	2300      	movs	r3, #0
 8004d72:	60fb      	str	r3, [r7, #12]
 8004d74:	4b48      	ldr	r3, [pc, #288]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d78:	4a47      	ldr	r2, [pc, #284]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d7e:	6413      	str	r3, [r2, #64]	; 0x40
 8004d80:	4b45      	ldr	r3, [pc, #276]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d88:	60fb      	str	r3, [r7, #12]
 8004d8a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d8c:	4b43      	ldr	r3, [pc, #268]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a42      	ldr	r2, [pc, #264]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d96:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d98:	f7fc f8b6 	bl	8000f08 <HAL_GetTick>
 8004d9c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004da0:	f7fc f8b2 	bl	8000f08 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e06c      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004db2:	4b3a      	ldr	r3, [pc, #232]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0f0      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004dbe:	4b36      	ldr	r3, [pc, #216]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dc6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d02f      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d028      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ddc:	4b2e      	ldr	r3, [pc, #184]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004de4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004de6:	4b2e      	ldr	r3, [pc, #184]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004de8:	2201      	movs	r2, #1
 8004dea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dec:	4b2c      	ldr	r3, [pc, #176]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004df2:	4a29      	ldr	r2, [pc, #164]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004df8:	4b27      	ldr	r3, [pc, #156]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfc:	f003 0301 	and.w	r3, r3, #1
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d114      	bne.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004e04:	f7fc f880 	bl	8000f08 <HAL_GetTick>
 8004e08:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e0a:	e00a      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e0c:	f7fc f87c 	bl	8000f08 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e034      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e22:	4b1d      	ldr	r3, [pc, #116]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d0ee      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e3a:	d10d      	bne.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004e3c:	4b16      	ldr	r3, [pc, #88]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e50:	4911      	ldr	r1, [pc, #68]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	608b      	str	r3, [r1, #8]
 8004e56:	e005      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004e58:	4b0f      	ldr	r3, [pc, #60]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	4a0e      	ldr	r2, [pc, #56]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e5e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e62:	6093      	str	r3, [r2, #8]
 8004e64:	4b0c      	ldr	r3, [pc, #48]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e70:	4909      	ldr	r1, [pc, #36]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0308 	and.w	r3, r3, #8
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	7d1a      	ldrb	r2, [r3, #20]
 8004e86:	4b07      	ldr	r3, [pc, #28]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004e88:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3718      	adds	r7, #24
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	42470068 	.word	0x42470068
 8004e98:	40023800 	.word	0x40023800
 8004e9c:	40007000 	.word	0x40007000
 8004ea0:	42470e40 	.word	0x42470e40
 8004ea4:	424711e0 	.word	0x424711e0

08004ea8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b087      	sub	sp, #28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d141      	bne.n	8004f4a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004ec6:	4b25      	ldr	r3, [pc, #148]	; (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ece:	60fb      	str	r3, [r7, #12]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d006      	beq.n	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004edc:	d131      	bne.n	8004f42 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004ede:	4b20      	ldr	r3, [pc, #128]	; (8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004ee0:	617b      	str	r3, [r7, #20]
          break;
 8004ee2:	e031      	b.n	8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ee4:	4b1d      	ldr	r3, [pc, #116]	; (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ef0:	d109      	bne.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004ef2:	4b1a      	ldr	r3, [pc, #104]	; (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004efc:	4a19      	ldr	r2, [pc, #100]	; (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f02:	613b      	str	r3, [r7, #16]
 8004f04:	e008      	b.n	8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004f06:	4b15      	ldr	r3, [pc, #84]	; (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f10:	4a15      	ldr	r2, [pc, #84]	; (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f16:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004f18:	4b10      	ldr	r3, [pc, #64]	; (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f1e:	099b      	lsrs	r3, r3, #6
 8004f20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	fb02 f303 	mul.w	r3, r2, r3
 8004f2a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004f2c:	4b0b      	ldr	r3, [pc, #44]	; (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f32:	0f1b      	lsrs	r3, r3, #28
 8004f34:	f003 0307 	and.w	r3, r3, #7
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f3e:	617b      	str	r3, [r7, #20]
          break;
 8004f40:	e002      	b.n	8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	617b      	str	r3, [r7, #20]
          break;
 8004f46:	bf00      	nop
        }
      }
      break;
 8004f48:	e000      	b.n	8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
  default:
    {
       break;
 8004f4a:	bf00      	nop
    }
  }
  return frequency;
 8004f4c:	697b      	ldr	r3, [r7, #20]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	371c      	adds	r7, #28
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	40023800 	.word	0x40023800
 8004f60:	00bb8000 	.word	0x00bb8000
 8004f64:	007a1200 	.word	0x007a1200
 8004f68:	00f42400 	.word	0x00f42400

08004f6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e042      	b.n	8005004 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d106      	bne.n	8004f98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7fb fe86 	bl	8000ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2224      	movs	r2, #36	; 0x24
 8004f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68da      	ldr	r2, [r3, #12]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f82b 	bl	800500c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	691a      	ldr	r2, [r3, #16]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	695a      	ldr	r2, [r3, #20]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68da      	ldr	r2, [r3, #12]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fe4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3708      	adds	r7, #8
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800500c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005010:	b0c0      	sub	sp, #256	; 0x100
 8005012:	af00      	add	r7, sp, #0
 8005014:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005028:	68d9      	ldr	r1, [r3, #12]
 800502a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	ea40 0301 	orr.w	r3, r0, r1
 8005034:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800503a:	689a      	ldr	r2, [r3, #8]
 800503c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	431a      	orrs	r2, r3
 8005044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	431a      	orrs	r2, r3
 800504c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005050:	69db      	ldr	r3, [r3, #28]
 8005052:	4313      	orrs	r3, r2
 8005054:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005064:	f021 010c 	bic.w	r1, r1, #12
 8005068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005072:	430b      	orrs	r3, r1
 8005074:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005086:	6999      	ldr	r1, [r3, #24]
 8005088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	ea40 0301 	orr.w	r3, r0, r1
 8005092:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	4b8f      	ldr	r3, [pc, #572]	; (80052d8 <UART_SetConfig+0x2cc>)
 800509c:	429a      	cmp	r2, r3
 800509e:	d005      	beq.n	80050ac <UART_SetConfig+0xa0>
 80050a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	4b8d      	ldr	r3, [pc, #564]	; (80052dc <UART_SetConfig+0x2d0>)
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d104      	bne.n	80050b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050ac:	f7ff fdf8 	bl	8004ca0 <HAL_RCC_GetPCLK2Freq>
 80050b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80050b4:	e003      	b.n	80050be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050b6:	f7ff fddf 	bl	8004c78 <HAL_RCC_GetPCLK1Freq>
 80050ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c2:	69db      	ldr	r3, [r3, #28]
 80050c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050c8:	f040 810c 	bne.w	80052e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050d0:	2200      	movs	r2, #0
 80050d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80050da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80050de:	4622      	mov	r2, r4
 80050e0:	462b      	mov	r3, r5
 80050e2:	1891      	adds	r1, r2, r2
 80050e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80050e6:	415b      	adcs	r3, r3
 80050e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80050ee:	4621      	mov	r1, r4
 80050f0:	eb12 0801 	adds.w	r8, r2, r1
 80050f4:	4629      	mov	r1, r5
 80050f6:	eb43 0901 	adc.w	r9, r3, r1
 80050fa:	f04f 0200 	mov.w	r2, #0
 80050fe:	f04f 0300 	mov.w	r3, #0
 8005102:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005106:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800510a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800510e:	4690      	mov	r8, r2
 8005110:	4699      	mov	r9, r3
 8005112:	4623      	mov	r3, r4
 8005114:	eb18 0303 	adds.w	r3, r8, r3
 8005118:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800511c:	462b      	mov	r3, r5
 800511e:	eb49 0303 	adc.w	r3, r9, r3
 8005122:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005132:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005136:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800513a:	460b      	mov	r3, r1
 800513c:	18db      	adds	r3, r3, r3
 800513e:	653b      	str	r3, [r7, #80]	; 0x50
 8005140:	4613      	mov	r3, r2
 8005142:	eb42 0303 	adc.w	r3, r2, r3
 8005146:	657b      	str	r3, [r7, #84]	; 0x54
 8005148:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800514c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005150:	f7fb f842 	bl	80001d8 <__aeabi_uldivmod>
 8005154:	4602      	mov	r2, r0
 8005156:	460b      	mov	r3, r1
 8005158:	4b61      	ldr	r3, [pc, #388]	; (80052e0 <UART_SetConfig+0x2d4>)
 800515a:	fba3 2302 	umull	r2, r3, r3, r2
 800515e:	095b      	lsrs	r3, r3, #5
 8005160:	011c      	lsls	r4, r3, #4
 8005162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005166:	2200      	movs	r2, #0
 8005168:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800516c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005170:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005174:	4642      	mov	r2, r8
 8005176:	464b      	mov	r3, r9
 8005178:	1891      	adds	r1, r2, r2
 800517a:	64b9      	str	r1, [r7, #72]	; 0x48
 800517c:	415b      	adcs	r3, r3
 800517e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005180:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005184:	4641      	mov	r1, r8
 8005186:	eb12 0a01 	adds.w	sl, r2, r1
 800518a:	4649      	mov	r1, r9
 800518c:	eb43 0b01 	adc.w	fp, r3, r1
 8005190:	f04f 0200 	mov.w	r2, #0
 8005194:	f04f 0300 	mov.w	r3, #0
 8005198:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800519c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051a4:	4692      	mov	sl, r2
 80051a6:	469b      	mov	fp, r3
 80051a8:	4643      	mov	r3, r8
 80051aa:	eb1a 0303 	adds.w	r3, sl, r3
 80051ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051b2:	464b      	mov	r3, r9
 80051b4:	eb4b 0303 	adc.w	r3, fp, r3
 80051b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80051bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80051cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80051d0:	460b      	mov	r3, r1
 80051d2:	18db      	adds	r3, r3, r3
 80051d4:	643b      	str	r3, [r7, #64]	; 0x40
 80051d6:	4613      	mov	r3, r2
 80051d8:	eb42 0303 	adc.w	r3, r2, r3
 80051dc:	647b      	str	r3, [r7, #68]	; 0x44
 80051de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80051e6:	f7fa fff7 	bl	80001d8 <__aeabi_uldivmod>
 80051ea:	4602      	mov	r2, r0
 80051ec:	460b      	mov	r3, r1
 80051ee:	4611      	mov	r1, r2
 80051f0:	4b3b      	ldr	r3, [pc, #236]	; (80052e0 <UART_SetConfig+0x2d4>)
 80051f2:	fba3 2301 	umull	r2, r3, r3, r1
 80051f6:	095b      	lsrs	r3, r3, #5
 80051f8:	2264      	movs	r2, #100	; 0x64
 80051fa:	fb02 f303 	mul.w	r3, r2, r3
 80051fe:	1acb      	subs	r3, r1, r3
 8005200:	00db      	lsls	r3, r3, #3
 8005202:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005206:	4b36      	ldr	r3, [pc, #216]	; (80052e0 <UART_SetConfig+0x2d4>)
 8005208:	fba3 2302 	umull	r2, r3, r3, r2
 800520c:	095b      	lsrs	r3, r3, #5
 800520e:	005b      	lsls	r3, r3, #1
 8005210:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005214:	441c      	add	r4, r3
 8005216:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800521a:	2200      	movs	r2, #0
 800521c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005220:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005224:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005228:	4642      	mov	r2, r8
 800522a:	464b      	mov	r3, r9
 800522c:	1891      	adds	r1, r2, r2
 800522e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005230:	415b      	adcs	r3, r3
 8005232:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005234:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005238:	4641      	mov	r1, r8
 800523a:	1851      	adds	r1, r2, r1
 800523c:	6339      	str	r1, [r7, #48]	; 0x30
 800523e:	4649      	mov	r1, r9
 8005240:	414b      	adcs	r3, r1
 8005242:	637b      	str	r3, [r7, #52]	; 0x34
 8005244:	f04f 0200 	mov.w	r2, #0
 8005248:	f04f 0300 	mov.w	r3, #0
 800524c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005250:	4659      	mov	r1, fp
 8005252:	00cb      	lsls	r3, r1, #3
 8005254:	4651      	mov	r1, sl
 8005256:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800525a:	4651      	mov	r1, sl
 800525c:	00ca      	lsls	r2, r1, #3
 800525e:	4610      	mov	r0, r2
 8005260:	4619      	mov	r1, r3
 8005262:	4603      	mov	r3, r0
 8005264:	4642      	mov	r2, r8
 8005266:	189b      	adds	r3, r3, r2
 8005268:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800526c:	464b      	mov	r3, r9
 800526e:	460a      	mov	r2, r1
 8005270:	eb42 0303 	adc.w	r3, r2, r3
 8005274:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005284:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005288:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800528c:	460b      	mov	r3, r1
 800528e:	18db      	adds	r3, r3, r3
 8005290:	62bb      	str	r3, [r7, #40]	; 0x28
 8005292:	4613      	mov	r3, r2
 8005294:	eb42 0303 	adc.w	r3, r2, r3
 8005298:	62fb      	str	r3, [r7, #44]	; 0x2c
 800529a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800529e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80052a2:	f7fa ff99 	bl	80001d8 <__aeabi_uldivmod>
 80052a6:	4602      	mov	r2, r0
 80052a8:	460b      	mov	r3, r1
 80052aa:	4b0d      	ldr	r3, [pc, #52]	; (80052e0 <UART_SetConfig+0x2d4>)
 80052ac:	fba3 1302 	umull	r1, r3, r3, r2
 80052b0:	095b      	lsrs	r3, r3, #5
 80052b2:	2164      	movs	r1, #100	; 0x64
 80052b4:	fb01 f303 	mul.w	r3, r1, r3
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	00db      	lsls	r3, r3, #3
 80052bc:	3332      	adds	r3, #50	; 0x32
 80052be:	4a08      	ldr	r2, [pc, #32]	; (80052e0 <UART_SetConfig+0x2d4>)
 80052c0:	fba2 2303 	umull	r2, r3, r2, r3
 80052c4:	095b      	lsrs	r3, r3, #5
 80052c6:	f003 0207 	and.w	r2, r3, #7
 80052ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4422      	add	r2, r4
 80052d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052d4:	e106      	b.n	80054e4 <UART_SetConfig+0x4d8>
 80052d6:	bf00      	nop
 80052d8:	40011000 	.word	0x40011000
 80052dc:	40011400 	.word	0x40011400
 80052e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052e8:	2200      	movs	r2, #0
 80052ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80052ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80052f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80052f6:	4642      	mov	r2, r8
 80052f8:	464b      	mov	r3, r9
 80052fa:	1891      	adds	r1, r2, r2
 80052fc:	6239      	str	r1, [r7, #32]
 80052fe:	415b      	adcs	r3, r3
 8005300:	627b      	str	r3, [r7, #36]	; 0x24
 8005302:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005306:	4641      	mov	r1, r8
 8005308:	1854      	adds	r4, r2, r1
 800530a:	4649      	mov	r1, r9
 800530c:	eb43 0501 	adc.w	r5, r3, r1
 8005310:	f04f 0200 	mov.w	r2, #0
 8005314:	f04f 0300 	mov.w	r3, #0
 8005318:	00eb      	lsls	r3, r5, #3
 800531a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800531e:	00e2      	lsls	r2, r4, #3
 8005320:	4614      	mov	r4, r2
 8005322:	461d      	mov	r5, r3
 8005324:	4643      	mov	r3, r8
 8005326:	18e3      	adds	r3, r4, r3
 8005328:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800532c:	464b      	mov	r3, r9
 800532e:	eb45 0303 	adc.w	r3, r5, r3
 8005332:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005342:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005346:	f04f 0200 	mov.w	r2, #0
 800534a:	f04f 0300 	mov.w	r3, #0
 800534e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005352:	4629      	mov	r1, r5
 8005354:	008b      	lsls	r3, r1, #2
 8005356:	4621      	mov	r1, r4
 8005358:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800535c:	4621      	mov	r1, r4
 800535e:	008a      	lsls	r2, r1, #2
 8005360:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005364:	f7fa ff38 	bl	80001d8 <__aeabi_uldivmod>
 8005368:	4602      	mov	r2, r0
 800536a:	460b      	mov	r3, r1
 800536c:	4b60      	ldr	r3, [pc, #384]	; (80054f0 <UART_SetConfig+0x4e4>)
 800536e:	fba3 2302 	umull	r2, r3, r3, r2
 8005372:	095b      	lsrs	r3, r3, #5
 8005374:	011c      	lsls	r4, r3, #4
 8005376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800537a:	2200      	movs	r2, #0
 800537c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005380:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005384:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005388:	4642      	mov	r2, r8
 800538a:	464b      	mov	r3, r9
 800538c:	1891      	adds	r1, r2, r2
 800538e:	61b9      	str	r1, [r7, #24]
 8005390:	415b      	adcs	r3, r3
 8005392:	61fb      	str	r3, [r7, #28]
 8005394:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005398:	4641      	mov	r1, r8
 800539a:	1851      	adds	r1, r2, r1
 800539c:	6139      	str	r1, [r7, #16]
 800539e:	4649      	mov	r1, r9
 80053a0:	414b      	adcs	r3, r1
 80053a2:	617b      	str	r3, [r7, #20]
 80053a4:	f04f 0200 	mov.w	r2, #0
 80053a8:	f04f 0300 	mov.w	r3, #0
 80053ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053b0:	4659      	mov	r1, fp
 80053b2:	00cb      	lsls	r3, r1, #3
 80053b4:	4651      	mov	r1, sl
 80053b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053ba:	4651      	mov	r1, sl
 80053bc:	00ca      	lsls	r2, r1, #3
 80053be:	4610      	mov	r0, r2
 80053c0:	4619      	mov	r1, r3
 80053c2:	4603      	mov	r3, r0
 80053c4:	4642      	mov	r2, r8
 80053c6:	189b      	adds	r3, r3, r2
 80053c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053cc:	464b      	mov	r3, r9
 80053ce:	460a      	mov	r2, r1
 80053d0:	eb42 0303 	adc.w	r3, r2, r3
 80053d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80053e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80053e4:	f04f 0200 	mov.w	r2, #0
 80053e8:	f04f 0300 	mov.w	r3, #0
 80053ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80053f0:	4649      	mov	r1, r9
 80053f2:	008b      	lsls	r3, r1, #2
 80053f4:	4641      	mov	r1, r8
 80053f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053fa:	4641      	mov	r1, r8
 80053fc:	008a      	lsls	r2, r1, #2
 80053fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005402:	f7fa fee9 	bl	80001d8 <__aeabi_uldivmod>
 8005406:	4602      	mov	r2, r0
 8005408:	460b      	mov	r3, r1
 800540a:	4611      	mov	r1, r2
 800540c:	4b38      	ldr	r3, [pc, #224]	; (80054f0 <UART_SetConfig+0x4e4>)
 800540e:	fba3 2301 	umull	r2, r3, r3, r1
 8005412:	095b      	lsrs	r3, r3, #5
 8005414:	2264      	movs	r2, #100	; 0x64
 8005416:	fb02 f303 	mul.w	r3, r2, r3
 800541a:	1acb      	subs	r3, r1, r3
 800541c:	011b      	lsls	r3, r3, #4
 800541e:	3332      	adds	r3, #50	; 0x32
 8005420:	4a33      	ldr	r2, [pc, #204]	; (80054f0 <UART_SetConfig+0x4e4>)
 8005422:	fba2 2303 	umull	r2, r3, r2, r3
 8005426:	095b      	lsrs	r3, r3, #5
 8005428:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800542c:	441c      	add	r4, r3
 800542e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005432:	2200      	movs	r2, #0
 8005434:	673b      	str	r3, [r7, #112]	; 0x70
 8005436:	677a      	str	r2, [r7, #116]	; 0x74
 8005438:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800543c:	4642      	mov	r2, r8
 800543e:	464b      	mov	r3, r9
 8005440:	1891      	adds	r1, r2, r2
 8005442:	60b9      	str	r1, [r7, #8]
 8005444:	415b      	adcs	r3, r3
 8005446:	60fb      	str	r3, [r7, #12]
 8005448:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800544c:	4641      	mov	r1, r8
 800544e:	1851      	adds	r1, r2, r1
 8005450:	6039      	str	r1, [r7, #0]
 8005452:	4649      	mov	r1, r9
 8005454:	414b      	adcs	r3, r1
 8005456:	607b      	str	r3, [r7, #4]
 8005458:	f04f 0200 	mov.w	r2, #0
 800545c:	f04f 0300 	mov.w	r3, #0
 8005460:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005464:	4659      	mov	r1, fp
 8005466:	00cb      	lsls	r3, r1, #3
 8005468:	4651      	mov	r1, sl
 800546a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800546e:	4651      	mov	r1, sl
 8005470:	00ca      	lsls	r2, r1, #3
 8005472:	4610      	mov	r0, r2
 8005474:	4619      	mov	r1, r3
 8005476:	4603      	mov	r3, r0
 8005478:	4642      	mov	r2, r8
 800547a:	189b      	adds	r3, r3, r2
 800547c:	66bb      	str	r3, [r7, #104]	; 0x68
 800547e:	464b      	mov	r3, r9
 8005480:	460a      	mov	r2, r1
 8005482:	eb42 0303 	adc.w	r3, r2, r3
 8005486:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	663b      	str	r3, [r7, #96]	; 0x60
 8005492:	667a      	str	r2, [r7, #100]	; 0x64
 8005494:	f04f 0200 	mov.w	r2, #0
 8005498:	f04f 0300 	mov.w	r3, #0
 800549c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80054a0:	4649      	mov	r1, r9
 80054a2:	008b      	lsls	r3, r1, #2
 80054a4:	4641      	mov	r1, r8
 80054a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054aa:	4641      	mov	r1, r8
 80054ac:	008a      	lsls	r2, r1, #2
 80054ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80054b2:	f7fa fe91 	bl	80001d8 <__aeabi_uldivmod>
 80054b6:	4602      	mov	r2, r0
 80054b8:	460b      	mov	r3, r1
 80054ba:	4b0d      	ldr	r3, [pc, #52]	; (80054f0 <UART_SetConfig+0x4e4>)
 80054bc:	fba3 1302 	umull	r1, r3, r3, r2
 80054c0:	095b      	lsrs	r3, r3, #5
 80054c2:	2164      	movs	r1, #100	; 0x64
 80054c4:	fb01 f303 	mul.w	r3, r1, r3
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	011b      	lsls	r3, r3, #4
 80054cc:	3332      	adds	r3, #50	; 0x32
 80054ce:	4a08      	ldr	r2, [pc, #32]	; (80054f0 <UART_SetConfig+0x4e4>)
 80054d0:	fba2 2303 	umull	r2, r3, r2, r3
 80054d4:	095b      	lsrs	r3, r3, #5
 80054d6:	f003 020f 	and.w	r2, r3, #15
 80054da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4422      	add	r2, r4
 80054e2:	609a      	str	r2, [r3, #8]
}
 80054e4:	bf00      	nop
 80054e6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80054ea:	46bd      	mov	sp, r7
 80054ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054f0:	51eb851f 	.word	0x51eb851f

080054f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054f4:	b084      	sub	sp, #16
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b084      	sub	sp, #16
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
 80054fe:	f107 001c 	add.w	r0, r7, #28
 8005502:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005506:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800550a:	2b01      	cmp	r3, #1
 800550c:	d123      	bne.n	8005556 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005512:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005522:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005536:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800553a:	2b01      	cmp	r3, #1
 800553c:	d105      	bne.n	800554a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f001 fae2 	bl	8006b14 <USB_CoreReset>
 8005550:	4603      	mov	r3, r0
 8005552:	73fb      	strb	r3, [r7, #15]
 8005554:	e01b      	b.n	800558e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f001 fad6 	bl	8006b14 <USB_CoreReset>
 8005568:	4603      	mov	r3, r0
 800556a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800556c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005570:	2b00      	cmp	r3, #0
 8005572:	d106      	bne.n	8005582 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005578:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	639a      	str	r2, [r3, #56]	; 0x38
 8005580:	e005      	b.n	800558e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005586:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800558e:	7fbb      	ldrb	r3, [r7, #30]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d10b      	bne.n	80055ac <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f043 0206 	orr.w	r2, r3, #6
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f043 0220 	orr.w	r2, r3, #32
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80055ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055b8:	b004      	add	sp, #16
 80055ba:	4770      	bx	lr

080055bc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80055bc:	b480      	push	{r7}
 80055be:	b087      	sub	sp, #28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	4613      	mov	r3, r2
 80055c8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80055ca:	79fb      	ldrb	r3, [r7, #7]
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d165      	bne.n	800569c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	4a41      	ldr	r2, [pc, #260]	; (80056d8 <USB_SetTurnaroundTime+0x11c>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d906      	bls.n	80055e6 <USB_SetTurnaroundTime+0x2a>
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	4a40      	ldr	r2, [pc, #256]	; (80056dc <USB_SetTurnaroundTime+0x120>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d202      	bcs.n	80055e6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80055e0:	230f      	movs	r3, #15
 80055e2:	617b      	str	r3, [r7, #20]
 80055e4:	e062      	b.n	80056ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	4a3c      	ldr	r2, [pc, #240]	; (80056dc <USB_SetTurnaroundTime+0x120>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d306      	bcc.n	80055fc <USB_SetTurnaroundTime+0x40>
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	4a3b      	ldr	r2, [pc, #236]	; (80056e0 <USB_SetTurnaroundTime+0x124>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d202      	bcs.n	80055fc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80055f6:	230e      	movs	r3, #14
 80055f8:	617b      	str	r3, [r7, #20]
 80055fa:	e057      	b.n	80056ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	4a38      	ldr	r2, [pc, #224]	; (80056e0 <USB_SetTurnaroundTime+0x124>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d306      	bcc.n	8005612 <USB_SetTurnaroundTime+0x56>
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	4a37      	ldr	r2, [pc, #220]	; (80056e4 <USB_SetTurnaroundTime+0x128>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d202      	bcs.n	8005612 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800560c:	230d      	movs	r3, #13
 800560e:	617b      	str	r3, [r7, #20]
 8005610:	e04c      	b.n	80056ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	4a33      	ldr	r2, [pc, #204]	; (80056e4 <USB_SetTurnaroundTime+0x128>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d306      	bcc.n	8005628 <USB_SetTurnaroundTime+0x6c>
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	4a32      	ldr	r2, [pc, #200]	; (80056e8 <USB_SetTurnaroundTime+0x12c>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d802      	bhi.n	8005628 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005622:	230c      	movs	r3, #12
 8005624:	617b      	str	r3, [r7, #20]
 8005626:	e041      	b.n	80056ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	4a2f      	ldr	r2, [pc, #188]	; (80056e8 <USB_SetTurnaroundTime+0x12c>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d906      	bls.n	800563e <USB_SetTurnaroundTime+0x82>
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	4a2e      	ldr	r2, [pc, #184]	; (80056ec <USB_SetTurnaroundTime+0x130>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d802      	bhi.n	800563e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005638:	230b      	movs	r3, #11
 800563a:	617b      	str	r3, [r7, #20]
 800563c:	e036      	b.n	80056ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	4a2a      	ldr	r2, [pc, #168]	; (80056ec <USB_SetTurnaroundTime+0x130>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d906      	bls.n	8005654 <USB_SetTurnaroundTime+0x98>
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	4a29      	ldr	r2, [pc, #164]	; (80056f0 <USB_SetTurnaroundTime+0x134>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d802      	bhi.n	8005654 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800564e:	230a      	movs	r3, #10
 8005650:	617b      	str	r3, [r7, #20]
 8005652:	e02b      	b.n	80056ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	4a26      	ldr	r2, [pc, #152]	; (80056f0 <USB_SetTurnaroundTime+0x134>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d906      	bls.n	800566a <USB_SetTurnaroundTime+0xae>
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	4a25      	ldr	r2, [pc, #148]	; (80056f4 <USB_SetTurnaroundTime+0x138>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d202      	bcs.n	800566a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005664:	2309      	movs	r3, #9
 8005666:	617b      	str	r3, [r7, #20]
 8005668:	e020      	b.n	80056ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	4a21      	ldr	r2, [pc, #132]	; (80056f4 <USB_SetTurnaroundTime+0x138>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d306      	bcc.n	8005680 <USB_SetTurnaroundTime+0xc4>
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	4a20      	ldr	r2, [pc, #128]	; (80056f8 <USB_SetTurnaroundTime+0x13c>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d802      	bhi.n	8005680 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800567a:	2308      	movs	r3, #8
 800567c:	617b      	str	r3, [r7, #20]
 800567e:	e015      	b.n	80056ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	4a1d      	ldr	r2, [pc, #116]	; (80056f8 <USB_SetTurnaroundTime+0x13c>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d906      	bls.n	8005696 <USB_SetTurnaroundTime+0xda>
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	4a1c      	ldr	r2, [pc, #112]	; (80056fc <USB_SetTurnaroundTime+0x140>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d202      	bcs.n	8005696 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005690:	2307      	movs	r3, #7
 8005692:	617b      	str	r3, [r7, #20]
 8005694:	e00a      	b.n	80056ac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005696:	2306      	movs	r3, #6
 8005698:	617b      	str	r3, [r7, #20]
 800569a:	e007      	b.n	80056ac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800569c:	79fb      	ldrb	r3, [r7, #7]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d102      	bne.n	80056a8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80056a2:	2309      	movs	r3, #9
 80056a4:	617b      	str	r3, [r7, #20]
 80056a6:	e001      	b.n	80056ac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80056a8:	2309      	movs	r3, #9
 80056aa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	68da      	ldr	r2, [r3, #12]
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	029b      	lsls	r3, r3, #10
 80056c0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80056c4:	431a      	orrs	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	371c      	adds	r7, #28
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr
 80056d8:	00d8acbf 	.word	0x00d8acbf
 80056dc:	00e4e1c0 	.word	0x00e4e1c0
 80056e0:	00f42400 	.word	0x00f42400
 80056e4:	01067380 	.word	0x01067380
 80056e8:	011a499f 	.word	0x011a499f
 80056ec:	01312cff 	.word	0x01312cff
 80056f0:	014ca43f 	.word	0x014ca43f
 80056f4:	016e3600 	.word	0x016e3600
 80056f8:	01a6ab1f 	.word	0x01a6ab1f
 80056fc:	01e84800 	.word	0x01e84800

08005700 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f043 0201 	orr.w	r2, r3, #1
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005722:	b480      	push	{r7}
 8005724:	b083      	sub	sp, #12
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f023 0201 	bic.w	r2, r3, #1
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	460b      	mov	r3, r1
 800574e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005750:	2300      	movs	r3, #0
 8005752:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005760:	78fb      	ldrb	r3, [r7, #3]
 8005762:	2b01      	cmp	r3, #1
 8005764:	d115      	bne.n	8005792 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005772:	200a      	movs	r0, #10
 8005774:	f7fb fbd4 	bl	8000f20 <HAL_Delay>
      ms += 10U;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	330a      	adds	r3, #10
 800577c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f001 f939 	bl	80069f6 <USB_GetMode>
 8005784:	4603      	mov	r3, r0
 8005786:	2b01      	cmp	r3, #1
 8005788:	d01e      	beq.n	80057c8 <USB_SetCurrentMode+0x84>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2bc7      	cmp	r3, #199	; 0xc7
 800578e:	d9f0      	bls.n	8005772 <USB_SetCurrentMode+0x2e>
 8005790:	e01a      	b.n	80057c8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005792:	78fb      	ldrb	r3, [r7, #3]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d115      	bne.n	80057c4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80057a4:	200a      	movs	r0, #10
 80057a6:	f7fb fbbb 	bl	8000f20 <HAL_Delay>
      ms += 10U;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	330a      	adds	r3, #10
 80057ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f001 f920 	bl	80069f6 <USB_GetMode>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d005      	beq.n	80057c8 <USB_SetCurrentMode+0x84>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2bc7      	cmp	r3, #199	; 0xc7
 80057c0:	d9f0      	bls.n	80057a4 <USB_SetCurrentMode+0x60>
 80057c2:	e001      	b.n	80057c8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e005      	b.n	80057d4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2bc8      	cmp	r3, #200	; 0xc8
 80057cc:	d101      	bne.n	80057d2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e000      	b.n	80057d4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057dc:	b084      	sub	sp, #16
 80057de:	b580      	push	{r7, lr}
 80057e0:	b086      	sub	sp, #24
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80057ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80057ee:	2300      	movs	r3, #0
 80057f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80057f6:	2300      	movs	r3, #0
 80057f8:	613b      	str	r3, [r7, #16]
 80057fa:	e009      	b.n	8005810 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	3340      	adds	r3, #64	; 0x40
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4413      	add	r3, r2
 8005806:	2200      	movs	r2, #0
 8005808:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	3301      	adds	r3, #1
 800580e:	613b      	str	r3, [r7, #16]
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	2b0e      	cmp	r3, #14
 8005814:	d9f2      	bls.n	80057fc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005816:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800581a:	2b00      	cmp	r3, #0
 800581c:	d11c      	bne.n	8005858 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800582c:	f043 0302 	orr.w	r3, r3, #2
 8005830:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005836:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005842:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	639a      	str	r2, [r3, #56]	; 0x38
 8005856:	e00b      	b.n	8005870 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005868:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005876:	461a      	mov	r2, r3
 8005878:	2300      	movs	r3, #0
 800587a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800587c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005880:	2b01      	cmp	r3, #1
 8005882:	d10d      	bne.n	80058a0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005884:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005888:	2b00      	cmp	r3, #0
 800588a:	d104      	bne.n	8005896 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800588c:	2100      	movs	r1, #0
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f968 	bl	8005b64 <USB_SetDevSpeed>
 8005894:	e008      	b.n	80058a8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005896:	2101      	movs	r1, #1
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 f963 	bl	8005b64 <USB_SetDevSpeed>
 800589e:	e003      	b.n	80058a8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80058a0:	2103      	movs	r1, #3
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f95e 	bl	8005b64 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80058a8:	2110      	movs	r1, #16
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f8fa 	bl	8005aa4 <USB_FlushTxFifo>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d001      	beq.n	80058ba <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f924 	bl	8005b08 <USB_FlushRxFifo>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058d0:	461a      	mov	r2, r3
 80058d2:	2300      	movs	r3, #0
 80058d4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058dc:	461a      	mov	r2, r3
 80058de:	2300      	movs	r3, #0
 80058e0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e8:	461a      	mov	r2, r3
 80058ea:	2300      	movs	r3, #0
 80058ec:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058ee:	2300      	movs	r3, #0
 80058f0:	613b      	str	r3, [r7, #16]
 80058f2:	e043      	b.n	800597c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	015a      	lsls	r2, r3, #5
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	4413      	add	r3, r2
 80058fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005906:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800590a:	d118      	bne.n	800593e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10a      	bne.n	8005928 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	4413      	add	r3, r2
 800591a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591e:	461a      	mov	r2, r3
 8005920:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005924:	6013      	str	r3, [r2, #0]
 8005926:	e013      	b.n	8005950 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005934:	461a      	mov	r2, r3
 8005936:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800593a:	6013      	str	r3, [r2, #0]
 800593c:	e008      	b.n	8005950 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	015a      	lsls	r2, r3, #5
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	4413      	add	r3, r2
 8005946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800594a:	461a      	mov	r2, r3
 800594c:	2300      	movs	r3, #0
 800594e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	4413      	add	r3, r2
 8005958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800595c:	461a      	mov	r2, r3
 800595e:	2300      	movs	r3, #0
 8005960:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	015a      	lsls	r2, r3, #5
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	4413      	add	r3, r2
 800596a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800596e:	461a      	mov	r2, r3
 8005970:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005974:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	3301      	adds	r3, #1
 800597a:	613b      	str	r3, [r7, #16]
 800597c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005980:	461a      	mov	r2, r3
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	4293      	cmp	r3, r2
 8005986:	d3b5      	bcc.n	80058f4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005988:	2300      	movs	r3, #0
 800598a:	613b      	str	r3, [r7, #16]
 800598c:	e043      	b.n	8005a16 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	015a      	lsls	r2, r3, #5
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	4413      	add	r3, r2
 8005996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059a4:	d118      	bne.n	80059d8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10a      	bne.n	80059c2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	015a      	lsls	r2, r3, #5
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	4413      	add	r3, r2
 80059b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b8:	461a      	mov	r2, r3
 80059ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059be:	6013      	str	r3, [r2, #0]
 80059c0:	e013      	b.n	80059ea <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ce:	461a      	mov	r2, r3
 80059d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80059d4:	6013      	str	r3, [r2, #0]
 80059d6:	e008      	b.n	80059ea <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e4:	461a      	mov	r2, r3
 80059e6:	2300      	movs	r3, #0
 80059e8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	015a      	lsls	r2, r3, #5
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	4413      	add	r3, r2
 80059f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f6:	461a      	mov	r2, r3
 80059f8:	2300      	movs	r3, #0
 80059fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a08:	461a      	mov	r2, r3
 8005a0a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a0e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	3301      	adds	r3, #1
 8005a14:	613b      	str	r3, [r7, #16]
 8005a16:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d3b5      	bcc.n	800598e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a34:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005a42:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005a44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d105      	bne.n	8005a58 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	f043 0210 	orr.w	r2, r3, #16
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	699a      	ldr	r2, [r3, #24]
 8005a5c:	4b10      	ldr	r3, [pc, #64]	; (8005aa0 <USB_DevInit+0x2c4>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005a64:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d005      	beq.n	8005a78 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	f043 0208 	orr.w	r2, r3, #8
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005a78:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d107      	bne.n	8005a90 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a88:	f043 0304 	orr.w	r3, r3, #4
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3718      	adds	r7, #24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a9c:	b004      	add	sp, #16
 8005a9e:	4770      	bx	lr
 8005aa0:	803c3800 	.word	0x803c3800

08005aa4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005abe:	d901      	bls.n	8005ac4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e01b      	b.n	8005afc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	daf2      	bge.n	8005ab2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005acc:	2300      	movs	r3, #0
 8005ace:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	019b      	lsls	r3, r3, #6
 8005ad4:	f043 0220 	orr.w	r2, r3, #32
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	3301      	adds	r3, #1
 8005ae0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005ae8:	d901      	bls.n	8005aee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e006      	b.n	8005afc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	f003 0320 	and.w	r3, r3, #32
 8005af6:	2b20      	cmp	r3, #32
 8005af8:	d0f0      	beq.n	8005adc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b10:	2300      	movs	r3, #0
 8005b12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	3301      	adds	r3, #1
 8005b18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005b20:	d901      	bls.n	8005b26 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e018      	b.n	8005b58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	daf2      	bge.n	8005b14 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2210      	movs	r2, #16
 8005b36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005b44:	d901      	bls.n	8005b4a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e006      	b.n	8005b58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	f003 0310 	and.w	r3, r3, #16
 8005b52:	2b10      	cmp	r3, #16
 8005b54:	d0f0      	beq.n	8005b38 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3714      	adds	r7, #20
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	78fb      	ldrb	r3, [r7, #3]
 8005b7e:	68f9      	ldr	r1, [r7, #12]
 8005b80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b84:	4313      	orrs	r3, r2
 8005b86:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3714      	adds	r7, #20
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b087      	sub	sp, #28
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f003 0306 	and.w	r3, r3, #6
 8005bae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d102      	bne.n	8005bbc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	75fb      	strb	r3, [r7, #23]
 8005bba:	e00a      	b.n	8005bd2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d002      	beq.n	8005bc8 <USB_GetDevSpeed+0x32>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2b06      	cmp	r3, #6
 8005bc6:	d102      	bne.n	8005bce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005bc8:	2302      	movs	r3, #2
 8005bca:	75fb      	strb	r3, [r7, #23]
 8005bcc:	e001      	b.n	8005bd2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005bce:	230f      	movs	r3, #15
 8005bd0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	371c      	adds	r7, #28
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	785b      	ldrb	r3, [r3, #1]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d13a      	bne.n	8005c72 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c02:	69da      	ldr	r2, [r3, #28]
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	f003 030f 	and.w	r3, r3, #15
 8005c0c:	2101      	movs	r1, #1
 8005c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	68f9      	ldr	r1, [r7, #12]
 8005c16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	015a      	lsls	r2, r3, #5
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	4413      	add	r3, r2
 8005c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d155      	bne.n	8005ce0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	791b      	ldrb	r3, [r3, #4]
 8005c4e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c50:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	059b      	lsls	r3, r3, #22
 8005c56:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	0151      	lsls	r1, r2, #5
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	440a      	add	r2, r1
 8005c62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c6e:	6013      	str	r3, [r2, #0]
 8005c70:	e036      	b.n	8005ce0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c78:	69da      	ldr	r2, [r3, #28]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	f003 030f 	and.w	r3, r3, #15
 8005c82:	2101      	movs	r1, #1
 8005c84:	fa01 f303 	lsl.w	r3, r1, r3
 8005c88:	041b      	lsls	r3, r3, #16
 8005c8a:	68f9      	ldr	r1, [r7, #12]
 8005c8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c90:	4313      	orrs	r3, r2
 8005c92:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d11a      	bne.n	8005ce0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	015a      	lsls	r2, r3, #5
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	791b      	ldrb	r3, [r3, #4]
 8005cc4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005cc6:	430b      	orrs	r3, r1
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	0151      	lsls	r1, r2, #5
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	440a      	add	r2, r1
 8005cd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cde:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
	...

08005cf0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	785b      	ldrb	r3, [r3, #1]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d161      	bne.n	8005dd0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	015a      	lsls	r2, r3, #5
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	4413      	add	r3, r2
 8005d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d22:	d11f      	bne.n	8005d64 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	015a      	lsls	r2, r3, #5
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	0151      	lsls	r1, r2, #5
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	440a      	add	r2, r1
 8005d3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d42:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	015a      	lsls	r2, r3, #5
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68ba      	ldr	r2, [r7, #8]
 8005d54:	0151      	lsls	r1, r2, #5
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	440a      	add	r2, r1
 8005d5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	f003 030f 	and.w	r3, r3, #15
 8005d74:	2101      	movs	r1, #1
 8005d76:	fa01 f303 	lsl.w	r3, r1, r3
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	43db      	mvns	r3, r3
 8005d7e:	68f9      	ldr	r1, [r7, #12]
 8005d80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d84:	4013      	ands	r3, r2
 8005d86:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d8e:	69da      	ldr	r2, [r3, #28]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	f003 030f 	and.w	r3, r3, #15
 8005d98:	2101      	movs	r1, #1
 8005d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	43db      	mvns	r3, r3
 8005da2:	68f9      	ldr	r1, [r7, #12]
 8005da4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005da8:	4013      	ands	r3, r2
 8005daa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	0159      	lsls	r1, r3, #5
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	440b      	add	r3, r1
 8005dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	4b35      	ldr	r3, [pc, #212]	; (8005ea0 <USB_DeactivateEndpoint+0x1b0>)
 8005dca:	4013      	ands	r3, r2
 8005dcc:	600b      	str	r3, [r1, #0]
 8005dce:	e060      	b.n	8005e92 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005de2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005de6:	d11f      	bne.n	8005e28 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	0151      	lsls	r1, r2, #5
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	440a      	add	r2, r1
 8005dfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e06:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	015a      	lsls	r2, r3, #5
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	0151      	lsls	r1, r2, #5
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	440a      	add	r2, r1
 8005e1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	f003 030f 	and.w	r3, r3, #15
 8005e38:	2101      	movs	r1, #1
 8005e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e3e:	041b      	lsls	r3, r3, #16
 8005e40:	43db      	mvns	r3, r3
 8005e42:	68f9      	ldr	r1, [r7, #12]
 8005e44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e48:	4013      	ands	r3, r2
 8005e4a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e52:	69da      	ldr	r2, [r3, #28]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	f003 030f 	and.w	r3, r3, #15
 8005e5c:	2101      	movs	r1, #1
 8005e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e62:	041b      	lsls	r3, r3, #16
 8005e64:	43db      	mvns	r3, r3
 8005e66:	68f9      	ldr	r1, [r7, #12]
 8005e68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	0159      	lsls	r1, r3, #5
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	440b      	add	r3, r1
 8005e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	4b05      	ldr	r3, [pc, #20]	; (8005ea4 <USB_DeactivateEndpoint+0x1b4>)
 8005e8e:	4013      	ands	r3, r2
 8005e90:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3714      	adds	r7, #20
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	ec337800 	.word	0xec337800
 8005ea4:	eff37800 	.word	0xeff37800

08005ea8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b08a      	sub	sp, #40	; 0x28
 8005eac:	af02      	add	r7, sp, #8
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	785b      	ldrb	r3, [r3, #1]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	f040 817a 	bne.w	80061be <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d132      	bne.n	8005f38 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	015a      	lsls	r2, r3, #5
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	4413      	add	r3, r2
 8005eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	69ba      	ldr	r2, [r7, #24]
 8005ee2:	0151      	lsls	r1, r2, #5
 8005ee4:	69fa      	ldr	r2, [r7, #28]
 8005ee6:	440a      	add	r2, r1
 8005ee8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ef0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ef4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	0151      	lsls	r1, r2, #5
 8005f08:	69fa      	ldr	r2, [r7, #28]
 8005f0a:	440a      	add	r2, r1
 8005f0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	015a      	lsls	r2, r3, #5
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	0151      	lsls	r1, r2, #5
 8005f28:	69fa      	ldr	r2, [r7, #28]
 8005f2a:	440a      	add	r2, r1
 8005f2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f30:	0cdb      	lsrs	r3, r3, #19
 8005f32:	04db      	lsls	r3, r3, #19
 8005f34:	6113      	str	r3, [r2, #16]
 8005f36:	e092      	b.n	800605e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	69ba      	ldr	r2, [r7, #24]
 8005f48:	0151      	lsls	r1, r2, #5
 8005f4a:	69fa      	ldr	r2, [r7, #28]
 8005f4c:	440a      	add	r2, r1
 8005f4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f52:	0cdb      	lsrs	r3, r3, #19
 8005f54:	04db      	lsls	r3, r3, #19
 8005f56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	015a      	lsls	r2, r3, #5
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	69ba      	ldr	r2, [r7, #24]
 8005f68:	0151      	lsls	r1, r2, #5
 8005f6a:	69fa      	ldr	r2, [r7, #28]
 8005f6c:	440a      	add	r2, r1
 8005f6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f72:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f76:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f7a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d11a      	bne.n	8005fb8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	691a      	ldr	r2, [r3, #16]
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d903      	bls.n	8005f96 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	689a      	ldr	r2, [r3, #8]
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	69ba      	ldr	r2, [r7, #24]
 8005fa6:	0151      	lsls	r1, r2, #5
 8005fa8:	69fa      	ldr	r2, [r7, #28]
 8005faa:	440a      	add	r2, r1
 8005fac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fb4:	6113      	str	r3, [r2, #16]
 8005fb6:	e01b      	b.n	8005ff0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	6919      	ldr	r1, [r3, #16]
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	440b      	add	r3, r1
 8005fd0:	1e59      	subs	r1, r3, #1
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005fda:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005fdc:	4ba2      	ldr	r3, [pc, #648]	; (8006268 <USB_EPStartXfer+0x3c0>)
 8005fde:	400b      	ands	r3, r1
 8005fe0:	69b9      	ldr	r1, [r7, #24]
 8005fe2:	0148      	lsls	r0, r1, #5
 8005fe4:	69f9      	ldr	r1, [r7, #28]
 8005fe6:	4401      	add	r1, r0
 8005fe8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005fec:	4313      	orrs	r3, r2
 8005fee:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ffc:	691a      	ldr	r2, [r3, #16]
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006006:	69b9      	ldr	r1, [r7, #24]
 8006008:	0148      	lsls	r0, r1, #5
 800600a:	69f9      	ldr	r1, [r7, #28]
 800600c:	4401      	add	r1, r0
 800600e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006012:	4313      	orrs	r3, r2
 8006014:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	791b      	ldrb	r3, [r3, #4]
 800601a:	2b01      	cmp	r3, #1
 800601c:	d11f      	bne.n	800605e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	015a      	lsls	r2, r3, #5
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	4413      	add	r3, r2
 8006026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	69ba      	ldr	r2, [r7, #24]
 800602e:	0151      	lsls	r1, r2, #5
 8006030:	69fa      	ldr	r2, [r7, #28]
 8006032:	440a      	add	r2, r1
 8006034:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006038:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800603c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	015a      	lsls	r2, r3, #5
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	4413      	add	r3, r2
 8006046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	69ba      	ldr	r2, [r7, #24]
 800604e:	0151      	lsls	r1, r2, #5
 8006050:	69fa      	ldr	r2, [r7, #28]
 8006052:	440a      	add	r2, r1
 8006054:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006058:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800605c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800605e:	79fb      	ldrb	r3, [r7, #7]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d14b      	bne.n	80060fc <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	69db      	ldr	r3, [r3, #28]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d009      	beq.n	8006080 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	4413      	add	r3, r2
 8006074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006078:	461a      	mov	r2, r3
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	69db      	ldr	r3, [r3, #28]
 800607e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	791b      	ldrb	r3, [r3, #4]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d128      	bne.n	80060da <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006094:	2b00      	cmp	r3, #0
 8006096:	d110      	bne.n	80060ba <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	0151      	lsls	r1, r2, #5
 80060aa:	69fa      	ldr	r2, [r7, #28]
 80060ac:	440a      	add	r2, r1
 80060ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060b6:	6013      	str	r3, [r2, #0]
 80060b8:	e00f      	b.n	80060da <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	015a      	lsls	r2, r3, #5
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	4413      	add	r3, r2
 80060c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	0151      	lsls	r1, r2, #5
 80060cc:	69fa      	ldr	r2, [r7, #28]
 80060ce:	440a      	add	r2, r1
 80060d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060d8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	0151      	lsls	r1, r2, #5
 80060ec:	69fa      	ldr	r2, [r7, #28]
 80060ee:	440a      	add	r2, r1
 80060f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060f8:	6013      	str	r3, [r2, #0]
 80060fa:	e165      	b.n	80063c8 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	015a      	lsls	r2, r3, #5
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	4413      	add	r3, r2
 8006104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	69ba      	ldr	r2, [r7, #24]
 800610c:	0151      	lsls	r1, r2, #5
 800610e:	69fa      	ldr	r2, [r7, #28]
 8006110:	440a      	add	r2, r1
 8006112:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006116:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800611a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	791b      	ldrb	r3, [r3, #4]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d015      	beq.n	8006150 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	2b00      	cmp	r3, #0
 800612a:	f000 814d 	beq.w	80063c8 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006134:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	f003 030f 	and.w	r3, r3, #15
 800613e:	2101      	movs	r1, #1
 8006140:	fa01 f303 	lsl.w	r3, r1, r3
 8006144:	69f9      	ldr	r1, [r7, #28]
 8006146:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800614a:	4313      	orrs	r3, r2
 800614c:	634b      	str	r3, [r1, #52]	; 0x34
 800614e:	e13b      	b.n	80063c8 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800615c:	2b00      	cmp	r3, #0
 800615e:	d110      	bne.n	8006182 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	015a      	lsls	r2, r3, #5
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	4413      	add	r3, r2
 8006168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	69ba      	ldr	r2, [r7, #24]
 8006170:	0151      	lsls	r1, r2, #5
 8006172:	69fa      	ldr	r2, [r7, #28]
 8006174:	440a      	add	r2, r1
 8006176:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800617a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800617e:	6013      	str	r3, [r2, #0]
 8006180:	e00f      	b.n	80061a2 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	015a      	lsls	r2, r3, #5
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	4413      	add	r3, r2
 800618a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	69ba      	ldr	r2, [r7, #24]
 8006192:	0151      	lsls	r1, r2, #5
 8006194:	69fa      	ldr	r2, [r7, #28]
 8006196:	440a      	add	r2, r1
 8006198:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800619c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061a0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	68d9      	ldr	r1, [r3, #12]
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	781a      	ldrb	r2, [r3, #0]
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	b298      	uxth	r0, r3
 80061b0:	79fb      	ldrb	r3, [r7, #7]
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	4603      	mov	r3, r0
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f000 f9b8 	bl	800652c <USB_WritePacket>
 80061bc:	e104      	b.n	80063c8 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	015a      	lsls	r2, r3, #5
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	4413      	add	r3, r2
 80061c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	69ba      	ldr	r2, [r7, #24]
 80061ce:	0151      	lsls	r1, r2, #5
 80061d0:	69fa      	ldr	r2, [r7, #28]
 80061d2:	440a      	add	r2, r1
 80061d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061d8:	0cdb      	lsrs	r3, r3, #19
 80061da:	04db      	lsls	r3, r3, #19
 80061dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	69ba      	ldr	r2, [r7, #24]
 80061ee:	0151      	lsls	r1, r2, #5
 80061f0:	69fa      	ldr	r2, [r7, #28]
 80061f2:	440a      	add	r2, r1
 80061f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006200:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d131      	bne.n	800626c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d003      	beq.n	8006218 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	689a      	ldr	r2, [r3, #8]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	689a      	ldr	r2, [r3, #8]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	015a      	lsls	r2, r3, #5
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	4413      	add	r3, r2
 8006228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800622c:	691a      	ldr	r2, [r3, #16]
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006236:	69b9      	ldr	r1, [r7, #24]
 8006238:	0148      	lsls	r0, r1, #5
 800623a:	69f9      	ldr	r1, [r7, #28]
 800623c:	4401      	add	r1, r0
 800623e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006242:	4313      	orrs	r3, r2
 8006244:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	015a      	lsls	r2, r3, #5
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	4413      	add	r3, r2
 800624e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	69ba      	ldr	r2, [r7, #24]
 8006256:	0151      	lsls	r1, r2, #5
 8006258:	69fa      	ldr	r2, [r7, #28]
 800625a:	440a      	add	r2, r1
 800625c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006260:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006264:	6113      	str	r3, [r2, #16]
 8006266:	e061      	b.n	800632c <USB_EPStartXfer+0x484>
 8006268:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d123      	bne.n	80062bc <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	4413      	add	r3, r2
 800627c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006280:	691a      	ldr	r2, [r3, #16]
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800628a:	69b9      	ldr	r1, [r7, #24]
 800628c:	0148      	lsls	r0, r1, #5
 800628e:	69f9      	ldr	r1, [r7, #28]
 8006290:	4401      	add	r1, r0
 8006292:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006296:	4313      	orrs	r3, r2
 8006298:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	69ba      	ldr	r2, [r7, #24]
 80062aa:	0151      	lsls	r1, r2, #5
 80062ac:	69fa      	ldr	r2, [r7, #28]
 80062ae:	440a      	add	r2, r1
 80062b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062b8:	6113      	str	r3, [r2, #16]
 80062ba:	e037      	b.n	800632c <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	691a      	ldr	r2, [r3, #16]
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	4413      	add	r3, r2
 80062c6:	1e5a      	subs	r2, r3, #1
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	8afa      	ldrh	r2, [r7, #22]
 80062d8:	fb03 f202 	mul.w	r2, r3, r2
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	015a      	lsls	r2, r3, #5
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	4413      	add	r3, r2
 80062e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ec:	691a      	ldr	r2, [r3, #16]
 80062ee:	8afb      	ldrh	r3, [r7, #22]
 80062f0:	04d9      	lsls	r1, r3, #19
 80062f2:	4b38      	ldr	r3, [pc, #224]	; (80063d4 <USB_EPStartXfer+0x52c>)
 80062f4:	400b      	ands	r3, r1
 80062f6:	69b9      	ldr	r1, [r7, #24]
 80062f8:	0148      	lsls	r0, r1, #5
 80062fa:	69f9      	ldr	r1, [r7, #28]
 80062fc:	4401      	add	r1, r0
 80062fe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006302:	4313      	orrs	r3, r2
 8006304:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	4413      	add	r3, r2
 800630e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006312:	691a      	ldr	r2, [r3, #16]
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800631c:	69b9      	ldr	r1, [r7, #24]
 800631e:	0148      	lsls	r0, r1, #5
 8006320:	69f9      	ldr	r1, [r7, #28]
 8006322:	4401      	add	r1, r0
 8006324:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006328:	4313      	orrs	r3, r2
 800632a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800632c:	79fb      	ldrb	r3, [r7, #7]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d10d      	bne.n	800634e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d009      	beq.n	800634e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	68d9      	ldr	r1, [r3, #12]
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	015a      	lsls	r2, r3, #5
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	4413      	add	r3, r2
 8006346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800634a:	460a      	mov	r2, r1
 800634c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	791b      	ldrb	r3, [r3, #4]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d128      	bne.n	80063a8 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006362:	2b00      	cmp	r3, #0
 8006364:	d110      	bne.n	8006388 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	015a      	lsls	r2, r3, #5
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	4413      	add	r3, r2
 800636e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	0151      	lsls	r1, r2, #5
 8006378:	69fa      	ldr	r2, [r7, #28]
 800637a:	440a      	add	r2, r1
 800637c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006380:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006384:	6013      	str	r3, [r2, #0]
 8006386:	e00f      	b.n	80063a8 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	015a      	lsls	r2, r3, #5
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	4413      	add	r3, r2
 8006390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	69ba      	ldr	r2, [r7, #24]
 8006398:	0151      	lsls	r1, r2, #5
 800639a:	69fa      	ldr	r2, [r7, #28]
 800639c:	440a      	add	r2, r1
 800639e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063a6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	0151      	lsls	r1, r2, #5
 80063ba:	69fa      	ldr	r2, [r7, #28]
 80063bc:	440a      	add	r2, r1
 80063be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3720      	adds	r7, #32
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	1ff80000 	.word	0x1ff80000

080063d8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063d8:	b480      	push	{r7}
 80063da:	b087      	sub	sp, #28
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80063e2:	2300      	movs	r3, #0
 80063e4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80063e6:	2300      	movs	r3, #0
 80063e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	785b      	ldrb	r3, [r3, #1]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d14a      	bne.n	800648c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	015a      	lsls	r2, r3, #5
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	4413      	add	r3, r2
 8006400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800640a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800640e:	f040 8086 	bne.w	800651e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	4413      	add	r3, r2
 800641c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	683a      	ldr	r2, [r7, #0]
 8006424:	7812      	ldrb	r2, [r2, #0]
 8006426:	0151      	lsls	r1, r2, #5
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	440a      	add	r2, r1
 800642c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006430:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006434:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	015a      	lsls	r2, r3, #5
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	4413      	add	r3, r2
 8006440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	683a      	ldr	r2, [r7, #0]
 8006448:	7812      	ldrb	r2, [r2, #0]
 800644a:	0151      	lsls	r1, r2, #5
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	440a      	add	r2, r1
 8006450:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006454:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006458:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	3301      	adds	r3, #1
 800645e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f242 7210 	movw	r2, #10000	; 0x2710
 8006466:	4293      	cmp	r3, r2
 8006468:	d902      	bls.n	8006470 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	75fb      	strb	r3, [r7, #23]
          break;
 800646e:	e056      	b.n	800651e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	015a      	lsls	r2, r3, #5
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	4413      	add	r3, r2
 800647a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006484:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006488:	d0e7      	beq.n	800645a <USB_EPStopXfer+0x82>
 800648a:	e048      	b.n	800651e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	015a      	lsls	r2, r3, #5
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	4413      	add	r3, r2
 8006496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064a4:	d13b      	bne.n	800651e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	015a      	lsls	r2, r3, #5
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	683a      	ldr	r2, [r7, #0]
 80064b8:	7812      	ldrb	r2, [r2, #0]
 80064ba:	0151      	lsls	r1, r2, #5
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	440a      	add	r2, r1
 80064c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80064c8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	015a      	lsls	r2, r3, #5
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	4413      	add	r3, r2
 80064d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	683a      	ldr	r2, [r7, #0]
 80064dc:	7812      	ldrb	r2, [r2, #0]
 80064de:	0151      	lsls	r1, r2, #5
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	440a      	add	r2, r1
 80064e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	3301      	adds	r3, #1
 80064f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d902      	bls.n	8006504 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	75fb      	strb	r3, [r7, #23]
          break;
 8006502:	e00c      	b.n	800651e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	015a      	lsls	r2, r3, #5
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	4413      	add	r3, r2
 800650e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006518:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800651c:	d0e7      	beq.n	80064ee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800651e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006520:	4618      	mov	r0, r3
 8006522:	371c      	adds	r7, #28
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800652c:	b480      	push	{r7}
 800652e:	b089      	sub	sp, #36	; 0x24
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	4611      	mov	r1, r2
 8006538:	461a      	mov	r2, r3
 800653a:	460b      	mov	r3, r1
 800653c:	71fb      	strb	r3, [r7, #7]
 800653e:	4613      	mov	r3, r2
 8006540:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800654a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800654e:	2b00      	cmp	r3, #0
 8006550:	d123      	bne.n	800659a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006552:	88bb      	ldrh	r3, [r7, #4]
 8006554:	3303      	adds	r3, #3
 8006556:	089b      	lsrs	r3, r3, #2
 8006558:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800655a:	2300      	movs	r3, #0
 800655c:	61bb      	str	r3, [r7, #24]
 800655e:	e018      	b.n	8006592 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006560:	79fb      	ldrb	r3, [r7, #7]
 8006562:	031a      	lsls	r2, r3, #12
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	4413      	add	r3, r2
 8006568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800656c:	461a      	mov	r2, r3
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	3301      	adds	r3, #1
 8006578:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	3301      	adds	r3, #1
 800657e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	3301      	adds	r3, #1
 8006584:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	3301      	adds	r3, #1
 800658a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	3301      	adds	r3, #1
 8006590:	61bb      	str	r3, [r7, #24]
 8006592:	69ba      	ldr	r2, [r7, #24]
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	429a      	cmp	r2, r3
 8006598:	d3e2      	bcc.n	8006560 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3724      	adds	r7, #36	; 0x24
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b08b      	sub	sp, #44	; 0x2c
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	4613      	mov	r3, r2
 80065b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80065be:	88fb      	ldrh	r3, [r7, #6]
 80065c0:	089b      	lsrs	r3, r3, #2
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80065c6:	88fb      	ldrh	r3, [r7, #6]
 80065c8:	f003 0303 	and.w	r3, r3, #3
 80065cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80065ce:	2300      	movs	r3, #0
 80065d0:	623b      	str	r3, [r7, #32]
 80065d2:	e014      	b.n	80065fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065de:	601a      	str	r2, [r3, #0]
    pDest++;
 80065e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e2:	3301      	adds	r3, #1
 80065e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80065e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e8:	3301      	adds	r3, #1
 80065ea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80065ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ee:	3301      	adds	r3, #1
 80065f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80065f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f4:	3301      	adds	r3, #1
 80065f6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80065f8:	6a3b      	ldr	r3, [r7, #32]
 80065fa:	3301      	adds	r3, #1
 80065fc:	623b      	str	r3, [r7, #32]
 80065fe:	6a3a      	ldr	r2, [r7, #32]
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	429a      	cmp	r2, r3
 8006604:	d3e6      	bcc.n	80065d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006606:	8bfb      	ldrh	r3, [r7, #30]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d01e      	beq.n	800664a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800660c:	2300      	movs	r3, #0
 800660e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006616:	461a      	mov	r2, r3
 8006618:	f107 0310 	add.w	r3, r7, #16
 800661c:	6812      	ldr	r2, [r2, #0]
 800661e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	6a3b      	ldr	r3, [r7, #32]
 8006624:	b2db      	uxtb	r3, r3
 8006626:	00db      	lsls	r3, r3, #3
 8006628:	fa22 f303 	lsr.w	r3, r2, r3
 800662c:	b2da      	uxtb	r2, r3
 800662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006630:	701a      	strb	r2, [r3, #0]
      i++;
 8006632:	6a3b      	ldr	r3, [r7, #32]
 8006634:	3301      	adds	r3, #1
 8006636:	623b      	str	r3, [r7, #32]
      pDest++;
 8006638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663a:	3301      	adds	r3, #1
 800663c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800663e:	8bfb      	ldrh	r3, [r7, #30]
 8006640:	3b01      	subs	r3, #1
 8006642:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006644:	8bfb      	ldrh	r3, [r7, #30]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1ea      	bne.n	8006620 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800664c:	4618      	mov	r0, r3
 800664e:	372c      	adds	r7, #44	; 0x2c
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	785b      	ldrb	r3, [r3, #1]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d12c      	bne.n	80066ce <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	015a      	lsls	r2, r3, #5
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	4413      	add	r3, r2
 800667c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	db12      	blt.n	80066ac <USB_EPSetStall+0x54>
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00f      	beq.n	80066ac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	015a      	lsls	r2, r3, #5
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	4413      	add	r3, r2
 8006694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	0151      	lsls	r1, r2, #5
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	440a      	add	r2, r1
 80066a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066aa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	015a      	lsls	r2, r3, #5
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68ba      	ldr	r2, [r7, #8]
 80066bc:	0151      	lsls	r1, r2, #5
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	440a      	add	r2, r1
 80066c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066ca:	6013      	str	r3, [r2, #0]
 80066cc:	e02b      	b.n	8006726 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	015a      	lsls	r2, r3, #5
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	4413      	add	r3, r2
 80066d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	db12      	blt.n	8006706 <USB_EPSetStall+0xae>
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00f      	beq.n	8006706 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	015a      	lsls	r2, r3, #5
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	4413      	add	r3, r2
 80066ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	0151      	lsls	r1, r2, #5
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	440a      	add	r2, r1
 80066fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006700:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006704:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	4413      	add	r3, r2
 800670e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68ba      	ldr	r2, [r7, #8]
 8006716:	0151      	lsls	r1, r2, #5
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	440a      	add	r2, r1
 800671c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006720:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006724:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	785b      	ldrb	r3, [r3, #1]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d128      	bne.n	80067a2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	4413      	add	r3, r2
 8006758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	0151      	lsls	r1, r2, #5
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	440a      	add	r2, r1
 8006766:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800676a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800676e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	791b      	ldrb	r3, [r3, #4]
 8006774:	2b03      	cmp	r3, #3
 8006776:	d003      	beq.n	8006780 <USB_EPClearStall+0x4c>
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	791b      	ldrb	r3, [r3, #4]
 800677c:	2b02      	cmp	r3, #2
 800677e:	d138      	bne.n	80067f2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	015a      	lsls	r2, r3, #5
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	4413      	add	r3, r2
 8006788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	0151      	lsls	r1, r2, #5
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	440a      	add	r2, r1
 8006796:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800679a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800679e:	6013      	str	r3, [r2, #0]
 80067a0:	e027      	b.n	80067f2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	015a      	lsls	r2, r3, #5
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	4413      	add	r3, r2
 80067aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68ba      	ldr	r2, [r7, #8]
 80067b2:	0151      	lsls	r1, r2, #5
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	440a      	add	r2, r1
 80067b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067c0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	791b      	ldrb	r3, [r3, #4]
 80067c6:	2b03      	cmp	r3, #3
 80067c8:	d003      	beq.n	80067d2 <USB_EPClearStall+0x9e>
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	791b      	ldrb	r3, [r3, #4]
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d10f      	bne.n	80067f2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	015a      	lsls	r2, r3, #5
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	4413      	add	r3, r2
 80067da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	0151      	lsls	r1, r2, #5
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	440a      	add	r2, r1
 80067e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067f0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3714      	adds	r7, #20
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	460b      	mov	r3, r1
 800680a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800681e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006822:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	78fb      	ldrb	r3, [r7, #3]
 800682e:	011b      	lsls	r3, r3, #4
 8006830:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006834:	68f9      	ldr	r1, [r7, #12]
 8006836:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800683a:	4313      	orrs	r3, r2
 800683c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3714      	adds	r7, #20
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006866:	f023 0303 	bic.w	r3, r3, #3
 800686a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800687a:	f023 0302 	bic.w	r3, r3, #2
 800687e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3714      	adds	r7, #20
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr

0800688e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800688e:	b480      	push	{r7}
 8006890:	b085      	sub	sp, #20
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80068a8:	f023 0303 	bic.w	r3, r3, #3
 80068ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068bc:	f043 0302 	orr.w	r3, r3, #2
 80068c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3714      	adds	r7, #20
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	695b      	ldr	r3, [r3, #20]
 80068dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	4013      	ands	r3, r2
 80068e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80068e8:	68fb      	ldr	r3, [r7, #12]
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3714      	adds	r7, #20
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr

080068f6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80068f6:	b480      	push	{r7}
 80068f8:	b085      	sub	sp, #20
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006912:	69db      	ldr	r3, [r3, #28]
 8006914:	68ba      	ldr	r2, [r7, #8]
 8006916:	4013      	ands	r3, r2
 8006918:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	0c1b      	lsrs	r3, r3, #16
}
 800691e:	4618      	mov	r0, r3
 8006920:	3714      	adds	r7, #20
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800692a:	b480      	push	{r7}
 800692c:	b085      	sub	sp, #20
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006946:	69db      	ldr	r3, [r3, #28]
 8006948:	68ba      	ldr	r2, [r7, #8]
 800694a:	4013      	ands	r3, r2
 800694c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	b29b      	uxth	r3, r3
}
 8006952:	4618      	mov	r0, r3
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr

0800695e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800695e:	b480      	push	{r7}
 8006960:	b085      	sub	sp, #20
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
 8006966:	460b      	mov	r3, r1
 8006968:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800696e:	78fb      	ldrb	r3, [r7, #3]
 8006970:	015a      	lsls	r2, r3, #5
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	4413      	add	r3, r2
 8006976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	68ba      	ldr	r2, [r7, #8]
 8006988:	4013      	ands	r3, r2
 800698a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800698c:	68bb      	ldr	r3, [r7, #8]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3714      	adds	r7, #20
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800699a:	b480      	push	{r7}
 800699c:	b087      	sub	sp, #28
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
 80069a2:	460b      	mov	r3, r1
 80069a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069bc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80069be:	78fb      	ldrb	r3, [r7, #3]
 80069c0:	f003 030f 	and.w	r3, r3, #15
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	fa22 f303 	lsr.w	r3, r2, r3
 80069ca:	01db      	lsls	r3, r3, #7
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	693a      	ldr	r2, [r7, #16]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80069d4:	78fb      	ldrb	r3, [r7, #3]
 80069d6:	015a      	lsls	r2, r3, #5
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	4413      	add	r3, r2
 80069dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	4013      	ands	r3, r2
 80069e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80069e8:	68bb      	ldr	r3, [r7, #8]
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	371c      	adds	r7, #28
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr

080069f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80069f6:	b480      	push	{r7}
 80069f8:	b083      	sub	sp, #12
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	f003 0301 	and.w	r3, r3, #1
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	370c      	adds	r7, #12
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr

08006a12 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a12:	b480      	push	{r7}
 8006a14:	b085      	sub	sp, #20
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a2c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006a30:	f023 0307 	bic.w	r3, r3, #7
 8006a34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b087      	sub	sp, #28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	460b      	mov	r3, r1
 8006a62:	607a      	str	r2, [r7, #4]
 8006a64:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	333c      	adds	r3, #60	; 0x3c
 8006a6e:	3304      	adds	r3, #4
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	4a26      	ldr	r2, [pc, #152]	; (8006b10 <USB_EP0_OutStart+0xb8>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d90a      	bls.n	8006a92 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a8c:	d101      	bne.n	8006a92 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	e037      	b.n	8006b02 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a98:	461a      	mov	r2, r3
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ab0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ac0:	f043 0318 	orr.w	r3, r3, #24
 8006ac4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ad4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006ad8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006ada:	7afb      	ldrb	r3, [r7, #11]
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d10f      	bne.n	8006b00 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006afa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006afe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	371c      	adds	r7, #28
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	4f54300a 	.word	0x4f54300a

08006b14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	3301      	adds	r3, #1
 8006b24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006b2c:	d901      	bls.n	8006b32 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e01b      	b.n	8006b6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	daf2      	bge.n	8006b20 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	f043 0201 	orr.w	r2, r3, #1
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006b56:	d901      	bls.n	8006b5c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	e006      	b.n	8006b6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	f003 0301 	and.w	r3, r3, #1
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d0f0      	beq.n	8006b4a <USB_CoreReset+0x36>

  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3714      	adds	r7, #20
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr
	...

08006b78 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	460b      	mov	r3, r1
 8006b82:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8006b84:	201c      	movs	r0, #28
 8006b86:	f002 faf1 	bl	800916c <USBD_static_malloc>
 8006b8a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d109      	bne.n	8006ba6 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	32b0      	adds	r2, #176	; 0xb0
 8006b9c:	2100      	movs	r1, #0
 8006b9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006ba2:	2302      	movs	r3, #2
 8006ba4:	e08a      	b.n	8006cbc <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	32b0      	adds	r2, #176	; 0xb0
 8006bb0:	68f9      	ldr	r1, [r7, #12]
 8006bb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	32b0      	adds	r2, #176	; 0xb0
 8006bc0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	7c1b      	ldrb	r3, [r3, #16]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d11b      	bne.n	8006c0a <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006bd2:	4b3c      	ldr	r3, [pc, #240]	; (8006cc4 <USBD_CUSTOM_HID_Init+0x14c>)
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	f003 020f 	and.w	r2, r3, #15
 8006bda:	6879      	ldr	r1, [r7, #4]
 8006bdc:	4613      	mov	r3, r2
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	4413      	add	r3, r2
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	440b      	add	r3, r1
 8006be6:	3326      	adds	r3, #38	; 0x26
 8006be8:	2205      	movs	r2, #5
 8006bea:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006bec:	4b36      	ldr	r3, [pc, #216]	; (8006cc8 <USBD_CUSTOM_HID_Init+0x150>)
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	f003 020f 	and.w	r2, r3, #15
 8006bf4:	6879      	ldr	r1, [r7, #4]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	4413      	add	r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	440b      	add	r3, r1
 8006c00:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006c04:	2205      	movs	r2, #5
 8006c06:	801a      	strh	r2, [r3, #0]
 8006c08:	e01a      	b.n	8006c40 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006c0a:	4b2e      	ldr	r3, [pc, #184]	; (8006cc4 <USBD_CUSTOM_HID_Init+0x14c>)
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	f003 020f 	and.w	r2, r3, #15
 8006c12:	6879      	ldr	r1, [r7, #4]
 8006c14:	4613      	mov	r3, r2
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	4413      	add	r3, r2
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	440b      	add	r3, r1
 8006c1e:	3326      	adds	r3, #38	; 0x26
 8006c20:	2205      	movs	r2, #5
 8006c22:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006c24:	4b28      	ldr	r3, [pc, #160]	; (8006cc8 <USBD_CUSTOM_HID_Init+0x150>)
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	f003 020f 	and.w	r2, r3, #15
 8006c2c:	6879      	ldr	r1, [r7, #4]
 8006c2e:	4613      	mov	r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4413      	add	r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	440b      	add	r3, r1
 8006c38:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006c3c:	2205      	movs	r2, #5
 8006c3e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8006c40:	4b20      	ldr	r3, [pc, #128]	; (8006cc4 <USBD_CUSTOM_HID_Init+0x14c>)
 8006c42:	7819      	ldrb	r1, [r3, #0]
 8006c44:	2320      	movs	r3, #32
 8006c46:	2203      	movs	r2, #3
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f002 f97e 	bl	8008f4a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8006c4e:	4b1d      	ldr	r3, [pc, #116]	; (8006cc4 <USBD_CUSTOM_HID_Init+0x14c>)
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	f003 020f 	and.w	r2, r3, #15
 8006c56:	6879      	ldr	r1, [r7, #4]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	4413      	add	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	440b      	add	r3, r1
 8006c62:	3324      	adds	r3, #36	; 0x24
 8006c64:	2201      	movs	r2, #1
 8006c66:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8006c68:	4b17      	ldr	r3, [pc, #92]	; (8006cc8 <USBD_CUSTOM_HID_Init+0x150>)
 8006c6a:	7819      	ldrb	r1, [r3, #0]
 8006c6c:	2308      	movs	r3, #8
 8006c6e:	2203      	movs	r2, #3
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f002 f96a 	bl	8008f4a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8006c76:	4b14      	ldr	r3, [pc, #80]	; (8006cc8 <USBD_CUSTOM_HID_Init+0x150>)
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	f003 020f 	and.w	r2, r3, #15
 8006c7e:	6879      	ldr	r1, [r7, #4]
 8006c80:	4613      	mov	r3, r2
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	4413      	add	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	440b      	add	r3, r1
 8006c8a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c8e:	2201      	movs	r2, #1
 8006c90:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	761a      	strb	r2, [r3, #24]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	33b0      	adds	r3, #176	; 0xb0
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	4413      	add	r3, r2
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8006cac:	4b06      	ldr	r3, [pc, #24]	; (8006cc8 <USBD_CUSTOM_HID_Init+0x150>)
 8006cae:	7819      	ldrb	r1, [r3, #0]
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	2308      	movs	r3, #8
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f002 fa37 	bl	8009128 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3710      	adds	r7, #16
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	200000f6 	.word	0x200000f6
 8006cc8:	200000f7 	.word	0x200000f7

08006ccc <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8006cd8:	4b37      	ldr	r3, [pc, #220]	; (8006db8 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	4619      	mov	r1, r3
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f002 f959 	bl	8008f96 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8006ce4:	4b34      	ldr	r3, [pc, #208]	; (8006db8 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	f003 020f 	and.w	r2, r3, #15
 8006cec:	6879      	ldr	r1, [r7, #4]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4413      	add	r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	440b      	add	r3, r1
 8006cf8:	3324      	adds	r3, #36	; 0x24
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8006cfe:	4b2e      	ldr	r3, [pc, #184]	; (8006db8 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	f003 020f 	and.w	r2, r3, #15
 8006d06:	6879      	ldr	r1, [r7, #4]
 8006d08:	4613      	mov	r3, r2
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	4413      	add	r3, r2
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	440b      	add	r3, r1
 8006d12:	3326      	adds	r3, #38	; 0x26
 8006d14:	2200      	movs	r2, #0
 8006d16:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8006d18:	4b28      	ldr	r3, [pc, #160]	; (8006dbc <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f002 f939 	bl	8008f96 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8006d24:	4b25      	ldr	r3, [pc, #148]	; (8006dbc <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	f003 020f 	and.w	r2, r3, #15
 8006d2c:	6879      	ldr	r1, [r7, #4]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4413      	add	r3, r2
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	440b      	add	r3, r1
 8006d38:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8006d40:	4b1e      	ldr	r3, [pc, #120]	; (8006dbc <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	f003 020f 	and.w	r2, r3, #15
 8006d48:	6879      	ldr	r1, [r7, #4]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	4413      	add	r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	440b      	add	r3, r1
 8006d54:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006d58:	2200      	movs	r2, #0
 8006d5a:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	32b0      	adds	r2, #176	; 0xb0
 8006d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d01f      	beq.n	8006dae <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	33b0      	adds	r3, #176	; 0xb0
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	4413      	add	r3, r2
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	32b0      	adds	r2, #176	; 0xb0
 8006d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d90:	4618      	mov	r0, r3
 8006d92:	f002 f9f9 	bl	8009188 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	32b0      	adds	r2, #176	; 0xb0
 8006da0:	2100      	movs	r1, #0
 8006da2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3708      	adds	r7, #8
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	200000f6 	.word	0x200000f6
 8006dbc:	200000f7 	.word	0x200000f7

08006dc0 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b088      	sub	sp, #32
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	32b0      	adds	r2, #176	; 0xb0
 8006dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dd8:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8006dde:	2300      	movs	r3, #0
 8006de0:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006de2:	2300      	movs	r3, #0
 8006de4:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006de6:	2300      	movs	r3, #0
 8006de8:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d101      	bne.n	8006df4 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8006df0:	2303      	movs	r3, #3
 8006df2:	e0f8      	b.n	8006fe6 <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d056      	beq.n	8006eae <USBD_CUSTOM_HID_Setup+0xee>
 8006e00:	2b20      	cmp	r3, #32
 8006e02:	f040 80e8 	bne.w	8006fd6 <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	785b      	ldrb	r3, [r3, #1]
 8006e0a:	3b02      	subs	r3, #2
 8006e0c:	2b09      	cmp	r3, #9
 8006e0e:	d846      	bhi.n	8006e9e <USBD_CUSTOM_HID_Setup+0xde>
 8006e10:	a201      	add	r2, pc, #4	; (adr r2, 8006e18 <USBD_CUSTOM_HID_Setup+0x58>)
 8006e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e16:	bf00      	nop
 8006e18:	08006e71 	.word	0x08006e71
 8006e1c:	08006e4f 	.word	0x08006e4f
 8006e20:	08006e9f 	.word	0x08006e9f
 8006e24:	08006e9f 	.word	0x08006e9f
 8006e28:	08006e9f 	.word	0x08006e9f
 8006e2c:	08006e9f 	.word	0x08006e9f
 8006e30:	08006e9f 	.word	0x08006e9f
 8006e34:	08006e81 	.word	0x08006e81
 8006e38:	08006e5f 	.word	0x08006e5f
 8006e3c:	08006e41 	.word	0x08006e41
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	885b      	ldrh	r3, [r3, #2]
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	461a      	mov	r2, r3
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	609a      	str	r2, [r3, #8]
          break;
 8006e4c:	e02e      	b.n	8006eac <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	3308      	adds	r3, #8
 8006e52:	2201      	movs	r2, #1
 8006e54:	4619      	mov	r1, r3
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f001 fcc6 	bl	80087e8 <USBD_CtlSendData>
          break;
 8006e5c:	e026      	b.n	8006eac <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	885b      	ldrh	r3, [r3, #2]
 8006e62:	0a1b      	lsrs	r3, r3, #8
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	461a      	mov	r2, r3
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	60da      	str	r2, [r3, #12]
          break;
 8006e6e:	e01d      	b.n	8006eac <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	330c      	adds	r3, #12
 8006e74:	2201      	movs	r2, #1
 8006e76:	4619      	mov	r1, r3
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f001 fcb5 	bl	80087e8 <USBD_CtlSendData>
          break;
 8006e7e:	e015      	b.n	8006eac <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	2201      	movs	r2, #1
 8006e84:	615a      	str	r2, [r3, #20]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8006e86:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	88db      	ldrh	r3, [r3, #6]
 8006e8c:	2b08      	cmp	r3, #8
 8006e8e:	bf28      	it	cs
 8006e90:	2308      	movcs	r3, #8
 8006e92:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8006e94:	461a      	mov	r2, r3
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f001 fcd2 	bl	8008840 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8006e9c:	e006      	b.n	8006eac <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8006e9e:	6839      	ldr	r1, [r7, #0]
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f001 fc30 	bl	8008706 <USBD_CtlError>
          ret = USBD_FAIL;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	75fb      	strb	r3, [r7, #23]
          break;
 8006eaa:	bf00      	nop
      }
      break;
 8006eac:	e09a      	b.n	8006fe4 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	785b      	ldrb	r3, [r3, #1]
 8006eb2:	2b0b      	cmp	r3, #11
 8006eb4:	f200 8086 	bhi.w	8006fc4 <USBD_CUSTOM_HID_Setup+0x204>
 8006eb8:	a201      	add	r2, pc, #4	; (adr r2, 8006ec0 <USBD_CUSTOM_HID_Setup+0x100>)
 8006eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ebe:	bf00      	nop
 8006ec0:	08006ef1 	.word	0x08006ef1
 8006ec4:	08006fd3 	.word	0x08006fd3
 8006ec8:	08006fc5 	.word	0x08006fc5
 8006ecc:	08006fc5 	.word	0x08006fc5
 8006ed0:	08006fc5 	.word	0x08006fc5
 8006ed4:	08006fc5 	.word	0x08006fc5
 8006ed8:	08006f1b 	.word	0x08006f1b
 8006edc:	08006fc5 	.word	0x08006fc5
 8006ee0:	08006fc5 	.word	0x08006fc5
 8006ee4:	08006fc5 	.word	0x08006fc5
 8006ee8:	08006f73 	.word	0x08006f73
 8006eec:	08006f9d 	.word	0x08006f9d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	2b03      	cmp	r3, #3
 8006efa:	d107      	bne.n	8006f0c <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006efc:	f107 030e 	add.w	r3, r7, #14
 8006f00:	2202      	movs	r2, #2
 8006f02:	4619      	mov	r1, r3
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f001 fc6f 	bl	80087e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f0a:	e063      	b.n	8006fd4 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006f0c:	6839      	ldr	r1, [r7, #0]
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f001 fbf9 	bl	8008706 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f14:	2303      	movs	r3, #3
 8006f16:	75fb      	strb	r3, [r7, #23]
          break;
 8006f18:	e05c      	b.n	8006fd4 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	885b      	ldrh	r3, [r3, #2]
 8006f1e:	0a1b      	lsrs	r3, r3, #8
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	2b22      	cmp	r3, #34	; 0x22
 8006f24:	d110      	bne.n	8006f48 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	88db      	ldrh	r3, [r3, #6]
 8006f2a:	2b79      	cmp	r3, #121	; 0x79
 8006f2c:	bf28      	it	cs
 8006f2e:	2379      	movcs	r3, #121	; 0x79
 8006f30:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	33b0      	adds	r3, #176	; 0xb0
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	4413      	add	r3, r2
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	61bb      	str	r3, [r7, #24]
 8006f46:	e00d      	b.n	8006f64 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	885b      	ldrh	r3, [r3, #2]
 8006f4c:	0a1b      	lsrs	r3, r3, #8
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	2b21      	cmp	r3, #33	; 0x21
 8006f52:	d107      	bne.n	8006f64 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8006f54:	4b26      	ldr	r3, [pc, #152]	; (8006ff0 <USBD_CUSTOM_HID_Setup+0x230>)
 8006f56:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	88db      	ldrh	r3, [r3, #6]
 8006f5c:	2b09      	cmp	r3, #9
 8006f5e:	bf28      	it	cs
 8006f60:	2309      	movcs	r3, #9
 8006f62:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006f64:	8bfb      	ldrh	r3, [r7, #30]
 8006f66:	461a      	mov	r2, r3
 8006f68:	69b9      	ldr	r1, [r7, #24]
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f001 fc3c 	bl	80087e8 <USBD_CtlSendData>
          break;
 8006f70:	e030      	b.n	8006fd4 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	2b03      	cmp	r3, #3
 8006f7c:	d107      	bne.n	8006f8e <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	3310      	adds	r3, #16
 8006f82:	2201      	movs	r2, #1
 8006f84:	4619      	mov	r1, r3
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f001 fc2e 	bl	80087e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f8c:	e022      	b.n	8006fd4 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006f8e:	6839      	ldr	r1, [r7, #0]
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f001 fbb8 	bl	8008706 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f96:	2303      	movs	r3, #3
 8006f98:	75fb      	strb	r3, [r7, #23]
          break;
 8006f9a:	e01b      	b.n	8006fd4 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	2b03      	cmp	r3, #3
 8006fa6:	d106      	bne.n	8006fb6 <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	885b      	ldrh	r3, [r3, #2]
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	461a      	mov	r2, r3
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	611a      	str	r2, [r3, #16]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fb4:	e00e      	b.n	8006fd4 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006fb6:	6839      	ldr	r1, [r7, #0]
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f001 fba4 	bl	8008706 <USBD_CtlError>
            ret = USBD_FAIL;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	75fb      	strb	r3, [r7, #23]
          break;
 8006fc2:	e007      	b.n	8006fd4 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006fc4:	6839      	ldr	r1, [r7, #0]
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f001 fb9d 	bl	8008706 <USBD_CtlError>
          ret = USBD_FAIL;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	75fb      	strb	r3, [r7, #23]
          break;
 8006fd0:	e000      	b.n	8006fd4 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8006fd2:	bf00      	nop
      }
      break;
 8006fd4:	e006      	b.n	8006fe4 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8006fd6:	6839      	ldr	r1, [r7, #0]
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f001 fb94 	bl	8008706 <USBD_CtlError>
      ret = USBD_FAIL;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	75fb      	strb	r3, [r7, #23]
      break;
 8006fe2:	bf00      	nop
  }
  return (uint8_t)ret;
 8006fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3720      	adds	r7, #32
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	200000e0 	.word	0x200000e0

08006ff4 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	4613      	mov	r3, r2
 8007000:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	32b0      	adds	r2, #176	; 0xb0
 800700c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007010:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d101      	bne.n	800701c <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007018:	2303      	movs	r3, #3
 800701a:	e017      	b.n	800704c <USBD_CUSTOM_HID_SendReport+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b03      	cmp	r3, #3
 8007026:	d110      	bne.n	800704a <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	7e1b      	ldrb	r3, [r3, #24]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d10a      	bne.n	8007046 <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	2201      	movs	r2, #1
 8007034:	761a      	strb	r2, [r3, #24]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8007036:	4b07      	ldr	r3, [pc, #28]	; (8007054 <USBD_CUSTOM_HID_SendReport+0x60>)
 8007038:	7819      	ldrb	r1, [r3, #0]
 800703a:	88fb      	ldrh	r3, [r7, #6]
 800703c:	68ba      	ldr	r2, [r7, #8]
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f002 f851 	bl	80090e6 <USBD_LL_Transmit>
 8007044:	e001      	b.n	800704a <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8007046:	2301      	movs	r3, #1
 8007048:	e000      	b.n	800704c <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3718      	adds	r7, #24
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	200000f6 	.word	0x200000f6

08007058 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8007060:	2181      	movs	r1, #129	; 0x81
 8007062:	4815      	ldr	r0, [pc, #84]	; (80070b8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8007064:	f000 fd17 	bl	8007a96 <USBD_GetEpDesc>
 8007068:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800706a:	2102      	movs	r1, #2
 800706c:	4812      	ldr	r0, [pc, #72]	; (80070b8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 800706e:	f000 fd12 	bl	8007a96 <USBD_GetEpDesc>
 8007072:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d009      	beq.n	800708e <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	f042 0220 	orr.w	r2, r2, #32
 8007082:	711a      	strb	r2, [r3, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2205      	movs	r2, #5
 800708c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d009      	beq.n	80070a8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	2200      	movs	r2, #0
 8007098:	f042 0208 	orr.w	r2, r2, #8
 800709c:	711a      	strb	r2, [r3, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	2205      	movs	r2, #5
 80070a6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2299      	movs	r2, #153	; 0x99
 80070ac:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80070ae:	4b02      	ldr	r3, [pc, #8]	; (80070b8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	20000044 	.word	0x20000044

080070bc <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80070c4:	2181      	movs	r1, #129	; 0x81
 80070c6:	4815      	ldr	r0, [pc, #84]	; (800711c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 80070c8:	f000 fce5 	bl	8007a96 <USBD_GetEpDesc>
 80070cc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80070ce:	2102      	movs	r1, #2
 80070d0:	4812      	ldr	r0, [pc, #72]	; (800711c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 80070d2:	f000 fce0 	bl	8007a96 <USBD_GetEpDesc>
 80070d6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d009      	beq.n	80070f2 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f042 0220 	orr.w	r2, r2, #32
 80070e6:	711a      	strb	r2, [r3, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2205      	movs	r2, #5
 80070f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d009      	beq.n	800710c <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f042 0208 	orr.w	r2, r2, #8
 8007100:	711a      	strb	r2, [r3, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	2205      	movs	r2, #5
 800710a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2299      	movs	r2, #153	; 0x99
 8007110:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8007112:	4b02      	ldr	r3, [pc, #8]	; (800711c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8007114:	4618      	mov	r0, r3
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}
 800711c:	20000044 	.word	0x20000044

08007120 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8007128:	2181      	movs	r1, #129	; 0x81
 800712a:	4815      	ldr	r0, [pc, #84]	; (8007180 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 800712c:	f000 fcb3 	bl	8007a96 <USBD_GetEpDesc>
 8007130:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8007132:	2102      	movs	r1, #2
 8007134:	4812      	ldr	r0, [pc, #72]	; (8007180 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8007136:	f000 fcae 	bl	8007a96 <USBD_GetEpDesc>
 800713a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d009      	beq.n	8007156 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2200      	movs	r2, #0
 8007146:	f042 0220 	orr.w	r2, r2, #32
 800714a:	711a      	strb	r2, [r3, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2205      	movs	r2, #5
 8007154:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d009      	beq.n	8007170 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	2200      	movs	r2, #0
 8007160:	f042 0208 	orr.w	r2, r2, #8
 8007164:	711a      	strb	r2, [r3, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	2205      	movs	r2, #5
 800716e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2299      	movs	r2, #153	; 0x99
 8007174:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8007176:	4b02      	ldr	r3, [pc, #8]	; (8007180 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8007178:	4618      	mov	r0, r3
 800717a:	3710      	adds	r7, #16
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	20000044 	.word	0x20000044

08007184 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	460b      	mov	r3, r1
 800718e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	32b0      	adds	r2, #176	; 0xb0
 800719a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800719e:	2200      	movs	r2, #0
 80071a0:	761a      	strb	r2, [r3, #24]

  return (uint8_t)USBD_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	460b      	mov	r3, r1
 80071ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	32b0      	adds	r2, #176	; 0xb0
 80071c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d101      	bne.n	80071d2 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e014      	b.n	80071fc <USBD_CUSTOM_HID_DataOut+0x4c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	32b0      	adds	r2, #176	; 0xb0
 80071dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e0:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	33b0      	adds	r3, #176	; 0xb0
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	4413      	add	r3, r2
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	4610      	mov	r0, r2
 80071f8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	32b0      	adds	r2, #176	; 0xb0
 8007216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d101      	bne.n	8007222 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800721e:	2303      	movs	r3, #3
 8007220:	e00f      	b.n	8007242 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	32b0      	adds	r2, #176	; 0xb0
 800722c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007230:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8007232:	4b06      	ldr	r3, [pc, #24]	; (800724c <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8007234:	7819      	ldrb	r1, [r3, #0]
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	2308      	movs	r3, #8
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f001 ff74 	bl	8009128 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	200000f7 	.word	0x200000f7

08007250 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	32b0      	adds	r2, #176	; 0xb0
 8007262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007266:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d101      	bne.n	8007272 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800726e:	2303      	movs	r3, #3
 8007270:	e013      	b.n	800729a <USBD_CUSTOM_HID_EP0_RxReady+0x4a>
  }

  if (hhid->IsReportAvailable == 1U)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	695b      	ldr	r3, [r3, #20]
 8007276:	2b01      	cmp	r3, #1
 8007278:	d10e      	bne.n	8007298 <USBD_CUSTOM_HID_EP0_RxReady+0x48>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	33b0      	adds	r3, #176	; 0xb0
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4413      	add	r3, r2
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	4610      	mov	r0, r2
 8007290:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	615a      	str	r2, [r3, #20]
  }

  return (uint8_t)USBD_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
	...

080072a4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	220a      	movs	r2, #10
 80072b0:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80072b2:	4b03      	ldr	r3, [pc, #12]	; (80072c0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr
 80072c0:	200000ec 	.word	0x200000ec

080072c4 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d101      	bne.n	80072d8 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80072d4:	2303      	movs	r3, #3
 80072d6:	e009      	b.n	80072ec <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	33b0      	adds	r3, #176	; 0xb0
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	4413      	add	r3, r2
 80072e6:	683a      	ldr	r2, [r7, #0]
 80072e8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b086      	sub	sp, #24
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	4613      	mov	r3, r2
 8007304:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d101      	bne.n	8007310 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800730c:	2303      	movs	r3, #3
 800730e:	e01f      	b.n	8007350 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2200      	movs	r2, #0
 8007314:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d003      	beq.n	8007336 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	68ba      	ldr	r2, [r7, #8]
 8007332:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2201      	movs	r2, #1
 800733a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	79fa      	ldrb	r2, [r7, #7]
 8007342:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f001 fd99 	bl	8008e7c <USBD_LL_Init>
 800734a:	4603      	mov	r3, r0
 800734c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800734e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007350:	4618      	mov	r0, r3
 8007352:	3718      	adds	r7, #24
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007362:	2300      	movs	r3, #0
 8007364:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d101      	bne.n	8007370 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800736c:	2303      	movs	r3, #3
 800736e:	e025      	b.n	80073bc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	683a      	ldr	r2, [r7, #0]
 8007374:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	32ae      	adds	r2, #174	; 0xae
 8007382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00f      	beq.n	80073ac <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	32ae      	adds	r2, #174	; 0xae
 8007396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800739a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739c:	f107 020e 	add.w	r2, r7, #14
 80073a0:	4610      	mov	r0, r2
 80073a2:	4798      	blx	r3
 80073a4:	4602      	mov	r2, r0
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80073b2:	1c5a      	adds	r2, r3, #1
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f001 fda1 	bl	8008f14 <USBD_LL_Start>
 80073d2:	4603      	mov	r3, r0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3708      	adds	r7, #8
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80073e4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	370c      	adds	r7, #12
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b084      	sub	sp, #16
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
 80073fa:	460b      	mov	r3, r1
 80073fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80073fe:	2300      	movs	r3, #0
 8007400:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007408:	2b00      	cmp	r3, #0
 800740a:	d009      	beq.n	8007420 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	78fa      	ldrb	r2, [r7, #3]
 8007416:	4611      	mov	r1, r2
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	4798      	blx	r3
 800741c:	4603      	mov	r3, r0
 800741e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007420:	7bfb      	ldrb	r3, [r7, #15]
}
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b084      	sub	sp, #16
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
 8007432:	460b      	mov	r3, r1
 8007434:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	78fa      	ldrb	r2, [r7, #3]
 8007444:	4611      	mov	r1, r2
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	4798      	blx	r3
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d001      	beq.n	8007454 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007450:	2303      	movs	r3, #3
 8007452:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007454:	7bfb      	ldrb	r3, [r7, #15]
}
 8007456:	4618      	mov	r0, r3
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b084      	sub	sp, #16
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
 8007466:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	4618      	mov	r0, r3
 8007472:	f001 f90e 	bl	8008692 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2201      	movs	r2, #1
 800747a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007484:	461a      	mov	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007492:	f003 031f 	and.w	r3, r3, #31
 8007496:	2b02      	cmp	r3, #2
 8007498:	d01a      	beq.n	80074d0 <USBD_LL_SetupStage+0x72>
 800749a:	2b02      	cmp	r3, #2
 800749c:	d822      	bhi.n	80074e4 <USBD_LL_SetupStage+0x86>
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d002      	beq.n	80074a8 <USBD_LL_SetupStage+0x4a>
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d00a      	beq.n	80074bc <USBD_LL_SetupStage+0x5e>
 80074a6:	e01d      	b.n	80074e4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80074ae:	4619      	mov	r1, r3
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 fb65 	bl	8007b80 <USBD_StdDevReq>
 80074b6:	4603      	mov	r3, r0
 80074b8:	73fb      	strb	r3, [r7, #15]
      break;
 80074ba:	e020      	b.n	80074fe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80074c2:	4619      	mov	r1, r3
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 fbcd 	bl	8007c64 <USBD_StdItfReq>
 80074ca:	4603      	mov	r3, r0
 80074cc:	73fb      	strb	r3, [r7, #15]
      break;
 80074ce:	e016      	b.n	80074fe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80074d6:	4619      	mov	r1, r3
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 fc2f 	bl	8007d3c <USBD_StdEPReq>
 80074de:	4603      	mov	r3, r0
 80074e0:	73fb      	strb	r3, [r7, #15]
      break;
 80074e2:	e00c      	b.n	80074fe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80074ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	4619      	mov	r1, r3
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f001 fd6e 	bl	8008fd4 <USBD_LL_StallEP>
 80074f8:	4603      	mov	r3, r0
 80074fa:	73fb      	strb	r3, [r7, #15]
      break;
 80074fc:	bf00      	nop
  }

  return ret;
 80074fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007500:	4618      	mov	r0, r3
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	460b      	mov	r3, r1
 8007512:	607a      	str	r2, [r7, #4]
 8007514:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800751a:	7afb      	ldrb	r3, [r7, #11]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d16e      	bne.n	80075fe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007526:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800752e:	2b03      	cmp	r3, #3
 8007530:	f040 8098 	bne.w	8007664 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	689a      	ldr	r2, [r3, #8]
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	429a      	cmp	r2, r3
 800753e:	d913      	bls.n	8007568 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	689a      	ldr	r2, [r3, #8]
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	1ad2      	subs	r2, r2, r3
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	68da      	ldr	r2, [r3, #12]
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	4293      	cmp	r3, r2
 8007558:	bf28      	it	cs
 800755a:	4613      	movcs	r3, r2
 800755c:	461a      	mov	r2, r3
 800755e:	6879      	ldr	r1, [r7, #4]
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f001 f98a 	bl	800887a <USBD_CtlContinueRx>
 8007566:	e07d      	b.n	8007664 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800756e:	f003 031f 	and.w	r3, r3, #31
 8007572:	2b02      	cmp	r3, #2
 8007574:	d014      	beq.n	80075a0 <USBD_LL_DataOutStage+0x98>
 8007576:	2b02      	cmp	r3, #2
 8007578:	d81d      	bhi.n	80075b6 <USBD_LL_DataOutStage+0xae>
 800757a:	2b00      	cmp	r3, #0
 800757c:	d002      	beq.n	8007584 <USBD_LL_DataOutStage+0x7c>
 800757e:	2b01      	cmp	r3, #1
 8007580:	d003      	beq.n	800758a <USBD_LL_DataOutStage+0x82>
 8007582:	e018      	b.n	80075b6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007584:	2300      	movs	r3, #0
 8007586:	75bb      	strb	r3, [r7, #22]
            break;
 8007588:	e018      	b.n	80075bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007590:	b2db      	uxtb	r3, r3
 8007592:	4619      	mov	r1, r3
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f000 fa64 	bl	8007a62 <USBD_CoreFindIF>
 800759a:	4603      	mov	r3, r0
 800759c:	75bb      	strb	r3, [r7, #22]
            break;
 800759e:	e00d      	b.n	80075bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	4619      	mov	r1, r3
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	f000 fa66 	bl	8007a7c <USBD_CoreFindEP>
 80075b0:	4603      	mov	r3, r0
 80075b2:	75bb      	strb	r3, [r7, #22]
            break;
 80075b4:	e002      	b.n	80075bc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80075b6:	2300      	movs	r3, #0
 80075b8:	75bb      	strb	r3, [r7, #22]
            break;
 80075ba:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80075bc:	7dbb      	ldrb	r3, [r7, #22]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d119      	bne.n	80075f6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	2b03      	cmp	r3, #3
 80075cc:	d113      	bne.n	80075f6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80075ce:	7dba      	ldrb	r2, [r7, #22]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	32ae      	adds	r2, #174	; 0xae
 80075d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00b      	beq.n	80075f6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80075de:	7dba      	ldrb	r2, [r7, #22]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80075e6:	7dba      	ldrb	r2, [r7, #22]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	32ae      	adds	r2, #174	; 0xae
 80075ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	68f8      	ldr	r0, [r7, #12]
 80075f4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f001 f950 	bl	800889c <USBD_CtlSendStatus>
 80075fc:	e032      	b.n	8007664 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80075fe:	7afb      	ldrb	r3, [r7, #11]
 8007600:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007604:	b2db      	uxtb	r3, r3
 8007606:	4619      	mov	r1, r3
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f000 fa37 	bl	8007a7c <USBD_CoreFindEP>
 800760e:	4603      	mov	r3, r0
 8007610:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007612:	7dbb      	ldrb	r3, [r7, #22]
 8007614:	2bff      	cmp	r3, #255	; 0xff
 8007616:	d025      	beq.n	8007664 <USBD_LL_DataOutStage+0x15c>
 8007618:	7dbb      	ldrb	r3, [r7, #22]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d122      	bne.n	8007664 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007624:	b2db      	uxtb	r3, r3
 8007626:	2b03      	cmp	r3, #3
 8007628:	d117      	bne.n	800765a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800762a:	7dba      	ldrb	r2, [r7, #22]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	32ae      	adds	r2, #174	; 0xae
 8007630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007634:	699b      	ldr	r3, [r3, #24]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00f      	beq.n	800765a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800763a:	7dba      	ldrb	r2, [r7, #22]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007642:	7dba      	ldrb	r2, [r7, #22]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	32ae      	adds	r2, #174	; 0xae
 8007648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800764c:	699b      	ldr	r3, [r3, #24]
 800764e:	7afa      	ldrb	r2, [r7, #11]
 8007650:	4611      	mov	r1, r2
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	4798      	blx	r3
 8007656:	4603      	mov	r3, r0
 8007658:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800765a:	7dfb      	ldrb	r3, [r7, #23]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d001      	beq.n	8007664 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007660:	7dfb      	ldrb	r3, [r7, #23]
 8007662:	e000      	b.n	8007666 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3718      	adds	r7, #24
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b086      	sub	sp, #24
 8007672:	af00      	add	r7, sp, #0
 8007674:	60f8      	str	r0, [r7, #12]
 8007676:	460b      	mov	r3, r1
 8007678:	607a      	str	r2, [r7, #4]
 800767a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800767c:	7afb      	ldrb	r3, [r7, #11]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d16f      	bne.n	8007762 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	3314      	adds	r3, #20
 8007686:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800768e:	2b02      	cmp	r3, #2
 8007690:	d15a      	bne.n	8007748 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	689a      	ldr	r2, [r3, #8]
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	429a      	cmp	r2, r3
 800769c:	d914      	bls.n	80076c8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	689a      	ldr	r2, [r3, #8]
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	1ad2      	subs	r2, r2, r3
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	461a      	mov	r2, r3
 80076b2:	6879      	ldr	r1, [r7, #4]
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f001 f8b2 	bl	800881e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076ba:	2300      	movs	r3, #0
 80076bc:	2200      	movs	r2, #0
 80076be:	2100      	movs	r1, #0
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f001 fd31 	bl	8009128 <USBD_LL_PrepareReceive>
 80076c6:	e03f      	b.n	8007748 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	68da      	ldr	r2, [r3, #12]
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d11c      	bne.n	800770e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	685a      	ldr	r2, [r3, #4]
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80076dc:	429a      	cmp	r2, r3
 80076de:	d316      	bcc.n	800770e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	685a      	ldr	r2, [r3, #4]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d20f      	bcs.n	800770e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80076ee:	2200      	movs	r2, #0
 80076f0:	2100      	movs	r1, #0
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f001 f893 	bl	800881e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007700:	2300      	movs	r3, #0
 8007702:	2200      	movs	r2, #0
 8007704:	2100      	movs	r1, #0
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f001 fd0e 	bl	8009128 <USBD_LL_PrepareReceive>
 800770c:	e01c      	b.n	8007748 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007714:	b2db      	uxtb	r3, r3
 8007716:	2b03      	cmp	r3, #3
 8007718:	d10f      	bne.n	800773a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d009      	beq.n	800773a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800773a:	2180      	movs	r1, #128	; 0x80
 800773c:	68f8      	ldr	r0, [r7, #12]
 800773e:	f001 fc49 	bl	8008fd4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f001 f8bd 	bl	80088c2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d03a      	beq.n	80077c8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f7ff fe42 	bl	80073dc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007760:	e032      	b.n	80077c8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007762:	7afb      	ldrb	r3, [r7, #11]
 8007764:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007768:	b2db      	uxtb	r3, r3
 800776a:	4619      	mov	r1, r3
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f000 f985 	bl	8007a7c <USBD_CoreFindEP>
 8007772:	4603      	mov	r3, r0
 8007774:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007776:	7dfb      	ldrb	r3, [r7, #23]
 8007778:	2bff      	cmp	r3, #255	; 0xff
 800777a:	d025      	beq.n	80077c8 <USBD_LL_DataInStage+0x15a>
 800777c:	7dfb      	ldrb	r3, [r7, #23]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d122      	bne.n	80077c8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007788:	b2db      	uxtb	r3, r3
 800778a:	2b03      	cmp	r3, #3
 800778c:	d11c      	bne.n	80077c8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800778e:	7dfa      	ldrb	r2, [r7, #23]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	32ae      	adds	r2, #174	; 0xae
 8007794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d014      	beq.n	80077c8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800779e:	7dfa      	ldrb	r2, [r7, #23]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80077a6:	7dfa      	ldrb	r2, [r7, #23]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	32ae      	adds	r2, #174	; 0xae
 80077ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b0:	695b      	ldr	r3, [r3, #20]
 80077b2:	7afa      	ldrb	r2, [r7, #11]
 80077b4:	4611      	mov	r1, r2
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	4798      	blx	r3
 80077ba:	4603      	mov	r3, r0
 80077bc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80077be:	7dbb      	ldrb	r3, [r7, #22]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d001      	beq.n	80077c8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80077c4:	7dbb      	ldrb	r3, [r7, #22]
 80077c6:	e000      	b.n	80077ca <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3718      	adds	r7, #24
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b084      	sub	sp, #16
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80077da:	2300      	movs	r3, #0
 80077dc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2201      	movs	r2, #1
 80077e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800780a:	2b00      	cmp	r3, #0
 800780c:	d014      	beq.n	8007838 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00e      	beq.n	8007838 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	6852      	ldr	r2, [r2, #4]
 8007826:	b2d2      	uxtb	r2, r2
 8007828:	4611      	mov	r1, r2
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	4798      	blx	r3
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d001      	beq.n	8007838 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007834:	2303      	movs	r3, #3
 8007836:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007838:	2340      	movs	r3, #64	; 0x40
 800783a:	2200      	movs	r2, #0
 800783c:	2100      	movs	r1, #0
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f001 fb83 	bl	8008f4a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2240      	movs	r2, #64	; 0x40
 8007850:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007854:	2340      	movs	r3, #64	; 0x40
 8007856:	2200      	movs	r2, #0
 8007858:	2180      	movs	r1, #128	; 0x80
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f001 fb75 	bl	8008f4a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2240      	movs	r2, #64	; 0x40
 800786a:	621a      	str	r2, [r3, #32]

  return ret;
 800786c:	7bfb      	ldrb	r3, [r7, #15]
}
 800786e:	4618      	mov	r0, r3
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007876:	b480      	push	{r7}
 8007878:	b083      	sub	sp, #12
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
 800787e:	460b      	mov	r3, r1
 8007880:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	78fa      	ldrb	r2, [r7, #3]
 8007886:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	370c      	adds	r7, #12
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr

08007896 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007896:	b480      	push	{r7}
 8007898:	b083      	sub	sp, #12
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	2b04      	cmp	r3, #4
 80078a8:	d006      	beq.n	80078b8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078b0:	b2da      	uxtb	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2204      	movs	r2, #4
 80078bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr

080078ce <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80078ce:	b480      	push	{r7}
 80078d0:	b083      	sub	sp, #12
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	2b04      	cmp	r3, #4
 80078e0:	d106      	bne.n	80078f0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80078e8:	b2da      	uxtb	r2, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	370c      	adds	r7, #12
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr

080078fe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b082      	sub	sp, #8
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b03      	cmp	r3, #3
 8007910:	d110      	bne.n	8007934 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00b      	beq.n	8007934 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007922:	69db      	ldr	r3, [r3, #28]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d005      	beq.n	8007934 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800792e:	69db      	ldr	r3, [r3, #28]
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3708      	adds	r7, #8
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b082      	sub	sp, #8
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
 8007946:	460b      	mov	r3, r1
 8007948:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	32ae      	adds	r2, #174	; 0xae
 8007954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d101      	bne.n	8007960 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800795c:	2303      	movs	r3, #3
 800795e:	e01c      	b.n	800799a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007966:	b2db      	uxtb	r3, r3
 8007968:	2b03      	cmp	r3, #3
 800796a:	d115      	bne.n	8007998 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	32ae      	adds	r2, #174	; 0xae
 8007976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800797a:	6a1b      	ldr	r3, [r3, #32]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00b      	beq.n	8007998 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	32ae      	adds	r2, #174	; 0xae
 800798a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800798e:	6a1b      	ldr	r3, [r3, #32]
 8007990:	78fa      	ldrb	r2, [r7, #3]
 8007992:	4611      	mov	r1, r2
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3708      	adds	r7, #8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b082      	sub	sp, #8
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
 80079aa:	460b      	mov	r3, r1
 80079ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	32ae      	adds	r2, #174	; 0xae
 80079b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d101      	bne.n	80079c4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80079c0:	2303      	movs	r3, #3
 80079c2:	e01c      	b.n	80079fe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	2b03      	cmp	r3, #3
 80079ce:	d115      	bne.n	80079fc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	32ae      	adds	r2, #174	; 0xae
 80079da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00b      	beq.n	80079fc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	32ae      	adds	r2, #174	; 0xae
 80079ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f4:	78fa      	ldrb	r2, [r7, #3]
 80079f6:	4611      	mov	r1, r2
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3708      	adds	r7, #8
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007a06:	b480      	push	{r7}
 8007a08:	b083      	sub	sp, #12
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007a24:	2300      	movs	r3, #0
 8007a26:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00e      	beq.n	8007a58 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	6852      	ldr	r2, [r2, #4]
 8007a46:	b2d2      	uxtb	r2, r2
 8007a48:	4611      	mov	r1, r2
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	4798      	blx	r3
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d001      	beq.n	8007a58 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007a54:	2303      	movs	r3, #3
 8007a56:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b083      	sub	sp, #12
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007a6e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	460b      	mov	r3, r1
 8007a86:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007a88:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	370c      	adds	r7, #12
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b086      	sub	sp, #24
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	885b      	ldrh	r3, [r3, #2]
 8007ab2:	b29a      	uxth	r2, r3
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d920      	bls.n	8007b00 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007ac6:	e013      	b.n	8007af0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007ac8:	f107 030a 	add.w	r3, r7, #10
 8007acc:	4619      	mov	r1, r3
 8007ace:	6978      	ldr	r0, [r7, #20]
 8007ad0:	f000 f81b 	bl	8007b0a <USBD_GetNextDesc>
 8007ad4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	785b      	ldrb	r3, [r3, #1]
 8007ada:	2b05      	cmp	r3, #5
 8007adc:	d108      	bne.n	8007af0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	789b      	ldrb	r3, [r3, #2]
 8007ae6:	78fa      	ldrb	r2, [r7, #3]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d008      	beq.n	8007afe <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007aec:	2300      	movs	r3, #0
 8007aee:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	885b      	ldrh	r3, [r3, #2]
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	897b      	ldrh	r3, [r7, #10]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d8e5      	bhi.n	8007ac8 <USBD_GetEpDesc+0x32>
 8007afc:	e000      	b.n	8007b00 <USBD_GetEpDesc+0x6a>
          break;
 8007afe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007b00:	693b      	ldr	r3, [r7, #16]
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3718      	adds	r7, #24
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007b0a:	b480      	push	{r7}
 8007b0c:	b085      	sub	sp, #20
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
 8007b12:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	881a      	ldrh	r2, [r3, #0]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	4413      	add	r3, r2
 8007b24:	b29a      	uxth	r2, r3
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	461a      	mov	r2, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4413      	add	r3, r2
 8007b34:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007b36:	68fb      	ldr	r3, [r7, #12]
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3714      	adds	r7, #20
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b087      	sub	sp, #28
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	3301      	adds	r3, #1
 8007b5a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007b62:	8a3b      	ldrh	r3, [r7, #16]
 8007b64:	021b      	lsls	r3, r3, #8
 8007b66:	b21a      	sxth	r2, r3
 8007b68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	b21b      	sxth	r3, r3
 8007b70:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007b72:	89fb      	ldrh	r3, [r7, #14]
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	371c      	adds	r7, #28
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b96:	2b40      	cmp	r3, #64	; 0x40
 8007b98:	d005      	beq.n	8007ba6 <USBD_StdDevReq+0x26>
 8007b9a:	2b40      	cmp	r3, #64	; 0x40
 8007b9c:	d857      	bhi.n	8007c4e <USBD_StdDevReq+0xce>
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00f      	beq.n	8007bc2 <USBD_StdDevReq+0x42>
 8007ba2:	2b20      	cmp	r3, #32
 8007ba4:	d153      	bne.n	8007c4e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	32ae      	adds	r2, #174	; 0xae
 8007bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	6839      	ldr	r1, [r7, #0]
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	4798      	blx	r3
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8007bc0:	e04a      	b.n	8007c58 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	785b      	ldrb	r3, [r3, #1]
 8007bc6:	2b09      	cmp	r3, #9
 8007bc8:	d83b      	bhi.n	8007c42 <USBD_StdDevReq+0xc2>
 8007bca:	a201      	add	r2, pc, #4	; (adr r2, 8007bd0 <USBD_StdDevReq+0x50>)
 8007bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd0:	08007c25 	.word	0x08007c25
 8007bd4:	08007c39 	.word	0x08007c39
 8007bd8:	08007c43 	.word	0x08007c43
 8007bdc:	08007c2f 	.word	0x08007c2f
 8007be0:	08007c43 	.word	0x08007c43
 8007be4:	08007c03 	.word	0x08007c03
 8007be8:	08007bf9 	.word	0x08007bf9
 8007bec:	08007c43 	.word	0x08007c43
 8007bf0:	08007c1b 	.word	0x08007c1b
 8007bf4:	08007c0d 	.word	0x08007c0d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007bf8:	6839      	ldr	r1, [r7, #0]
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 fa3c 	bl	8008078 <USBD_GetDescriptor>
          break;
 8007c00:	e024      	b.n	8007c4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007c02:	6839      	ldr	r1, [r7, #0]
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 fba1 	bl	800834c <USBD_SetAddress>
          break;
 8007c0a:	e01f      	b.n	8007c4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007c0c:	6839      	ldr	r1, [r7, #0]
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 fbe0 	bl	80083d4 <USBD_SetConfig>
 8007c14:	4603      	mov	r3, r0
 8007c16:	73fb      	strb	r3, [r7, #15]
          break;
 8007c18:	e018      	b.n	8007c4c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007c1a:	6839      	ldr	r1, [r7, #0]
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 fc83 	bl	8008528 <USBD_GetConfig>
          break;
 8007c22:	e013      	b.n	8007c4c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007c24:	6839      	ldr	r1, [r7, #0]
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fcb4 	bl	8008594 <USBD_GetStatus>
          break;
 8007c2c:	e00e      	b.n	8007c4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007c2e:	6839      	ldr	r1, [r7, #0]
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 fce3 	bl	80085fc <USBD_SetFeature>
          break;
 8007c36:	e009      	b.n	8007c4c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007c38:	6839      	ldr	r1, [r7, #0]
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 fd07 	bl	800864e <USBD_ClrFeature>
          break;
 8007c40:	e004      	b.n	8007c4c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007c42:	6839      	ldr	r1, [r7, #0]
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 fd5e 	bl	8008706 <USBD_CtlError>
          break;
 8007c4a:	bf00      	nop
      }
      break;
 8007c4c:	e004      	b.n	8007c58 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007c4e:	6839      	ldr	r1, [r7, #0]
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 fd58 	bl	8008706 <USBD_CtlError>
      break;
 8007c56:	bf00      	nop
  }

  return ret;
 8007c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop

08007c64 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c7a:	2b40      	cmp	r3, #64	; 0x40
 8007c7c:	d005      	beq.n	8007c8a <USBD_StdItfReq+0x26>
 8007c7e:	2b40      	cmp	r3, #64	; 0x40
 8007c80:	d852      	bhi.n	8007d28 <USBD_StdItfReq+0xc4>
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d001      	beq.n	8007c8a <USBD_StdItfReq+0x26>
 8007c86:	2b20      	cmp	r3, #32
 8007c88:	d14e      	bne.n	8007d28 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	3b01      	subs	r3, #1
 8007c94:	2b02      	cmp	r3, #2
 8007c96:	d840      	bhi.n	8007d1a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	889b      	ldrh	r3, [r3, #4]
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d836      	bhi.n	8007d10 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	889b      	ldrh	r3, [r3, #4]
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	4619      	mov	r1, r3
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f7ff fed9 	bl	8007a62 <USBD_CoreFindIF>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007cb4:	7bbb      	ldrb	r3, [r7, #14]
 8007cb6:	2bff      	cmp	r3, #255	; 0xff
 8007cb8:	d01d      	beq.n	8007cf6 <USBD_StdItfReq+0x92>
 8007cba:	7bbb      	ldrb	r3, [r7, #14]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d11a      	bne.n	8007cf6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007cc0:	7bba      	ldrb	r2, [r7, #14]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	32ae      	adds	r2, #174	; 0xae
 8007cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00f      	beq.n	8007cf0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007cd0:	7bba      	ldrb	r2, [r7, #14]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007cd8:	7bba      	ldrb	r2, [r7, #14]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	32ae      	adds	r2, #174	; 0xae
 8007cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	6839      	ldr	r1, [r7, #0]
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	4798      	blx	r3
 8007cea:	4603      	mov	r3, r0
 8007cec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007cee:	e004      	b.n	8007cfa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007cf4:	e001      	b.n	8007cfa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007cf6:	2303      	movs	r3, #3
 8007cf8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	88db      	ldrh	r3, [r3, #6]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d110      	bne.n	8007d24 <USBD_StdItfReq+0xc0>
 8007d02:	7bfb      	ldrb	r3, [r7, #15]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d10d      	bne.n	8007d24 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 fdc7 	bl	800889c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007d0e:	e009      	b.n	8007d24 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007d10:	6839      	ldr	r1, [r7, #0]
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 fcf7 	bl	8008706 <USBD_CtlError>
          break;
 8007d18:	e004      	b.n	8007d24 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007d1a:	6839      	ldr	r1, [r7, #0]
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 fcf2 	bl	8008706 <USBD_CtlError>
          break;
 8007d22:	e000      	b.n	8007d26 <USBD_StdItfReq+0xc2>
          break;
 8007d24:	bf00      	nop
      }
      break;
 8007d26:	e004      	b.n	8007d32 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007d28:	6839      	ldr	r1, [r7, #0]
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fceb 	bl	8008706 <USBD_CtlError>
      break;
 8007d30:	bf00      	nop
  }

  return ret;
 8007d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d46:	2300      	movs	r3, #0
 8007d48:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	889b      	ldrh	r3, [r3, #4]
 8007d4e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d58:	2b40      	cmp	r3, #64	; 0x40
 8007d5a:	d007      	beq.n	8007d6c <USBD_StdEPReq+0x30>
 8007d5c:	2b40      	cmp	r3, #64	; 0x40
 8007d5e:	f200 817f 	bhi.w	8008060 <USBD_StdEPReq+0x324>
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d02a      	beq.n	8007dbc <USBD_StdEPReq+0x80>
 8007d66:	2b20      	cmp	r3, #32
 8007d68:	f040 817a 	bne.w	8008060 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007d6c:	7bbb      	ldrb	r3, [r7, #14]
 8007d6e:	4619      	mov	r1, r3
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f7ff fe83 	bl	8007a7c <USBD_CoreFindEP>
 8007d76:	4603      	mov	r3, r0
 8007d78:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d7a:	7b7b      	ldrb	r3, [r7, #13]
 8007d7c:	2bff      	cmp	r3, #255	; 0xff
 8007d7e:	f000 8174 	beq.w	800806a <USBD_StdEPReq+0x32e>
 8007d82:	7b7b      	ldrb	r3, [r7, #13]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f040 8170 	bne.w	800806a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007d8a:	7b7a      	ldrb	r2, [r7, #13]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007d92:	7b7a      	ldrb	r2, [r7, #13]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	32ae      	adds	r2, #174	; 0xae
 8007d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	f000 8163 	beq.w	800806a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007da4:	7b7a      	ldrb	r2, [r7, #13]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	32ae      	adds	r2, #174	; 0xae
 8007daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	6839      	ldr	r1, [r7, #0]
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	4798      	blx	r3
 8007db6:	4603      	mov	r3, r0
 8007db8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007dba:	e156      	b.n	800806a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	785b      	ldrb	r3, [r3, #1]
 8007dc0:	2b03      	cmp	r3, #3
 8007dc2:	d008      	beq.n	8007dd6 <USBD_StdEPReq+0x9a>
 8007dc4:	2b03      	cmp	r3, #3
 8007dc6:	f300 8145 	bgt.w	8008054 <USBD_StdEPReq+0x318>
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f000 809b 	beq.w	8007f06 <USBD_StdEPReq+0x1ca>
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d03c      	beq.n	8007e4e <USBD_StdEPReq+0x112>
 8007dd4:	e13e      	b.n	8008054 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d002      	beq.n	8007de8 <USBD_StdEPReq+0xac>
 8007de2:	2b03      	cmp	r3, #3
 8007de4:	d016      	beq.n	8007e14 <USBD_StdEPReq+0xd8>
 8007de6:	e02c      	b.n	8007e42 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007de8:	7bbb      	ldrb	r3, [r7, #14]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00d      	beq.n	8007e0a <USBD_StdEPReq+0xce>
 8007dee:	7bbb      	ldrb	r3, [r7, #14]
 8007df0:	2b80      	cmp	r3, #128	; 0x80
 8007df2:	d00a      	beq.n	8007e0a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007df4:	7bbb      	ldrb	r3, [r7, #14]
 8007df6:	4619      	mov	r1, r3
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f001 f8eb 	bl	8008fd4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007dfe:	2180      	movs	r1, #128	; 0x80
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f001 f8e7 	bl	8008fd4 <USBD_LL_StallEP>
 8007e06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e08:	e020      	b.n	8007e4c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007e0a:	6839      	ldr	r1, [r7, #0]
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 fc7a 	bl	8008706 <USBD_CtlError>
              break;
 8007e12:	e01b      	b.n	8007e4c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	885b      	ldrh	r3, [r3, #2]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10e      	bne.n	8007e3a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007e1c:	7bbb      	ldrb	r3, [r7, #14]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00b      	beq.n	8007e3a <USBD_StdEPReq+0xfe>
 8007e22:	7bbb      	ldrb	r3, [r7, #14]
 8007e24:	2b80      	cmp	r3, #128	; 0x80
 8007e26:	d008      	beq.n	8007e3a <USBD_StdEPReq+0xfe>
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	88db      	ldrh	r3, [r3, #6]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d104      	bne.n	8007e3a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e30:	7bbb      	ldrb	r3, [r7, #14]
 8007e32:	4619      	mov	r1, r3
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f001 f8cd 	bl	8008fd4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 fd2e 	bl	800889c <USBD_CtlSendStatus>

              break;
 8007e40:	e004      	b.n	8007e4c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007e42:	6839      	ldr	r1, [r7, #0]
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 fc5e 	bl	8008706 <USBD_CtlError>
              break;
 8007e4a:	bf00      	nop
          }
          break;
 8007e4c:	e107      	b.n	800805e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	2b02      	cmp	r3, #2
 8007e58:	d002      	beq.n	8007e60 <USBD_StdEPReq+0x124>
 8007e5a:	2b03      	cmp	r3, #3
 8007e5c:	d016      	beq.n	8007e8c <USBD_StdEPReq+0x150>
 8007e5e:	e04b      	b.n	8007ef8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e60:	7bbb      	ldrb	r3, [r7, #14]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00d      	beq.n	8007e82 <USBD_StdEPReq+0x146>
 8007e66:	7bbb      	ldrb	r3, [r7, #14]
 8007e68:	2b80      	cmp	r3, #128	; 0x80
 8007e6a:	d00a      	beq.n	8007e82 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e6c:	7bbb      	ldrb	r3, [r7, #14]
 8007e6e:	4619      	mov	r1, r3
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f001 f8af 	bl	8008fd4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e76:	2180      	movs	r1, #128	; 0x80
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f001 f8ab 	bl	8008fd4 <USBD_LL_StallEP>
 8007e7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e80:	e040      	b.n	8007f04 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007e82:	6839      	ldr	r1, [r7, #0]
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 fc3e 	bl	8008706 <USBD_CtlError>
              break;
 8007e8a:	e03b      	b.n	8007f04 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	885b      	ldrh	r3, [r3, #2]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d136      	bne.n	8007f02 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007e94:	7bbb      	ldrb	r3, [r7, #14]
 8007e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d004      	beq.n	8007ea8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007e9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f001 f8b5 	bl	8009012 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 fcf7 	bl	800889c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007eae:	7bbb      	ldrb	r3, [r7, #14]
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f7ff fde2 	bl	8007a7c <USBD_CoreFindEP>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ebc:	7b7b      	ldrb	r3, [r7, #13]
 8007ebe:	2bff      	cmp	r3, #255	; 0xff
 8007ec0:	d01f      	beq.n	8007f02 <USBD_StdEPReq+0x1c6>
 8007ec2:	7b7b      	ldrb	r3, [r7, #13]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d11c      	bne.n	8007f02 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007ec8:	7b7a      	ldrb	r2, [r7, #13]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007ed0:	7b7a      	ldrb	r2, [r7, #13]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	32ae      	adds	r2, #174	; 0xae
 8007ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d010      	beq.n	8007f02 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007ee0:	7b7a      	ldrb	r2, [r7, #13]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	32ae      	adds	r2, #174	; 0xae
 8007ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	6839      	ldr	r1, [r7, #0]
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	4798      	blx	r3
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007ef6:	e004      	b.n	8007f02 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007ef8:	6839      	ldr	r1, [r7, #0]
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 fc03 	bl	8008706 <USBD_CtlError>
              break;
 8007f00:	e000      	b.n	8007f04 <USBD_StdEPReq+0x1c8>
              break;
 8007f02:	bf00      	nop
          }
          break;
 8007f04:	e0ab      	b.n	800805e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d002      	beq.n	8007f18 <USBD_StdEPReq+0x1dc>
 8007f12:	2b03      	cmp	r3, #3
 8007f14:	d032      	beq.n	8007f7c <USBD_StdEPReq+0x240>
 8007f16:	e097      	b.n	8008048 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f18:	7bbb      	ldrb	r3, [r7, #14]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d007      	beq.n	8007f2e <USBD_StdEPReq+0x1f2>
 8007f1e:	7bbb      	ldrb	r3, [r7, #14]
 8007f20:	2b80      	cmp	r3, #128	; 0x80
 8007f22:	d004      	beq.n	8007f2e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007f24:	6839      	ldr	r1, [r7, #0]
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 fbed 	bl	8008706 <USBD_CtlError>
                break;
 8007f2c:	e091      	b.n	8008052 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	da0b      	bge.n	8007f4e <USBD_StdEPReq+0x212>
 8007f36:	7bbb      	ldrb	r3, [r7, #14]
 8007f38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	4413      	add	r3, r2
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	3310      	adds	r3, #16
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	4413      	add	r3, r2
 8007f4a:	3304      	adds	r3, #4
 8007f4c:	e00b      	b.n	8007f66 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f4e:	7bbb      	ldrb	r3, [r7, #14]
 8007f50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f54:	4613      	mov	r3, r2
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	4413      	add	r3, r2
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	4413      	add	r3, r2
 8007f64:	3304      	adds	r3, #4
 8007f66:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	2202      	movs	r2, #2
 8007f72:	4619      	mov	r1, r3
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 fc37 	bl	80087e8 <USBD_CtlSendData>
              break;
 8007f7a:	e06a      	b.n	8008052 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007f7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	da11      	bge.n	8007fa8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007f84:	7bbb      	ldrb	r3, [r7, #14]
 8007f86:	f003 020f 	and.w	r2, r3, #15
 8007f8a:	6879      	ldr	r1, [r7, #4]
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	4413      	add	r3, r2
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	440b      	add	r3, r1
 8007f96:	3324      	adds	r3, #36	; 0x24
 8007f98:	881b      	ldrh	r3, [r3, #0]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d117      	bne.n	8007fce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007f9e:	6839      	ldr	r1, [r7, #0]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fbb0 	bl	8008706 <USBD_CtlError>
                  break;
 8007fa6:	e054      	b.n	8008052 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007fa8:	7bbb      	ldrb	r3, [r7, #14]
 8007faa:	f003 020f 	and.w	r2, r3, #15
 8007fae:	6879      	ldr	r1, [r7, #4]
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	4413      	add	r3, r2
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	440b      	add	r3, r1
 8007fba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007fbe:	881b      	ldrh	r3, [r3, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d104      	bne.n	8007fce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007fc4:	6839      	ldr	r1, [r7, #0]
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 fb9d 	bl	8008706 <USBD_CtlError>
                  break;
 8007fcc:	e041      	b.n	8008052 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	da0b      	bge.n	8007fee <USBD_StdEPReq+0x2b2>
 8007fd6:	7bbb      	ldrb	r3, [r7, #14]
 8007fd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fdc:	4613      	mov	r3, r2
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4413      	add	r3, r2
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	3310      	adds	r3, #16
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	4413      	add	r3, r2
 8007fea:	3304      	adds	r3, #4
 8007fec:	e00b      	b.n	8008006 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007fee:	7bbb      	ldrb	r3, [r7, #14]
 8007ff0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	4413      	add	r3, r2
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	4413      	add	r3, r2
 8008004:	3304      	adds	r3, #4
 8008006:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008008:	7bbb      	ldrb	r3, [r7, #14]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d002      	beq.n	8008014 <USBD_StdEPReq+0x2d8>
 800800e:	7bbb      	ldrb	r3, [r7, #14]
 8008010:	2b80      	cmp	r3, #128	; 0x80
 8008012:	d103      	bne.n	800801c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	2200      	movs	r2, #0
 8008018:	601a      	str	r2, [r3, #0]
 800801a:	e00e      	b.n	800803a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800801c:	7bbb      	ldrb	r3, [r7, #14]
 800801e:	4619      	mov	r1, r3
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f001 f815 	bl	8009050 <USBD_LL_IsStallEP>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d003      	beq.n	8008034 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	2201      	movs	r2, #1
 8008030:	601a      	str	r2, [r3, #0]
 8008032:	e002      	b.n	800803a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	2200      	movs	r2, #0
 8008038:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	2202      	movs	r2, #2
 800803e:	4619      	mov	r1, r3
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 fbd1 	bl	80087e8 <USBD_CtlSendData>
              break;
 8008046:	e004      	b.n	8008052 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008048:	6839      	ldr	r1, [r7, #0]
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 fb5b 	bl	8008706 <USBD_CtlError>
              break;
 8008050:	bf00      	nop
          }
          break;
 8008052:	e004      	b.n	800805e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008054:	6839      	ldr	r1, [r7, #0]
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 fb55 	bl	8008706 <USBD_CtlError>
          break;
 800805c:	bf00      	nop
      }
      break;
 800805e:	e005      	b.n	800806c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008060:	6839      	ldr	r1, [r7, #0]
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fb4f 	bl	8008706 <USBD_CtlError>
      break;
 8008068:	e000      	b.n	800806c <USBD_StdEPReq+0x330>
      break;
 800806a:	bf00      	nop
  }

  return ret;
 800806c:	7bfb      	ldrb	r3, [r7, #15]
}
 800806e:	4618      	mov	r0, r3
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
	...

08008078 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008082:	2300      	movs	r3, #0
 8008084:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008086:	2300      	movs	r3, #0
 8008088:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800808a:	2300      	movs	r3, #0
 800808c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	885b      	ldrh	r3, [r3, #2]
 8008092:	0a1b      	lsrs	r3, r3, #8
 8008094:	b29b      	uxth	r3, r3
 8008096:	3b01      	subs	r3, #1
 8008098:	2b06      	cmp	r3, #6
 800809a:	f200 8128 	bhi.w	80082ee <USBD_GetDescriptor+0x276>
 800809e:	a201      	add	r2, pc, #4	; (adr r2, 80080a4 <USBD_GetDescriptor+0x2c>)
 80080a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a4:	080080c1 	.word	0x080080c1
 80080a8:	080080d9 	.word	0x080080d9
 80080ac:	08008119 	.word	0x08008119
 80080b0:	080082ef 	.word	0x080082ef
 80080b4:	080082ef 	.word	0x080082ef
 80080b8:	0800828f 	.word	0x0800828f
 80080bc:	080082bb 	.word	0x080082bb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	7c12      	ldrb	r2, [r2, #16]
 80080cc:	f107 0108 	add.w	r1, r7, #8
 80080d0:	4610      	mov	r0, r2
 80080d2:	4798      	blx	r3
 80080d4:	60f8      	str	r0, [r7, #12]
      break;
 80080d6:	e112      	b.n	80082fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	7c1b      	ldrb	r3, [r3, #16]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d10d      	bne.n	80080fc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e8:	f107 0208 	add.w	r2, r7, #8
 80080ec:	4610      	mov	r0, r2
 80080ee:	4798      	blx	r3
 80080f0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	3301      	adds	r3, #1
 80080f6:	2202      	movs	r2, #2
 80080f8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80080fa:	e100      	b.n	80082fe <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008104:	f107 0208 	add.w	r2, r7, #8
 8008108:	4610      	mov	r0, r2
 800810a:	4798      	blx	r3
 800810c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	3301      	adds	r3, #1
 8008112:	2202      	movs	r2, #2
 8008114:	701a      	strb	r2, [r3, #0]
      break;
 8008116:	e0f2      	b.n	80082fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	885b      	ldrh	r3, [r3, #2]
 800811c:	b2db      	uxtb	r3, r3
 800811e:	2b05      	cmp	r3, #5
 8008120:	f200 80ac 	bhi.w	800827c <USBD_GetDescriptor+0x204>
 8008124:	a201      	add	r2, pc, #4	; (adr r2, 800812c <USBD_GetDescriptor+0xb4>)
 8008126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812a:	bf00      	nop
 800812c:	08008145 	.word	0x08008145
 8008130:	08008179 	.word	0x08008179
 8008134:	080081ad 	.word	0x080081ad
 8008138:	080081e1 	.word	0x080081e1
 800813c:	08008215 	.word	0x08008215
 8008140:	08008249 	.word	0x08008249
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00b      	beq.n	8008168 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	7c12      	ldrb	r2, [r2, #16]
 800815c:	f107 0108 	add.w	r1, r7, #8
 8008160:	4610      	mov	r0, r2
 8008162:	4798      	blx	r3
 8008164:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008166:	e091      	b.n	800828c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008168:	6839      	ldr	r1, [r7, #0]
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 facb 	bl	8008706 <USBD_CtlError>
            err++;
 8008170:	7afb      	ldrb	r3, [r7, #11]
 8008172:	3301      	adds	r3, #1
 8008174:	72fb      	strb	r3, [r7, #11]
          break;
 8008176:	e089      	b.n	800828c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d00b      	beq.n	800819c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	7c12      	ldrb	r2, [r2, #16]
 8008190:	f107 0108 	add.w	r1, r7, #8
 8008194:	4610      	mov	r0, r2
 8008196:	4798      	blx	r3
 8008198:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800819a:	e077      	b.n	800828c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800819c:	6839      	ldr	r1, [r7, #0]
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 fab1 	bl	8008706 <USBD_CtlError>
            err++;
 80081a4:	7afb      	ldrb	r3, [r7, #11]
 80081a6:	3301      	adds	r3, #1
 80081a8:	72fb      	strb	r3, [r7, #11]
          break;
 80081aa:	e06f      	b.n	800828c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d00b      	beq.n	80081d0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081be:	68db      	ldr	r3, [r3, #12]
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	7c12      	ldrb	r2, [r2, #16]
 80081c4:	f107 0108 	add.w	r1, r7, #8
 80081c8:	4610      	mov	r0, r2
 80081ca:	4798      	blx	r3
 80081cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081ce:	e05d      	b.n	800828c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081d0:	6839      	ldr	r1, [r7, #0]
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 fa97 	bl	8008706 <USBD_CtlError>
            err++;
 80081d8:	7afb      	ldrb	r3, [r7, #11]
 80081da:	3301      	adds	r3, #1
 80081dc:	72fb      	strb	r3, [r7, #11]
          break;
 80081de:	e055      	b.n	800828c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081e6:	691b      	ldr	r3, [r3, #16]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d00b      	beq.n	8008204 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081f2:	691b      	ldr	r3, [r3, #16]
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	7c12      	ldrb	r2, [r2, #16]
 80081f8:	f107 0108 	add.w	r1, r7, #8
 80081fc:	4610      	mov	r0, r2
 80081fe:	4798      	blx	r3
 8008200:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008202:	e043      	b.n	800828c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008204:	6839      	ldr	r1, [r7, #0]
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 fa7d 	bl	8008706 <USBD_CtlError>
            err++;
 800820c:	7afb      	ldrb	r3, [r7, #11]
 800820e:	3301      	adds	r3, #1
 8008210:	72fb      	strb	r3, [r7, #11]
          break;
 8008212:	e03b      	b.n	800828c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800821a:	695b      	ldr	r3, [r3, #20]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d00b      	beq.n	8008238 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008226:	695b      	ldr	r3, [r3, #20]
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	7c12      	ldrb	r2, [r2, #16]
 800822c:	f107 0108 	add.w	r1, r7, #8
 8008230:	4610      	mov	r0, r2
 8008232:	4798      	blx	r3
 8008234:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008236:	e029      	b.n	800828c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008238:	6839      	ldr	r1, [r7, #0]
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fa63 	bl	8008706 <USBD_CtlError>
            err++;
 8008240:	7afb      	ldrb	r3, [r7, #11]
 8008242:	3301      	adds	r3, #1
 8008244:	72fb      	strb	r3, [r7, #11]
          break;
 8008246:	e021      	b.n	800828c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800824e:	699b      	ldr	r3, [r3, #24]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00b      	beq.n	800826c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800825a:	699b      	ldr	r3, [r3, #24]
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	7c12      	ldrb	r2, [r2, #16]
 8008260:	f107 0108 	add.w	r1, r7, #8
 8008264:	4610      	mov	r0, r2
 8008266:	4798      	blx	r3
 8008268:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800826a:	e00f      	b.n	800828c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800826c:	6839      	ldr	r1, [r7, #0]
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fa49 	bl	8008706 <USBD_CtlError>
            err++;
 8008274:	7afb      	ldrb	r3, [r7, #11]
 8008276:	3301      	adds	r3, #1
 8008278:	72fb      	strb	r3, [r7, #11]
          break;
 800827a:	e007      	b.n	800828c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800827c:	6839      	ldr	r1, [r7, #0]
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 fa41 	bl	8008706 <USBD_CtlError>
          err++;
 8008284:	7afb      	ldrb	r3, [r7, #11]
 8008286:	3301      	adds	r3, #1
 8008288:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800828a:	bf00      	nop
      }
      break;
 800828c:	e037      	b.n	80082fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	7c1b      	ldrb	r3, [r3, #16]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d109      	bne.n	80082aa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800829c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800829e:	f107 0208 	add.w	r2, r7, #8
 80082a2:	4610      	mov	r0, r2
 80082a4:	4798      	blx	r3
 80082a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082a8:	e029      	b.n	80082fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80082aa:	6839      	ldr	r1, [r7, #0]
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 fa2a 	bl	8008706 <USBD_CtlError>
        err++;
 80082b2:	7afb      	ldrb	r3, [r7, #11]
 80082b4:	3301      	adds	r3, #1
 80082b6:	72fb      	strb	r3, [r7, #11]
      break;
 80082b8:	e021      	b.n	80082fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	7c1b      	ldrb	r3, [r3, #16]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d10d      	bne.n	80082de <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ca:	f107 0208 	add.w	r2, r7, #8
 80082ce:	4610      	mov	r0, r2
 80082d0:	4798      	blx	r3
 80082d2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	3301      	adds	r3, #1
 80082d8:	2207      	movs	r2, #7
 80082da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082dc:	e00f      	b.n	80082fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80082de:	6839      	ldr	r1, [r7, #0]
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 fa10 	bl	8008706 <USBD_CtlError>
        err++;
 80082e6:	7afb      	ldrb	r3, [r7, #11]
 80082e8:	3301      	adds	r3, #1
 80082ea:	72fb      	strb	r3, [r7, #11]
      break;
 80082ec:	e007      	b.n	80082fe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80082ee:	6839      	ldr	r1, [r7, #0]
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 fa08 	bl	8008706 <USBD_CtlError>
      err++;
 80082f6:	7afb      	ldrb	r3, [r7, #11]
 80082f8:	3301      	adds	r3, #1
 80082fa:	72fb      	strb	r3, [r7, #11]
      break;
 80082fc:	bf00      	nop
  }

  if (err != 0U)
 80082fe:	7afb      	ldrb	r3, [r7, #11]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d11e      	bne.n	8008342 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	88db      	ldrh	r3, [r3, #6]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d016      	beq.n	800833a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800830c:	893b      	ldrh	r3, [r7, #8]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00e      	beq.n	8008330 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	88da      	ldrh	r2, [r3, #6]
 8008316:	893b      	ldrh	r3, [r7, #8]
 8008318:	4293      	cmp	r3, r2
 800831a:	bf28      	it	cs
 800831c:	4613      	movcs	r3, r2
 800831e:	b29b      	uxth	r3, r3
 8008320:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008322:	893b      	ldrh	r3, [r7, #8]
 8008324:	461a      	mov	r2, r3
 8008326:	68f9      	ldr	r1, [r7, #12]
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fa5d 	bl	80087e8 <USBD_CtlSendData>
 800832e:	e009      	b.n	8008344 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008330:	6839      	ldr	r1, [r7, #0]
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 f9e7 	bl	8008706 <USBD_CtlError>
 8008338:	e004      	b.n	8008344 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 faae 	bl	800889c <USBD_CtlSendStatus>
 8008340:	e000      	b.n	8008344 <USBD_GetDescriptor+0x2cc>
    return;
 8008342:	bf00      	nop
  }
}
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop

0800834c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	889b      	ldrh	r3, [r3, #4]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d131      	bne.n	80083c2 <USBD_SetAddress+0x76>
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	88db      	ldrh	r3, [r3, #6]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d12d      	bne.n	80083c2 <USBD_SetAddress+0x76>
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	885b      	ldrh	r3, [r3, #2]
 800836a:	2b7f      	cmp	r3, #127	; 0x7f
 800836c:	d829      	bhi.n	80083c2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	885b      	ldrh	r3, [r3, #2]
 8008372:	b2db      	uxtb	r3, r3
 8008374:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008378:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008380:	b2db      	uxtb	r3, r3
 8008382:	2b03      	cmp	r3, #3
 8008384:	d104      	bne.n	8008390 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008386:	6839      	ldr	r1, [r7, #0]
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 f9bc 	bl	8008706 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800838e:	e01d      	b.n	80083cc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	7bfa      	ldrb	r2, [r7, #15]
 8008394:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008398:	7bfb      	ldrb	r3, [r7, #15]
 800839a:	4619      	mov	r1, r3
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 fe83 	bl	80090a8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fa7a 	bl	800889c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80083a8:	7bfb      	ldrb	r3, [r7, #15]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d004      	beq.n	80083b8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2202      	movs	r2, #2
 80083b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083b6:	e009      	b.n	80083cc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083c0:	e004      	b.n	80083cc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80083c2:	6839      	ldr	r1, [r7, #0]
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 f99e 	bl	8008706 <USBD_CtlError>
  }
}
 80083ca:	bf00      	nop
 80083cc:	bf00      	nop
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083de:	2300      	movs	r3, #0
 80083e0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	885b      	ldrh	r3, [r3, #2]
 80083e6:	b2da      	uxtb	r2, r3
 80083e8:	4b4e      	ldr	r3, [pc, #312]	; (8008524 <USBD_SetConfig+0x150>)
 80083ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80083ec:	4b4d      	ldr	r3, [pc, #308]	; (8008524 <USBD_SetConfig+0x150>)
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d905      	bls.n	8008400 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80083f4:	6839      	ldr	r1, [r7, #0]
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 f985 	bl	8008706 <USBD_CtlError>
    return USBD_FAIL;
 80083fc:	2303      	movs	r3, #3
 80083fe:	e08c      	b.n	800851a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008406:	b2db      	uxtb	r3, r3
 8008408:	2b02      	cmp	r3, #2
 800840a:	d002      	beq.n	8008412 <USBD_SetConfig+0x3e>
 800840c:	2b03      	cmp	r3, #3
 800840e:	d029      	beq.n	8008464 <USBD_SetConfig+0x90>
 8008410:	e075      	b.n	80084fe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008412:	4b44      	ldr	r3, [pc, #272]	; (8008524 <USBD_SetConfig+0x150>)
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d020      	beq.n	800845c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800841a:	4b42      	ldr	r3, [pc, #264]	; (8008524 <USBD_SetConfig+0x150>)
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	461a      	mov	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008424:	4b3f      	ldr	r3, [pc, #252]	; (8008524 <USBD_SetConfig+0x150>)
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	4619      	mov	r1, r3
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f7fe ffe1 	bl	80073f2 <USBD_SetClassConfig>
 8008430:	4603      	mov	r3, r0
 8008432:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008434:	7bfb      	ldrb	r3, [r7, #15]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d008      	beq.n	800844c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800843a:	6839      	ldr	r1, [r7, #0]
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 f962 	bl	8008706 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2202      	movs	r2, #2
 8008446:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800844a:	e065      	b.n	8008518 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 fa25 	bl	800889c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2203      	movs	r2, #3
 8008456:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800845a:	e05d      	b.n	8008518 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 fa1d 	bl	800889c <USBD_CtlSendStatus>
      break;
 8008462:	e059      	b.n	8008518 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008464:	4b2f      	ldr	r3, [pc, #188]	; (8008524 <USBD_SetConfig+0x150>)
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d112      	bne.n	8008492 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2202      	movs	r2, #2
 8008470:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008474:	4b2b      	ldr	r3, [pc, #172]	; (8008524 <USBD_SetConfig+0x150>)
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	461a      	mov	r2, r3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800847e:	4b29      	ldr	r3, [pc, #164]	; (8008524 <USBD_SetConfig+0x150>)
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	4619      	mov	r1, r3
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f7fe ffd0 	bl	800742a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 fa06 	bl	800889c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008490:	e042      	b.n	8008518 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008492:	4b24      	ldr	r3, [pc, #144]	; (8008524 <USBD_SetConfig+0x150>)
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	461a      	mov	r2, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	429a      	cmp	r2, r3
 800849e:	d02a      	beq.n	80084f6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	4619      	mov	r1, r3
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f7fe ffbe 	bl	800742a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80084ae:	4b1d      	ldr	r3, [pc, #116]	; (8008524 <USBD_SetConfig+0x150>)
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	461a      	mov	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80084b8:	4b1a      	ldr	r3, [pc, #104]	; (8008524 <USBD_SetConfig+0x150>)
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	4619      	mov	r1, r3
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f7fe ff97 	bl	80073f2 <USBD_SetClassConfig>
 80084c4:	4603      	mov	r3, r0
 80084c6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80084c8:	7bfb      	ldrb	r3, [r7, #15]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00f      	beq.n	80084ee <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80084ce:	6839      	ldr	r1, [r7, #0]
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 f918 	bl	8008706 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	4619      	mov	r1, r3
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f7fe ffa3 	bl	800742a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2202      	movs	r2, #2
 80084e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80084ec:	e014      	b.n	8008518 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 f9d4 	bl	800889c <USBD_CtlSendStatus>
      break;
 80084f4:	e010      	b.n	8008518 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 f9d0 	bl	800889c <USBD_CtlSendStatus>
      break;
 80084fc:	e00c      	b.n	8008518 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 f900 	bl	8008706 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008506:	4b07      	ldr	r3, [pc, #28]	; (8008524 <USBD_SetConfig+0x150>)
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	4619      	mov	r1, r3
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f7fe ff8c 	bl	800742a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008512:	2303      	movs	r3, #3
 8008514:	73fb      	strb	r3, [r7, #15]
      break;
 8008516:	bf00      	nop
  }

  return ret;
 8008518:	7bfb      	ldrb	r3, [r7, #15]
}
 800851a:	4618      	mov	r0, r3
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	200003e4 	.word	0x200003e4

08008528 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	88db      	ldrh	r3, [r3, #6]
 8008536:	2b01      	cmp	r3, #1
 8008538:	d004      	beq.n	8008544 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800853a:	6839      	ldr	r1, [r7, #0]
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 f8e2 	bl	8008706 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008542:	e023      	b.n	800858c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800854a:	b2db      	uxtb	r3, r3
 800854c:	2b02      	cmp	r3, #2
 800854e:	dc02      	bgt.n	8008556 <USBD_GetConfig+0x2e>
 8008550:	2b00      	cmp	r3, #0
 8008552:	dc03      	bgt.n	800855c <USBD_GetConfig+0x34>
 8008554:	e015      	b.n	8008582 <USBD_GetConfig+0x5a>
 8008556:	2b03      	cmp	r3, #3
 8008558:	d00b      	beq.n	8008572 <USBD_GetConfig+0x4a>
 800855a:	e012      	b.n	8008582 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	3308      	adds	r3, #8
 8008566:	2201      	movs	r2, #1
 8008568:	4619      	mov	r1, r3
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f93c 	bl	80087e8 <USBD_CtlSendData>
        break;
 8008570:	e00c      	b.n	800858c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	3304      	adds	r3, #4
 8008576:	2201      	movs	r2, #1
 8008578:	4619      	mov	r1, r3
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f934 	bl	80087e8 <USBD_CtlSendData>
        break;
 8008580:	e004      	b.n	800858c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008582:	6839      	ldr	r1, [r7, #0]
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 f8be 	bl	8008706 <USBD_CtlError>
        break;
 800858a:	bf00      	nop
}
 800858c:	bf00      	nop
 800858e:	3708      	adds	r7, #8
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	3b01      	subs	r3, #1
 80085a8:	2b02      	cmp	r3, #2
 80085aa:	d81e      	bhi.n	80085ea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	88db      	ldrh	r3, [r3, #6]
 80085b0:	2b02      	cmp	r3, #2
 80085b2:	d004      	beq.n	80085be <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80085b4:	6839      	ldr	r1, [r7, #0]
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 f8a5 	bl	8008706 <USBD_CtlError>
        break;
 80085bc:	e01a      	b.n	80085f4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2201      	movs	r2, #1
 80085c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d005      	beq.n	80085da <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	f043 0202 	orr.w	r2, r3, #2
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	330c      	adds	r3, #12
 80085de:	2202      	movs	r2, #2
 80085e0:	4619      	mov	r1, r3
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 f900 	bl	80087e8 <USBD_CtlSendData>
      break;
 80085e8:	e004      	b.n	80085f4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80085ea:	6839      	ldr	r1, [r7, #0]
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 f88a 	bl	8008706 <USBD_CtlError>
      break;
 80085f2:	bf00      	nop
  }
}
 80085f4:	bf00      	nop
 80085f6:	3708      	adds	r7, #8
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	885b      	ldrh	r3, [r3, #2]
 800860a:	2b01      	cmp	r3, #1
 800860c:	d107      	bne.n	800861e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2201      	movs	r2, #1
 8008612:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 f940 	bl	800889c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800861c:	e013      	b.n	8008646 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	885b      	ldrh	r3, [r3, #2]
 8008622:	2b02      	cmp	r3, #2
 8008624:	d10b      	bne.n	800863e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	889b      	ldrh	r3, [r3, #4]
 800862a:	0a1b      	lsrs	r3, r3, #8
 800862c:	b29b      	uxth	r3, r3
 800862e:	b2da      	uxtb	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f930 	bl	800889c <USBD_CtlSendStatus>
}
 800863c:	e003      	b.n	8008646 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800863e:	6839      	ldr	r1, [r7, #0]
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 f860 	bl	8008706 <USBD_CtlError>
}
 8008646:	bf00      	nop
 8008648:	3708      	adds	r7, #8
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800864e:	b580      	push	{r7, lr}
 8008650:	b082      	sub	sp, #8
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
 8008656:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800865e:	b2db      	uxtb	r3, r3
 8008660:	3b01      	subs	r3, #1
 8008662:	2b02      	cmp	r3, #2
 8008664:	d80b      	bhi.n	800867e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	885b      	ldrh	r3, [r3, #2]
 800866a:	2b01      	cmp	r3, #1
 800866c:	d10c      	bne.n	8008688 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 f910 	bl	800889c <USBD_CtlSendStatus>
      }
      break;
 800867c:	e004      	b.n	8008688 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800867e:	6839      	ldr	r1, [r7, #0]
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 f840 	bl	8008706 <USBD_CtlError>
      break;
 8008686:	e000      	b.n	800868a <USBD_ClrFeature+0x3c>
      break;
 8008688:	bf00      	nop
  }
}
 800868a:	bf00      	nop
 800868c:	3708      	adds	r7, #8
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008692:	b580      	push	{r7, lr}
 8008694:	b084      	sub	sp, #16
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
 800869a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	781a      	ldrb	r2, [r3, #0]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	3301      	adds	r3, #1
 80086ac:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	781a      	ldrb	r2, [r3, #0]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	3301      	adds	r3, #1
 80086ba:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f7ff fa41 	bl	8007b44 <SWAPBYTE>
 80086c2:	4603      	mov	r3, r0
 80086c4:	461a      	mov	r2, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	3301      	adds	r3, #1
 80086ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	3301      	adds	r3, #1
 80086d4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80086d6:	68f8      	ldr	r0, [r7, #12]
 80086d8:	f7ff fa34 	bl	8007b44 <SWAPBYTE>
 80086dc:	4603      	mov	r3, r0
 80086de:	461a      	mov	r2, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	3301      	adds	r3, #1
 80086e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	3301      	adds	r3, #1
 80086ee:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f7ff fa27 	bl	8007b44 <SWAPBYTE>
 80086f6:	4603      	mov	r3, r0
 80086f8:	461a      	mov	r2, r3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	80da      	strh	r2, [r3, #6]
}
 80086fe:	bf00      	nop
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b082      	sub	sp, #8
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008710:	2180      	movs	r1, #128	; 0x80
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 fc5e 	bl	8008fd4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008718:	2100      	movs	r1, #0
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 fc5a 	bl	8008fd4 <USBD_LL_StallEP>
}
 8008720:	bf00      	nop
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b086      	sub	sp, #24
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008734:	2300      	movs	r3, #0
 8008736:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d036      	beq.n	80087ac <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008742:	6938      	ldr	r0, [r7, #16]
 8008744:	f000 f836 	bl	80087b4 <USBD_GetLen>
 8008748:	4603      	mov	r3, r0
 800874a:	3301      	adds	r3, #1
 800874c:	b29b      	uxth	r3, r3
 800874e:	005b      	lsls	r3, r3, #1
 8008750:	b29a      	uxth	r2, r3
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008756:	7dfb      	ldrb	r3, [r7, #23]
 8008758:	68ba      	ldr	r2, [r7, #8]
 800875a:	4413      	add	r3, r2
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	7812      	ldrb	r2, [r2, #0]
 8008760:	701a      	strb	r2, [r3, #0]
  idx++;
 8008762:	7dfb      	ldrb	r3, [r7, #23]
 8008764:	3301      	adds	r3, #1
 8008766:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008768:	7dfb      	ldrb	r3, [r7, #23]
 800876a:	68ba      	ldr	r2, [r7, #8]
 800876c:	4413      	add	r3, r2
 800876e:	2203      	movs	r2, #3
 8008770:	701a      	strb	r2, [r3, #0]
  idx++;
 8008772:	7dfb      	ldrb	r3, [r7, #23]
 8008774:	3301      	adds	r3, #1
 8008776:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008778:	e013      	b.n	80087a2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800877a:	7dfb      	ldrb	r3, [r7, #23]
 800877c:	68ba      	ldr	r2, [r7, #8]
 800877e:	4413      	add	r3, r2
 8008780:	693a      	ldr	r2, [r7, #16]
 8008782:	7812      	ldrb	r2, [r2, #0]
 8008784:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	3301      	adds	r3, #1
 800878a:	613b      	str	r3, [r7, #16]
    idx++;
 800878c:	7dfb      	ldrb	r3, [r7, #23]
 800878e:	3301      	adds	r3, #1
 8008790:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008792:	7dfb      	ldrb	r3, [r7, #23]
 8008794:	68ba      	ldr	r2, [r7, #8]
 8008796:	4413      	add	r3, r2
 8008798:	2200      	movs	r2, #0
 800879a:	701a      	strb	r2, [r3, #0]
    idx++;
 800879c:	7dfb      	ldrb	r3, [r7, #23]
 800879e:	3301      	adds	r3, #1
 80087a0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d1e7      	bne.n	800877a <USBD_GetString+0x52>
 80087aa:	e000      	b.n	80087ae <USBD_GetString+0x86>
    return;
 80087ac:	bf00      	nop
  }
}
 80087ae:	3718      	adds	r7, #24
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80087bc:	2300      	movs	r3, #0
 80087be:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80087c4:	e005      	b.n	80087d2 <USBD_GetLen+0x1e>
  {
    len++;
 80087c6:	7bfb      	ldrb	r3, [r7, #15]
 80087c8:	3301      	adds	r3, #1
 80087ca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	3301      	adds	r3, #1
 80087d0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d1f5      	bne.n	80087c6 <USBD_GetLen+0x12>
  }

  return len;
 80087da:	7bfb      	ldrb	r3, [r7, #15]
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3714      	adds	r7, #20
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	60b9      	str	r1, [r7, #8]
 80087f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2202      	movs	r2, #2
 80087f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	2100      	movs	r1, #0
 800880e:	68f8      	ldr	r0, [r7, #12]
 8008810:	f000 fc69 	bl	80090e6 <USBD_LL_Transmit>

  return USBD_OK;
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	3710      	adds	r7, #16
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}

0800881e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800881e:	b580      	push	{r7, lr}
 8008820:	b084      	sub	sp, #16
 8008822:	af00      	add	r7, sp, #0
 8008824:	60f8      	str	r0, [r7, #12]
 8008826:	60b9      	str	r1, [r7, #8]
 8008828:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	68ba      	ldr	r2, [r7, #8]
 800882e:	2100      	movs	r1, #0
 8008830:	68f8      	ldr	r0, [r7, #12]
 8008832:	f000 fc58 	bl	80090e6 <USBD_LL_Transmit>

  return USBD_OK;
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	3710      	adds	r7, #16
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2203      	movs	r2, #3
 8008850:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	68ba      	ldr	r2, [r7, #8]
 8008868:	2100      	movs	r1, #0
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f000 fc5c 	bl	8009128 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b084      	sub	sp, #16
 800887e:	af00      	add	r7, sp, #0
 8008880:	60f8      	str	r0, [r7, #12]
 8008882:	60b9      	str	r1, [r7, #8]
 8008884:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	68ba      	ldr	r2, [r7, #8]
 800888a:	2100      	movs	r1, #0
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f000 fc4b 	bl	8009128 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	3710      	adds	r7, #16
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2204      	movs	r2, #4
 80088a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80088ac:	2300      	movs	r3, #0
 80088ae:	2200      	movs	r2, #0
 80088b0:	2100      	movs	r1, #0
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 fc17 	bl	80090e6 <USBD_LL_Transmit>

  return USBD_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3708      	adds	r7, #8
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b082      	sub	sp, #8
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2205      	movs	r2, #5
 80088ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088d2:	2300      	movs	r3, #0
 80088d4:	2200      	movs	r2, #0
 80088d6:	2100      	movs	r1, #0
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 fc25 	bl	8009128 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088de:	2300      	movs	r3, #0
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3708      	adds	r7, #8
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80088ec:	2200      	movs	r2, #0
 80088ee:	4912      	ldr	r1, [pc, #72]	; (8008938 <MX_USB_DEVICE_Init+0x50>)
 80088f0:	4812      	ldr	r0, [pc, #72]	; (800893c <MX_USB_DEVICE_Init+0x54>)
 80088f2:	f7fe fd01 	bl	80072f8 <USBD_Init>
 80088f6:	4603      	mov	r3, r0
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d001      	beq.n	8008900 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80088fc:	f7f8 f874 	bl	80009e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8008900:	490f      	ldr	r1, [pc, #60]	; (8008940 <MX_USB_DEVICE_Init+0x58>)
 8008902:	480e      	ldr	r0, [pc, #56]	; (800893c <MX_USB_DEVICE_Init+0x54>)
 8008904:	f7fe fd28 	bl	8007358 <USBD_RegisterClass>
 8008908:	4603      	mov	r3, r0
 800890a:	2b00      	cmp	r3, #0
 800890c:	d001      	beq.n	8008912 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800890e:	f7f8 f86b 	bl	80009e8 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8008912:	490c      	ldr	r1, [pc, #48]	; (8008944 <MX_USB_DEVICE_Init+0x5c>)
 8008914:	4809      	ldr	r0, [pc, #36]	; (800893c <MX_USB_DEVICE_Init+0x54>)
 8008916:	f7fe fcd5 	bl	80072c4 <USBD_CUSTOM_HID_RegisterInterface>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d001      	beq.n	8008924 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008920:	f7f8 f862 	bl	80009e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008924:	4805      	ldr	r0, [pc, #20]	; (800893c <MX_USB_DEVICE_Init+0x54>)
 8008926:	f7fe fd4d 	bl	80073c4 <USBD_Start>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d001      	beq.n	8008934 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008930:	f7f8 f85a 	bl	80009e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008934:	bf00      	nop
 8008936:	bd80      	pop	{r7, pc}
 8008938:	20000184 	.word	0x20000184
 800893c:	200003e8 	.word	0x200003e8
 8008940:	2000000c 	.word	0x2000000c
 8008944:	20000174 	.word	0x20000174

08008948 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8008948:	b480      	push	{r7}
 800894a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800894c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800894e:	4618      	mov	r0, r3
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8008958:	b480      	push	{r7}
 800895a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800895c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800895e:	4618      	mov	r0, r3
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t* buff)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b086      	sub	sp, #24
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 6 */

	// Read the first 8 bytes of buff
	uint8_t byte0 = buff[0];
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	75fb      	strb	r3, [r7, #23]
	uint8_t byte1 = buff[1];
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	785b      	ldrb	r3, [r3, #1]
 800897a:	75bb      	strb	r3, [r7, #22]
	uint8_t byte2 = buff[2];
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	789b      	ldrb	r3, [r3, #2]
 8008980:	757b      	strb	r3, [r7, #21]
	uint8_t byte3 = buff[3];
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	78db      	ldrb	r3, [r3, #3]
 8008986:	753b      	strb	r3, [r7, #20]
	uint8_t byte4 = buff[4];
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	791b      	ldrb	r3, [r3, #4]
 800898c:	74fb      	strb	r3, [r7, #19]
	uint8_t byte5 = buff[5];
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	795b      	ldrb	r3, [r3, #5]
 8008992:	74bb      	strb	r3, [r7, #18]
	uint8_t byte6 = buff[6];
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	799b      	ldrb	r3, [r3, #6]
 8008998:	747b      	strb	r3, [r7, #17]
	uint8_t byte7 = buff[7];
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	79db      	ldrb	r3, [r3, #7]
 800899e:	743b      	strb	r3, [r7, #16]
	uint8_t byte8 = buff[8];
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	7a1b      	ldrb	r3, [r3, #8]
 80089a4:	73fb      	strb	r3, [r7, #15]

	// If buff[0] is 0, then this is a rumble packet
	if(buff[0] == 0) {
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d106      	bne.n	80089bc <CUSTOM_HID_OutEvent_FS+0x54>
		HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)(brass2 + 44), 16384);
 80089ae:	4b0a      	ldr	r3, [pc, #40]	; (80089d8 <CUSTOM_HID_OutEvent_FS+0x70>)
 80089b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80089b4:	4619      	mov	r1, r3
 80089b6:	4809      	ldr	r0, [pc, #36]	; (80089dc <CUSTOM_HID_OutEvent_FS+0x74>)
 80089b8:	f7f9 fe50 	bl	800265c <HAL_I2S_Transmit_DMA>
	}


  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 80089bc:	4808      	ldr	r0, [pc, #32]	; (80089e0 <CUSTOM_HID_OutEvent_FS+0x78>)
 80089be:	f7fe fc21 	bl	8007204 <USBD_CUSTOM_HID_ReceivePacket>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d002      	beq.n	80089ce <CUSTOM_HID_OutEvent_FS+0x66>
  {
    return -1;
 80089c8:	f04f 33ff 	mov.w	r3, #4294967295
 80089cc:	e000      	b.n	80089d0 <CUSTOM_HID_OutEvent_FS+0x68>
  }

  return (USBD_OK);
 80089ce:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3718      	adds	r7, #24
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	08009308 	.word	0x08009308
 80089dc:	20000298 	.word	0x20000298
 80089e0:	200003e8 	.word	0x200003e8

080089e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	4603      	mov	r3, r0
 80089ec:	6039      	str	r1, [r7, #0]
 80089ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	2212      	movs	r2, #18
 80089f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80089f6:	4b03      	ldr	r3, [pc, #12]	; (8008a04 <USBD_FS_DeviceDescriptor+0x20>)
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	370c      	adds	r7, #12
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr
 8008a04:	200001a0 	.word	0x200001a0

08008a08 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	4603      	mov	r3, r0
 8008a10:	6039      	str	r1, [r7, #0]
 8008a12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	2204      	movs	r2, #4
 8008a18:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008a1a:	4b03      	ldr	r3, [pc, #12]	; (8008a28 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr
 8008a28:	200001b4 	.word	0x200001b4

08008a2c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	4603      	mov	r3, r0
 8008a34:	6039      	str	r1, [r7, #0]
 8008a36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a38:	79fb      	ldrb	r3, [r7, #7]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d105      	bne.n	8008a4a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a3e:	683a      	ldr	r2, [r7, #0]
 8008a40:	4907      	ldr	r1, [pc, #28]	; (8008a60 <USBD_FS_ProductStrDescriptor+0x34>)
 8008a42:	4808      	ldr	r0, [pc, #32]	; (8008a64 <USBD_FS_ProductStrDescriptor+0x38>)
 8008a44:	f7ff fe70 	bl	8008728 <USBD_GetString>
 8008a48:	e004      	b.n	8008a54 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a4a:	683a      	ldr	r2, [r7, #0]
 8008a4c:	4904      	ldr	r1, [pc, #16]	; (8008a60 <USBD_FS_ProductStrDescriptor+0x34>)
 8008a4e:	4805      	ldr	r0, [pc, #20]	; (8008a64 <USBD_FS_ProductStrDescriptor+0x38>)
 8008a50:	f7ff fe6a 	bl	8008728 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a54:	4b02      	ldr	r3, [pc, #8]	; (8008a60 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3708      	adds	r7, #8
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	200006c4 	.word	0x200006c4
 8008a64:	08009264 	.word	0x08009264

08008a68 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	4603      	mov	r3, r0
 8008a70:	6039      	str	r1, [r7, #0]
 8008a72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008a74:	683a      	ldr	r2, [r7, #0]
 8008a76:	4904      	ldr	r1, [pc, #16]	; (8008a88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008a78:	4804      	ldr	r0, [pc, #16]	; (8008a8c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008a7a:	f7ff fe55 	bl	8008728 <USBD_GetString>
  return USBD_StrDesc;
 8008a7e:	4b02      	ldr	r3, [pc, #8]	; (8008a88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3708      	adds	r7, #8
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	200006c4 	.word	0x200006c4
 8008a8c:	08009284 	.word	0x08009284

08008a90 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	4603      	mov	r3, r0
 8008a98:	6039      	str	r1, [r7, #0]
 8008a9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	221a      	movs	r2, #26
 8008aa0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008aa2:	f000 f843 	bl	8008b2c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008aa6:	4b02      	ldr	r3, [pc, #8]	; (8008ab0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3708      	adds	r7, #8
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}
 8008ab0:	200001b8 	.word	0x200001b8

08008ab4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	4603      	mov	r3, r0
 8008abc:	6039      	str	r1, [r7, #0]
 8008abe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008ac0:	79fb      	ldrb	r3, [r7, #7]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d105      	bne.n	8008ad2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008ac6:	683a      	ldr	r2, [r7, #0]
 8008ac8:	4907      	ldr	r1, [pc, #28]	; (8008ae8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008aca:	4808      	ldr	r0, [pc, #32]	; (8008aec <USBD_FS_ConfigStrDescriptor+0x38>)
 8008acc:	f7ff fe2c 	bl	8008728 <USBD_GetString>
 8008ad0:	e004      	b.n	8008adc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008ad2:	683a      	ldr	r2, [r7, #0]
 8008ad4:	4904      	ldr	r1, [pc, #16]	; (8008ae8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008ad6:	4805      	ldr	r0, [pc, #20]	; (8008aec <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ad8:	f7ff fe26 	bl	8008728 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008adc:	4b02      	ldr	r3, [pc, #8]	; (8008ae8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3708      	adds	r7, #8
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	200006c4 	.word	0x200006c4
 8008aec:	08009290 	.word	0x08009290

08008af0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	4603      	mov	r3, r0
 8008af8:	6039      	str	r1, [r7, #0]
 8008afa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008afc:	79fb      	ldrb	r3, [r7, #7]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d105      	bne.n	8008b0e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b02:	683a      	ldr	r2, [r7, #0]
 8008b04:	4907      	ldr	r1, [pc, #28]	; (8008b24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b06:	4808      	ldr	r0, [pc, #32]	; (8008b28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b08:	f7ff fe0e 	bl	8008728 <USBD_GetString>
 8008b0c:	e004      	b.n	8008b18 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b0e:	683a      	ldr	r2, [r7, #0]
 8008b10:	4904      	ldr	r1, [pc, #16]	; (8008b24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b12:	4805      	ldr	r0, [pc, #20]	; (8008b28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b14:	f7ff fe08 	bl	8008728 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b18:	4b02      	ldr	r3, [pc, #8]	; (8008b24 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3708      	adds	r7, #8
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	200006c4 	.word	0x200006c4
 8008b28:	080092a4 	.word	0x080092a4

08008b2c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008b32:	4b0f      	ldr	r3, [pc, #60]	; (8008b70 <Get_SerialNum+0x44>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008b38:	4b0e      	ldr	r3, [pc, #56]	; (8008b74 <Get_SerialNum+0x48>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008b3e:	4b0e      	ldr	r3, [pc, #56]	; (8008b78 <Get_SerialNum+0x4c>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008b44:	68fa      	ldr	r2, [r7, #12]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4413      	add	r3, r2
 8008b4a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d009      	beq.n	8008b66 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008b52:	2208      	movs	r2, #8
 8008b54:	4909      	ldr	r1, [pc, #36]	; (8008b7c <Get_SerialNum+0x50>)
 8008b56:	68f8      	ldr	r0, [r7, #12]
 8008b58:	f000 f814 	bl	8008b84 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008b5c:	2204      	movs	r2, #4
 8008b5e:	4908      	ldr	r1, [pc, #32]	; (8008b80 <Get_SerialNum+0x54>)
 8008b60:	68b8      	ldr	r0, [r7, #8]
 8008b62:	f000 f80f 	bl	8008b84 <IntToUnicode>
  }
}
 8008b66:	bf00      	nop
 8008b68:	3710      	adds	r7, #16
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	1fff7a10 	.word	0x1fff7a10
 8008b74:	1fff7a14 	.word	0x1fff7a14
 8008b78:	1fff7a18 	.word	0x1fff7a18
 8008b7c:	200001ba 	.word	0x200001ba
 8008b80:	200001ca 	.word	0x200001ca

08008b84 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b087      	sub	sp, #28
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	4613      	mov	r3, r2
 8008b90:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008b92:	2300      	movs	r3, #0
 8008b94:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008b96:	2300      	movs	r3, #0
 8008b98:	75fb      	strb	r3, [r7, #23]
 8008b9a:	e027      	b.n	8008bec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	0f1b      	lsrs	r3, r3, #28
 8008ba0:	2b09      	cmp	r3, #9
 8008ba2:	d80b      	bhi.n	8008bbc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	0f1b      	lsrs	r3, r3, #28
 8008ba8:	b2da      	uxtb	r2, r3
 8008baa:	7dfb      	ldrb	r3, [r7, #23]
 8008bac:	005b      	lsls	r3, r3, #1
 8008bae:	4619      	mov	r1, r3
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	440b      	add	r3, r1
 8008bb4:	3230      	adds	r2, #48	; 0x30
 8008bb6:	b2d2      	uxtb	r2, r2
 8008bb8:	701a      	strb	r2, [r3, #0]
 8008bba:	e00a      	b.n	8008bd2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	0f1b      	lsrs	r3, r3, #28
 8008bc0:	b2da      	uxtb	r2, r3
 8008bc2:	7dfb      	ldrb	r3, [r7, #23]
 8008bc4:	005b      	lsls	r3, r3, #1
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	440b      	add	r3, r1
 8008bcc:	3237      	adds	r2, #55	; 0x37
 8008bce:	b2d2      	uxtb	r2, r2
 8008bd0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	011b      	lsls	r3, r3, #4
 8008bd6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008bd8:	7dfb      	ldrb	r3, [r7, #23]
 8008bda:	005b      	lsls	r3, r3, #1
 8008bdc:	3301      	adds	r3, #1
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	4413      	add	r3, r2
 8008be2:	2200      	movs	r2, #0
 8008be4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008be6:	7dfb      	ldrb	r3, [r7, #23]
 8008be8:	3301      	adds	r3, #1
 8008bea:	75fb      	strb	r3, [r7, #23]
 8008bec:	7dfa      	ldrb	r2, [r7, #23]
 8008bee:	79fb      	ldrb	r3, [r7, #7]
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d3d3      	bcc.n	8008b9c <IntToUnicode+0x18>
  }
}
 8008bf4:	bf00      	nop
 8008bf6:	bf00      	nop
 8008bf8:	371c      	adds	r7, #28
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
	...

08008c04 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b08a      	sub	sp, #40	; 0x28
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c0c:	f107 0314 	add.w	r3, r7, #20
 8008c10:	2200      	movs	r2, #0
 8008c12:	601a      	str	r2, [r3, #0]
 8008c14:	605a      	str	r2, [r3, #4]
 8008c16:	609a      	str	r2, [r3, #8]
 8008c18:	60da      	str	r2, [r3, #12]
 8008c1a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c24:	d13a      	bne.n	8008c9c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c26:	2300      	movs	r3, #0
 8008c28:	613b      	str	r3, [r7, #16]
 8008c2a:	4b1e      	ldr	r3, [pc, #120]	; (8008ca4 <HAL_PCD_MspInit+0xa0>)
 8008c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c2e:	4a1d      	ldr	r2, [pc, #116]	; (8008ca4 <HAL_PCD_MspInit+0xa0>)
 8008c30:	f043 0301 	orr.w	r3, r3, #1
 8008c34:	6313      	str	r3, [r2, #48]	; 0x30
 8008c36:	4b1b      	ldr	r3, [pc, #108]	; (8008ca4 <HAL_PCD_MspInit+0xa0>)
 8008c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c3a:	f003 0301 	and.w	r3, r3, #1
 8008c3e:	613b      	str	r3, [r7, #16]
 8008c40:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008c42:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c48:	2302      	movs	r3, #2
 8008c4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c50:	2303      	movs	r3, #3
 8008c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008c54:	230a      	movs	r3, #10
 8008c56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c58:	f107 0314 	add.w	r3, r7, #20
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	4812      	ldr	r0, [pc, #72]	; (8008ca8 <HAL_PCD_MspInit+0xa4>)
 8008c60:	f7f9 fa06 	bl	8002070 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008c64:	4b0f      	ldr	r3, [pc, #60]	; (8008ca4 <HAL_PCD_MspInit+0xa0>)
 8008c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c68:	4a0e      	ldr	r2, [pc, #56]	; (8008ca4 <HAL_PCD_MspInit+0xa0>)
 8008c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c6e:	6353      	str	r3, [r2, #52]	; 0x34
 8008c70:	2300      	movs	r3, #0
 8008c72:	60fb      	str	r3, [r7, #12]
 8008c74:	4b0b      	ldr	r3, [pc, #44]	; (8008ca4 <HAL_PCD_MspInit+0xa0>)
 8008c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c78:	4a0a      	ldr	r2, [pc, #40]	; (8008ca4 <HAL_PCD_MspInit+0xa0>)
 8008c7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c7e:	6453      	str	r3, [r2, #68]	; 0x44
 8008c80:	4b08      	ldr	r3, [pc, #32]	; (8008ca4 <HAL_PCD_MspInit+0xa0>)
 8008c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c88:	60fb      	str	r3, [r7, #12]
 8008c8a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	2100      	movs	r1, #0
 8008c90:	2043      	movs	r0, #67	; 0x43
 8008c92:	f7f8 fe46 	bl	8001922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008c96:	2043      	movs	r0, #67	; 0x43
 8008c98:	f7f8 fe5f 	bl	800195a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008c9c:	bf00      	nop
 8008c9e:	3728      	adds	r7, #40	; 0x28
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}
 8008ca4:	40023800 	.word	0x40023800
 8008ca8:	40020000 	.word	0x40020000

08008cac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	4610      	mov	r0, r2
 8008cc4:	f7fe fbcb 	bl	800745e <USBD_LL_SetupStage>
}
 8008cc8:	bf00      	nop
 8008cca:	3708      	adds	r7, #8
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	460b      	mov	r3, r1
 8008cda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8008ce2:	78fa      	ldrb	r2, [r7, #3]
 8008ce4:	6879      	ldr	r1, [r7, #4]
 8008ce6:	4613      	mov	r3, r2
 8008ce8:	00db      	lsls	r3, r3, #3
 8008cea:	4413      	add	r3, r2
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	440b      	add	r3, r1
 8008cf0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	78fb      	ldrb	r3, [r7, #3]
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	f7fe fc05 	bl	8007508 <USBD_LL_DataOutStage>
}
 8008cfe:	bf00      	nop
 8008d00:	3708      	adds	r7, #8
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b082      	sub	sp, #8
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
 8008d0e:	460b      	mov	r3, r1
 8008d10:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8008d18:	78fa      	ldrb	r2, [r7, #3]
 8008d1a:	6879      	ldr	r1, [r7, #4]
 8008d1c:	4613      	mov	r3, r2
 8008d1e:	00db      	lsls	r3, r3, #3
 8008d20:	4413      	add	r3, r2
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	440b      	add	r3, r1
 8008d26:	3320      	adds	r3, #32
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	78fb      	ldrb	r3, [r7, #3]
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	f7fe fc9e 	bl	800766e <USBD_LL_DataInStage>
}
 8008d32:	bf00      	nop
 8008d34:	3708      	adds	r7, #8
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b082      	sub	sp, #8
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7fe fdd8 	bl	80078fe <USBD_LL_SOF>
}
 8008d4e:	bf00      	nop
 8008d50:	3708      	adds	r7, #8
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b084      	sub	sp, #16
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	79db      	ldrb	r3, [r3, #7]
 8008d66:	2b02      	cmp	r3, #2
 8008d68:	d001      	beq.n	8008d6e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008d6a:	f7f7 fe3d 	bl	80009e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008d74:	7bfa      	ldrb	r2, [r7, #15]
 8008d76:	4611      	mov	r1, r2
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f7fe fd7c 	bl	8007876 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008d84:	4618      	mov	r0, r3
 8008d86:	f7fe fd24 	bl	80077d2 <USBD_LL_Reset>
}
 8008d8a:	bf00      	nop
 8008d8c:	3710      	adds	r7, #16
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
	...

08008d94 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008da2:	4618      	mov	r0, r3
 8008da4:	f7fe fd77 	bl	8007896 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	6812      	ldr	r2, [r2, #0]
 8008db6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008dba:	f043 0301 	orr.w	r3, r3, #1
 8008dbe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	7adb      	ldrb	r3, [r3, #11]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d005      	beq.n	8008dd4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008dc8:	4b04      	ldr	r3, [pc, #16]	; (8008ddc <HAL_PCD_SuspendCallback+0x48>)
 8008dca:	691b      	ldr	r3, [r3, #16]
 8008dcc:	4a03      	ldr	r2, [pc, #12]	; (8008ddc <HAL_PCD_SuspendCallback+0x48>)
 8008dce:	f043 0306 	orr.w	r3, r3, #6
 8008dd2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008dd4:	bf00      	nop
 8008dd6:	3708      	adds	r7, #8
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}
 8008ddc:	e000ed00 	.word	0xe000ed00

08008de0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008dee:	4618      	mov	r0, r3
 8008df0:	f7fe fd6d 	bl	80078ce <USBD_LL_Resume>
}
 8008df4:	bf00      	nop
 8008df6:	3708      	adds	r7, #8
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	460b      	mov	r3, r1
 8008e06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008e0e:	78fa      	ldrb	r2, [r7, #3]
 8008e10:	4611      	mov	r1, r2
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7fe fdc5 	bl	80079a2 <USBD_LL_IsoOUTIncomplete>
}
 8008e18:	bf00      	nop
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	460b      	mov	r3, r1
 8008e2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008e32:	78fa      	ldrb	r2, [r7, #3]
 8008e34:	4611      	mov	r1, r2
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7fe fd81 	bl	800793e <USBD_LL_IsoINIncomplete>
}
 8008e3c:	bf00      	nop
 8008e3e:	3708      	adds	r7, #8
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7fe fdd7 	bl	8007a06 <USBD_LL_DevConnected>
}
 8008e58:	bf00      	nop
 8008e5a:	3708      	adds	r7, #8
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7fe fdd4 	bl	8007a1c <USBD_LL_DevDisconnected>
}
 8008e74:	bf00      	nop
 8008e76:	3708      	adds	r7, #8
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d13c      	bne.n	8008f06 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008e8c:	4a20      	ldr	r2, [pc, #128]	; (8008f10 <USBD_LL_Init+0x94>)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	4a1e      	ldr	r2, [pc, #120]	; (8008f10 <USBD_LL_Init+0x94>)
 8008e98:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008e9c:	4b1c      	ldr	r3, [pc, #112]	; (8008f10 <USBD_LL_Init+0x94>)
 8008e9e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008ea2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008ea4:	4b1a      	ldr	r3, [pc, #104]	; (8008f10 <USBD_LL_Init+0x94>)
 8008ea6:	2204      	movs	r2, #4
 8008ea8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008eaa:	4b19      	ldr	r3, [pc, #100]	; (8008f10 <USBD_LL_Init+0x94>)
 8008eac:	2202      	movs	r2, #2
 8008eae:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008eb0:	4b17      	ldr	r3, [pc, #92]	; (8008f10 <USBD_LL_Init+0x94>)
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008eb6:	4b16      	ldr	r3, [pc, #88]	; (8008f10 <USBD_LL_Init+0x94>)
 8008eb8:	2202      	movs	r2, #2
 8008eba:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008ebc:	4b14      	ldr	r3, [pc, #80]	; (8008f10 <USBD_LL_Init+0x94>)
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008ec2:	4b13      	ldr	r3, [pc, #76]	; (8008f10 <USBD_LL_Init+0x94>)
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008ec8:	4b11      	ldr	r3, [pc, #68]	; (8008f10 <USBD_LL_Init+0x94>)
 8008eca:	2200      	movs	r2, #0
 8008ecc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008ece:	4b10      	ldr	r3, [pc, #64]	; (8008f10 <USBD_LL_Init+0x94>)
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008ed4:	4b0e      	ldr	r3, [pc, #56]	; (8008f10 <USBD_LL_Init+0x94>)
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008eda:	480d      	ldr	r0, [pc, #52]	; (8008f10 <USBD_LL_Init+0x94>)
 8008edc:	f7fa f824 	bl	8002f28 <HAL_PCD_Init>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d001      	beq.n	8008eea <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008ee6:	f7f7 fd7f 	bl	80009e8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008eea:	2180      	movs	r1, #128	; 0x80
 8008eec:	4808      	ldr	r0, [pc, #32]	; (8008f10 <USBD_LL_Init+0x94>)
 8008eee:	f7fb fa36 	bl	800435e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008ef2:	2240      	movs	r2, #64	; 0x40
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	4806      	ldr	r0, [pc, #24]	; (8008f10 <USBD_LL_Init+0x94>)
 8008ef8:	f7fb f9ea 	bl	80042d0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008efc:	2280      	movs	r2, #128	; 0x80
 8008efe:	2101      	movs	r1, #1
 8008f00:	4803      	ldr	r0, [pc, #12]	; (8008f10 <USBD_LL_Init+0x94>)
 8008f02:	f7fb f9e5 	bl	80042d0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008f06:	2300      	movs	r3, #0
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3708      	adds	r7, #8
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	200008c4 	.word	0x200008c4

08008f14 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f20:	2300      	movs	r3, #0
 8008f22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7fa f90b 	bl	8003146 <HAL_PCD_Start>
 8008f30:	4603      	mov	r3, r0
 8008f32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f34:	7bfb      	ldrb	r3, [r7, #15]
 8008f36:	4618      	mov	r0, r3
 8008f38:	f000 f930 	bl	800919c <USBD_Get_USB_Status>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f40:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3710      	adds	r7, #16
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b084      	sub	sp, #16
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
 8008f52:	4608      	mov	r0, r1
 8008f54:	4611      	mov	r1, r2
 8008f56:	461a      	mov	r2, r3
 8008f58:	4603      	mov	r3, r0
 8008f5a:	70fb      	strb	r3, [r7, #3]
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	70bb      	strb	r3, [r7, #2]
 8008f60:	4613      	mov	r3, r2
 8008f62:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f64:	2300      	movs	r3, #0
 8008f66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008f72:	78bb      	ldrb	r3, [r7, #2]
 8008f74:	883a      	ldrh	r2, [r7, #0]
 8008f76:	78f9      	ldrb	r1, [r7, #3]
 8008f78:	f7fa fddf 	bl	8003b3a <HAL_PCD_EP_Open>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f80:	7bfb      	ldrb	r3, [r7, #15]
 8008f82:	4618      	mov	r0, r3
 8008f84:	f000 f90a 	bl	800919c <USBD_Get_USB_Status>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3710      	adds	r7, #16
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}

08008f96 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b084      	sub	sp, #16
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008fb0:	78fa      	ldrb	r2, [r7, #3]
 8008fb2:	4611      	mov	r1, r2
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7fa fe28 	bl	8003c0a <HAL_PCD_EP_Close>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fbe:	7bfb      	ldrb	r3, [r7, #15]
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f000 f8eb 	bl	800919c <USBD_Get_USB_Status>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fca:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3710      	adds	r7, #16
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	460b      	mov	r3, r1
 8008fde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008fee:	78fa      	ldrb	r2, [r7, #3]
 8008ff0:	4611      	mov	r1, r2
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f7fa fec8 	bl	8003d88 <HAL_PCD_EP_SetStall>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ffc:	7bfb      	ldrb	r3, [r7, #15]
 8008ffe:	4618      	mov	r0, r3
 8009000:	f000 f8cc 	bl	800919c <USBD_Get_USB_Status>
 8009004:	4603      	mov	r3, r0
 8009006:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009008:	7bbb      	ldrb	r3, [r7, #14]
}
 800900a:	4618      	mov	r0, r3
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009012:	b580      	push	{r7, lr}
 8009014:	b084      	sub	sp, #16
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
 800901a:	460b      	mov	r3, r1
 800901c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800901e:	2300      	movs	r3, #0
 8009020:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009022:	2300      	movs	r3, #0
 8009024:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800902c:	78fa      	ldrb	r2, [r7, #3]
 800902e:	4611      	mov	r1, r2
 8009030:	4618      	mov	r0, r3
 8009032:	f7fa ff0c 	bl	8003e4e <HAL_PCD_EP_ClrStall>
 8009036:	4603      	mov	r3, r0
 8009038:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800903a:	7bfb      	ldrb	r3, [r7, #15]
 800903c:	4618      	mov	r0, r3
 800903e:	f000 f8ad 	bl	800919c <USBD_Get_USB_Status>
 8009042:	4603      	mov	r3, r0
 8009044:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009046:	7bbb      	ldrb	r3, [r7, #14]
}
 8009048:	4618      	mov	r0, r3
 800904a:	3710      	adds	r7, #16
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009050:	b480      	push	{r7}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	460b      	mov	r3, r1
 800905a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009062:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009064:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009068:	2b00      	cmp	r3, #0
 800906a:	da0b      	bge.n	8009084 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800906c:	78fb      	ldrb	r3, [r7, #3]
 800906e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009072:	68f9      	ldr	r1, [r7, #12]
 8009074:	4613      	mov	r3, r2
 8009076:	00db      	lsls	r3, r3, #3
 8009078:	4413      	add	r3, r2
 800907a:	009b      	lsls	r3, r3, #2
 800907c:	440b      	add	r3, r1
 800907e:	3316      	adds	r3, #22
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	e00b      	b.n	800909c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009084:	78fb      	ldrb	r3, [r7, #3]
 8009086:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800908a:	68f9      	ldr	r1, [r7, #12]
 800908c:	4613      	mov	r3, r2
 800908e:	00db      	lsls	r3, r3, #3
 8009090:	4413      	add	r3, r2
 8009092:	009b      	lsls	r3, r3, #2
 8009094:	440b      	add	r3, r1
 8009096:	f203 2356 	addw	r3, r3, #598	; 0x256
 800909a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800909c:	4618      	mov	r0, r3
 800909e:	3714      	adds	r7, #20
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	460b      	mov	r3, r1
 80090b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090b4:	2300      	movs	r3, #0
 80090b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090b8:	2300      	movs	r3, #0
 80090ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80090c2:	78fa      	ldrb	r2, [r7, #3]
 80090c4:	4611      	mov	r1, r2
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7fa fd13 	bl	8003af2 <HAL_PCD_SetAddress>
 80090cc:	4603      	mov	r3, r0
 80090ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090d0:	7bfb      	ldrb	r3, [r7, #15]
 80090d2:	4618      	mov	r0, r3
 80090d4:	f000 f862 	bl	800919c <USBD_Get_USB_Status>
 80090d8:	4603      	mov	r3, r0
 80090da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b086      	sub	sp, #24
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	60f8      	str	r0, [r7, #12]
 80090ee:	607a      	str	r2, [r7, #4]
 80090f0:	603b      	str	r3, [r7, #0]
 80090f2:	460b      	mov	r3, r1
 80090f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090f6:	2300      	movs	r3, #0
 80090f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090fa:	2300      	movs	r3, #0
 80090fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009104:	7af9      	ldrb	r1, [r7, #11]
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	f7fa fe03 	bl	8003d14 <HAL_PCD_EP_Transmit>
 800910e:	4603      	mov	r3, r0
 8009110:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009112:	7dfb      	ldrb	r3, [r7, #23]
 8009114:	4618      	mov	r0, r3
 8009116:	f000 f841 	bl	800919c <USBD_Get_USB_Status>
 800911a:	4603      	mov	r3, r0
 800911c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800911e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009120:	4618      	mov	r0, r3
 8009122:	3718      	adds	r7, #24
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b086      	sub	sp, #24
 800912c:	af00      	add	r7, sp, #0
 800912e:	60f8      	str	r0, [r7, #12]
 8009130:	607a      	str	r2, [r7, #4]
 8009132:	603b      	str	r3, [r7, #0]
 8009134:	460b      	mov	r3, r1
 8009136:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009138:	2300      	movs	r3, #0
 800913a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800913c:	2300      	movs	r3, #0
 800913e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009146:	7af9      	ldrb	r1, [r7, #11]
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	687a      	ldr	r2, [r7, #4]
 800914c:	f7fa fda7 	bl	8003c9e <HAL_PCD_EP_Receive>
 8009150:	4603      	mov	r3, r0
 8009152:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009154:	7dfb      	ldrb	r3, [r7, #23]
 8009156:	4618      	mov	r0, r3
 8009158:	f000 f820 	bl	800919c <USBD_Get_USB_Status>
 800915c:	4603      	mov	r3, r0
 800915e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009160:	7dbb      	ldrb	r3, [r7, #22]
}
 8009162:	4618      	mov	r0, r3
 8009164:	3718      	adds	r7, #24
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
	...

0800916c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800916c:	b480      	push	{r7}
 800916e:	b083      	sub	sp, #12
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8009174:	4b03      	ldr	r3, [pc, #12]	; (8009184 <USBD_static_malloc+0x18>)
}
 8009176:	4618      	mov	r0, r3
 8009178:	370c      	adds	r7, #12
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr
 8009182:	bf00      	nop
 8009184:	20000da8 	.word	0x20000da8

08009188 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]

}
 8009190:	bf00      	nop
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800919c:	b480      	push	{r7}
 800919e:	b085      	sub	sp, #20
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	4603      	mov	r3, r0
 80091a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091a6:	2300      	movs	r3, #0
 80091a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80091aa:	79fb      	ldrb	r3, [r7, #7]
 80091ac:	2b03      	cmp	r3, #3
 80091ae:	d817      	bhi.n	80091e0 <USBD_Get_USB_Status+0x44>
 80091b0:	a201      	add	r2, pc, #4	; (adr r2, 80091b8 <USBD_Get_USB_Status+0x1c>)
 80091b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b6:	bf00      	nop
 80091b8:	080091c9 	.word	0x080091c9
 80091bc:	080091cf 	.word	0x080091cf
 80091c0:	080091d5 	.word	0x080091d5
 80091c4:	080091db 	.word	0x080091db
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80091c8:	2300      	movs	r3, #0
 80091ca:	73fb      	strb	r3, [r7, #15]
    break;
 80091cc:	e00b      	b.n	80091e6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80091ce:	2303      	movs	r3, #3
 80091d0:	73fb      	strb	r3, [r7, #15]
    break;
 80091d2:	e008      	b.n	80091e6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80091d4:	2301      	movs	r3, #1
 80091d6:	73fb      	strb	r3, [r7, #15]
    break;
 80091d8:	e005      	b.n	80091e6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80091da:	2303      	movs	r3, #3
 80091dc:	73fb      	strb	r3, [r7, #15]
    break;
 80091de:	e002      	b.n	80091e6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80091e0:	2303      	movs	r3, #3
 80091e2:	73fb      	strb	r3, [r7, #15]
    break;
 80091e4:	bf00      	nop
  }
  return usb_status;
 80091e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3714      	adds	r7, #20
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <memset>:
 80091f4:	4402      	add	r2, r0
 80091f6:	4603      	mov	r3, r0
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d100      	bne.n	80091fe <memset+0xa>
 80091fc:	4770      	bx	lr
 80091fe:	f803 1b01 	strb.w	r1, [r3], #1
 8009202:	e7f9      	b.n	80091f8 <memset+0x4>

08009204 <__libc_init_array>:
 8009204:	b570      	push	{r4, r5, r6, lr}
 8009206:	4d0d      	ldr	r5, [pc, #52]	; (800923c <__libc_init_array+0x38>)
 8009208:	4c0d      	ldr	r4, [pc, #52]	; (8009240 <__libc_init_array+0x3c>)
 800920a:	1b64      	subs	r4, r4, r5
 800920c:	10a4      	asrs	r4, r4, #2
 800920e:	2600      	movs	r6, #0
 8009210:	42a6      	cmp	r6, r4
 8009212:	d109      	bne.n	8009228 <__libc_init_array+0x24>
 8009214:	4d0b      	ldr	r5, [pc, #44]	; (8009244 <__libc_init_array+0x40>)
 8009216:	4c0c      	ldr	r4, [pc, #48]	; (8009248 <__libc_init_array+0x44>)
 8009218:	f000 f818 	bl	800924c <_init>
 800921c:	1b64      	subs	r4, r4, r5
 800921e:	10a4      	asrs	r4, r4, #2
 8009220:	2600      	movs	r6, #0
 8009222:	42a6      	cmp	r6, r4
 8009224:	d105      	bne.n	8009232 <__libc_init_array+0x2e>
 8009226:	bd70      	pop	{r4, r5, r6, pc}
 8009228:	f855 3b04 	ldr.w	r3, [r5], #4
 800922c:	4798      	blx	r3
 800922e:	3601      	adds	r6, #1
 8009230:	e7ee      	b.n	8009210 <__libc_init_array+0xc>
 8009232:	f855 3b04 	ldr.w	r3, [r5], #4
 8009236:	4798      	blx	r3
 8009238:	3601      	adds	r6, #1
 800923a:	e7f2      	b.n	8009222 <__libc_init_array+0x1e>
 800923c:	08011378 	.word	0x08011378
 8009240:	08011378 	.word	0x08011378
 8009244:	08011378 	.word	0x08011378
 8009248:	0801137c 	.word	0x0801137c

0800924c <_init>:
 800924c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800924e:	bf00      	nop
 8009250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009252:	bc08      	pop	{r3}
 8009254:	469e      	mov	lr, r3
 8009256:	4770      	bx	lr

08009258 <_fini>:
 8009258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800925a:	bf00      	nop
 800925c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800925e:	bc08      	pop	{r3}
 8009260:	469e      	mov	lr, r3
 8009262:	4770      	bx	lr
